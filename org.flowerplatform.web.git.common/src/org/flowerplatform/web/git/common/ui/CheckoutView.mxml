<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
@author Cristina Constantinescu
-->
<popup:Wizard  xmlns:popup="org.flowerplatform.flexutil.popup.*"		   
			   xmlns:fx="http://www.adobe.com/2006/mxml" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   
			   getIndexForStateFunction="getIndexForState" >
	
	<fx:Script>
		<![CDATA[
			import com.flextras.mobile.dropDownList.DropDownList;
			
			import mx.collections.ArrayCollection;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			import org.flowerplatform.web.git.common.GitCommonPlugin;
			import org.flowerplatform.web.git.common.remote.dto.GitRef;
			import org.flowerplatform.web.git.common.remote.dto.RemoteConfig;
			
			import spark.events.IndexChangeEvent;
		
			public var node:TreeNode;
			
			private var cbRemotes:spark.components.DropDownList;
			private var cbRemoteBranches:spark.components.DropDownList;
			
			override public function set viewHost(value:IViewHost):void {
				super.viewHost = value;
				viewHost.setLabel(GitCommonPlugin.getInstance().getMessage('git.action.checkout.label'));
				viewHost.setIcon(GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/checkout.gif'));
			}
			
			override protected function creationCompleteHandler():void {
				super.creationCompleteHandler();
				wizardImage.source = GitCommonPlugin.getInstance().getResourceUrl("images/newconnect_wizban.png");
				
				callLater(brName.setFocus);
				if (node.pathFragment.type == GitCommonPlugin.NODE_TYPE_REMOTE_BRANCHES) {
					viewHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
					GitCommonPlugin.getInstance().service.getAllRemotes(node, this, getAllRemotesCallbackHandler);
				} else {
					upstreamPanel.visible = false;
				}
			}
		
			private function getAllRemotesCallbackHandler(result:ArrayCollection):void {
				viewHost.hideSpinner();
				if (result != null) {
					cbRemotes.dataProvider = result;
					cbRemotes.selectedIndex = 0;
					cbRemotes_changeHandler(null);
				}
			}
			
			protected function cbRemotes_changeHandler(event:IndexChangeEvent):void 	{
				viewHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
				GitCommonPlugin.getInstance().service.getBranches(RemoteConfig(cbRemotes.selectedItem).uri, this, getRemoteBranchesCallbackHandler);
			}
			
			private function getRemoteBranchesCallbackHandler(result:ArrayCollection):void {
				viewHost.hideSpinner();
				if (result != null) {
					cbRemoteBranches.dataProvider = result[0];
				} else {
					cbRemoteBranches.dataProvider = null;
				}
			}
			
			protected override function finishClickHandler():void {
				if (node.pathFragment.type == GitCommonPlugin.NODE_TYPE_REMOTE_BRANCHES) {
					if (cbRemotes.selectedItem == null || cbRemoteBranches.selectedItem == null) {
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
							.setTitle(CommonPlugin.getInstance().getMessage("error"))
							.setText("Set the upstream branch configuration!")
							.showMessageBox();
						return;
					}
				}
				viewHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.processing"));
				GitCommonPlugin.getInstance().service.checkout(node, brName.text, GitRef(cbRemoteBranches.selectedItem), RemoteConfig(cbRemotes.selectedItem), cbRebase.selected, null, null);
				super.finishClickHandler();
			}
						
			private function getIndexForState(stateName:String):int {
				if (stateName == "checkoutPage") {
					return 0;
				}
				return 1;
			}
		]]>
	</fx:Script>
	
	<popup:states>				
		<mx:State name="checkoutPage">			
			<mx:SetProperty name="wizardTitle" value="{GitCommonPlugin.getInstance().getMessage('git.checkoutBranch.title')}"/>
			<mx:SetProperty name="wizardDescription" value="{GitCommonPlugin.getInstance().getMessage('git.checkoutBranch.description')}"/>
			
			<mx:SetProperty target="{finish}" name="enabled" value="{brName.text != ''}"/>
			<mx:SetProperty target="{next}" name="visible" value="false"/>
			<mx:SetProperty target="{back}" name="visible" value="false"/>
			
			<mx:AddChild relativeTo="{contentArea}">							
					<s:VGroup width="100%" height="100%" horizontalAlign="center">						
						<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
							<s:Label text="{GitCommonPlugin.getInstance().getMessage('git.checkoutBranch.branch.label')}" />
							<s:TextInput id="brName" width="100%"/>													
						</s:HGroup>		
						<s:VGroup width="100%" id="upstreamPanel" >
							<s:HGroup id="remoteArea" width="100%" verticalAlign="middle" horizontalAlign="center">
								<s:creationComplete>
									<![CDATA[
										if (FlexUtilGlobals.getInstance().isMobile) {
											cbRemotes = new com.flextras.mobile.dropDownList.DropDownList();										
										} else {
											cbRemotes = new spark.components.DropDownList();											
										}
										cbRemotes.labelField = "name";
										cbRemotes.percentWidth = 100;
										cbRemotes.addEventListener(IndexChangeEvent.CHANGE, cbRemotes_changeHandler);
										remoteArea.addElement(cbRemotes);
									]]>
								</s:creationComplete>
								<s:Label text="{GitCommonPlugin.getInstance().getMessage('git.checkoutBranch.remote.label')}"/>								
							</s:HGroup>
							<s:HGroup id="branchArea" width="100%" verticalAlign="middle" horizontalAlign="center">
								<s:creationComplete>
									<![CDATA[
										if (FlexUtilGlobals.getInstance().isMobile) {									
											cbRemoteBranches = new com.flextras.mobile.dropDownList.DropDownList();
										} else {									
											cbRemoteBranches = new spark.components.DropDownList();		
										}
										
										cbRemoteBranches.labelField = "name";
										cbRemoteBranches.percentWidth = 100;	
										branchArea.addElement(cbRemoteBranches);
									]]>
								</s:creationComplete>
								<s:Label text="{GitCommonPlugin.getInstance().getMessage('git.checkoutBranch.upstream.label')}"/>								
							</s:HGroup>
							<s:CheckBox id="cbRebase" label="{GitCommonPlugin.getInstance().getMessage('git.configBranch.rebase')}" />
						</s:VGroup>
					</s:VGroup>							
			</mx:AddChild>
		</mx:State>	
	</popup:states>
	
</popup:Wizard>