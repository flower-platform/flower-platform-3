<?xml version="1.0" encoding="utf-8"?>
<!--
@author Cristina Constantinescu
-->
<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" 
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*" >
	
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import mx.graphics.BitmapScaleMode;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.git.common.GitCommonPlugin;
			import org.flowerplatform.web.git.common.remote.dto.CommitPageDto;
			import org.flowerplatform.web.git.common.remote.dto.CommitResourceDto;
			
			public var selectedNodes:ArrayList;
			
			/**
			 * @flowerModelElementId _n-NGAHH-EeK0WoOyJtfqdw
			 */
			public var dto:CommitPageDto;
			
			/**
			 * @flowerModelElementId _Di9JkHIBEeK0WoOyJtfqdw
			 */
			[Bindable]
			public var commitResources:ArrayCollection;
			
			override public function set popupHost(value:IPopupHost):void {
				super.popupHost = value;
				popupHost.setLabel(GitCommonPlugin.getInstance().getMessage('git.action.commit.label'));
				popupHost.setIcon(GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/commit.gif'));
			}
		
			/**
			 * @flowerModelElementId _QCWJ0HH-EeK0WoOyJtfqdw
			 */
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				
				wizardImage.source = GitCommonPlugin.getInstance().getResourceUrl("images/newconnect_wizban.png");
				
//				popupHost.showSpinner(CommonPlugin.getInstance().getMessage('spinner.gettingData'));
				// get data from server to populate current page
				GitCommonPlugin.getInstance().service.getCommitData(selectedNodes, this, getCommitDataCallbackHandler);				
			}
						
			private function getCommitDataCallbackHandler(result:CommitPageDto):void {
//				popupHost.hideSpinner();
				if (result != null) {
					dto = result;
					commitResources = dto.commitResources;
					
					authorName.text = dto.author;
					committerName.text = dto.committer;
					commitMessage.text = dto.message;
				} else {
					super.removePopup();
				}				
			}
			
			protected function showUntackedClickHandler(event:MouseEvent):void {
				commitResources.refresh();
			}
						
			protected function selectAllClickHandler(event:MouseEvent):void {
				for each (var res:CommitResourceDto in commitResources) {
					res.setSelected(true);
				}
				commitResources.refresh();
			}
			
			protected function unselectAllClickHandler(event:MouseEvent):void {
				for each (var res:CommitResourceDto in commitResources) {
					res.setSelected(false);
				}
				commitResources.refresh();
			}	
				
			private function getFiles():ArrayCollection {
				var files:ArrayCollection = new ArrayCollection();
				for each (var res:CommitResourceDto in commitResources) {
					if (res.getSelected()) {
						files.addItem(res);
					}
				}
				return files;
			}

			/**
			 * @flowerModelElementId _r2db4HH8EeK0WoOyJtfqdw
			 */
			protected override function finishClickHandler():void {	
				// validate form
				if (Validator.validateAll(validators).length > 0) {
					return;
				}
				popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.processing"));
				GitCommonPlugin.getInstance().service.commit(
					dto.repository, getFiles(), authorName.text, committerName.text, commitMessage.text, amendCommit.selected, 
					this, commitCallbackHandler);	
			}	
			
			private function commitCallbackHandler(value:Boolean):void {
				popupHost.hideSpinner();
				if (value) {
					GitCommonPlugin.getInstance().service.pushToUpstream(dto.repository);
					super.finishClickHandler();
				}
			}
		]]>
	</fx:Script>
	
	<fx:Array id="validators">
		<mx:StringValidator source="{commitMessage}" property="text" minLength="1"/>
		<mx:StringValidator source="{authorName}" property="text" minLength="1"/>
		<mx:StringValidator source="{committerName}" property="text" minLength="1"/>		
		<mx:RegExpValidator source="{authorName}" property="text" expression="^(.+) [&lt;](.+)[&gt;]$" />		
		<mx:RegExpValidator source="{committerName}" property="text" expression="^(.+) [&lt;](.+)[&gt;]$" />
	</fx:Array>
	
	<popup:states>				
		<mx:State name="0">			
			<mx:SetProperty name="wizardTitle" value="{GitCommonPlugin.getInstance().getMessage('git.commitPage.title')}"/>
			<mx:SetProperty target="{finish}" name="enabled" value="{commitMessage.text != ''}"/>
			<mx:SetProperty target="{next}" name="visible" value="false"/>
			<mx:SetProperty target="{back}" name="visible" value="false"/>
			
			<mx:AddChild relativeTo="{contentArea}">									
				<s:VGroup width="100%" height="100%" gap="3">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="{GitCommonPlugin.getInstance().getMessage('git.commitPage.message')}"  width="100%"/>							
							<s:CheckBox id="amendCommit" label="Amend" />								
						</s:HGroup>						
						<s:TextArea id="commitMessage" width="100%" height="20%" minHeight="10"/>
								
						<s:HGroup width="100%" verticalAlign="middle">
							<s:VGroup width="100%" verticalAlign="middle">
								<s:FormItem label="{GitCommonPlugin.getInstance().getMessage('git.commitPage.author')}" width="100%" >
									<s:TextInput id="authorName" width="100%" />	
								</s:FormItem>
								<s:FormItem label="{GitCommonPlugin.getInstance().getMessage('git.commitPage.committer')}" width="100%" >
									<s:TextInput id="committerName" width="100%"/>	
								</s:FormItem>								
							</s:VGroup>							
							<!--util:HintButton id="hintButton" toolTip="{GitCommonPlugin.getInstance().getMessage('git.commit.author.tooltip')}"/-->
						</s:HGroup>					
						
						<s:HGroup width="100%" gap="2" verticalAlign="middle">
							<s:Label text="{GitCommonPlugin.getInstance().getMessage('git.commitPage.files')}" width="100%" />							
							<s:Button click="selectAllClickHandler(event)" width="22" height="22"
														  toolTip="{CommonPlugin.getInstance().getMessage('select.all')}"
														  icon="{GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/check_all.gif')}" />
								
							<s:Button click="unselectAllClickHandler(event)" width="22" height="22"
														  toolTip="{CommonPlugin.getInstance().getMessage('deselect.all')}" 
														  icon="{GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/uncheck_all.gif')}" />														
						</s:HGroup>		
						
						<s:List width="100%" height="80%" dataProvider="{commitResources}" id="list" minHeight="30">			
							<s:itemRenderer>
								<fx:Component>
									<s:ItemRenderer>									
										<fx:Script>
											<![CDATA[
												import org.flowerplatform.flexutil.FlexUtilGlobals;
												import org.flowerplatform.web.git.common.GitCommonPlugin;
												import org.flowerplatform.web.git.common.remote.dto.CommitResourceDto;												
											]]>
										</fx:Script>
										<s:HGroup gap="5" horizontalAlign="center" verticalAlign="middle" paddingLeft="5">
											<s:CheckBox id="cbSelected" click="{CommitResourceDto(data).setSelected(!CommitResourceDto(data).getSelected())}" selected="{CommitResourceDto(data).getSelected()}" />
											<s:BitmapImage id="image"  source="{FlexUtilGlobals.getInstance().createAbsoluteUrl(GitCommonPlugin.getInstance().getResourceUrl(CommitResourceDto(data).image))}"/>			                    
											<s:Label id="nameTxt" text="{data.label}" width="100%"/>									
										</s:HGroup>
									</s:ItemRenderer>	
								</fx:Component>
							</s:itemRenderer>
						</s:List>
					</s:VGroup>		 
					
			</mx:AddChild>
		</mx:State>		
	</popup:states>
</popup:Wizard>