<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
@author Cristina Constantinescu
-->
<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" 
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*" 
			 >
	
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import mx.collections.ArrayCollection;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.tree.remote.GenericTreeStatefulClient;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			import org.flowerplatform.web.git.common.BranchTreeStatefulClient;
			import org.flowerplatform.web.git.common.GitCommonPlugin;
			import org.flowerplatform.web.git.common.remote.dto.GitActionDto;
			
			[Bindable]
			public var dto:GitActionDto;
			
			override public function set viewHost(value:IViewHost):void {
				super.viewHost = value;
				viewHost.setLabel(GitCommonPlugin.getInstance().getMessage('git.rebase'));
				viewHost.setIcon(GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/rebase.gif'));
			}
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				wizardImage.source = GitCommonPlugin.getInstance().getResourceUrl("images/newconnect_wizban.png");
				
				var statefulClient:GenericTreeStatefulClient = new BranchTreeStatefulClient();
				// without tags
				statefulClient.context[BranchTreeStatefulClient.NODE_TYPE_FILTER_KEY] = 
					new ArrayCollection([GitCommonPlugin.NODE_TYPE_LOCAL_BRANCHES, GitCommonPlugin.NODE_TYPE_REMOTE_BRANCHES]);
				
				branchPage.tree.statefulClient = statefulClient;				
				statefulClient.treeList = branchPage.tree;
				
				CommunicationPlugin.getInstance().statefulClientRegistry.register(statefulClient, null);
				
				viewHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
				branchPage.tree.statefulClient.openNode(dto.repositoryNode, this, getData_callbackHandler);
			}
			
			private function getData_callbackHandler(value:Object):void {
				viewHost.hideSpinner();
			}
			
			protected override function finishClickHandler():void {	
				var branch:String = branchPage.getSelectedBranch();
				if (branch == null) {
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setTitle(CommonPlugin.getInstance().getMessage("error"))
						.setText(GitCommonPlugin.getInstance().getMessage("git.merge.selectRef"))
						.showMessageBox();				
					return;
				}
				GitCommonPlugin.getInstance().service.rebase(dto.repository, branch, null, null);
				super.finishClickHandler();	
			}
						
			protected override function removePopup():void {	
				CommunicationPlugin.getInstance().statefulClientRegistry.unregister(branchPage.tree.statefulClient, null);
				super.removePopup();
			}
			
		]]>
	</fx:Script>
	
	<popup:states>				
		<mx:State name="0">			
			<mx:SetProperty name="wizardTitle" value="{GitCommonPlugin.getInstance().getMessage('git.rebase.subTitle')}"/>
			<mx:SetProperty name="wizardDescription" value="{GitCommonPlugin.getInstance().getMessage('git.rebase.description', [dto.branch])}"/>
			<mx:SetProperty target="{finish}" name="label" value="{GitCommonPlugin.getInstance().getMessage('git.rebase')}"/>
			<mx:SetProperty target="{next}" name="visible" value="false"/>
			<mx:SetProperty target="{back}" name="visible" value="false"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<component:BranchSelectionPage id="branchPage" width="100%" height="100%" minHeight="100"/>			
			</mx:AddChild>
		</mx:State>		
	</popup:states>
	
</popup:Wizard>