<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
@author Cristina Constantinescu
-->
<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" 
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  
			  getIndexForStateFunction="getIndexForState" 
			  			  
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*" 
			  xmlns:common="com.crispico.flower.flexdiagram.util.common.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.flexutil.text.TextUtils;
			import org.flowerplatform.web.git.common.GitCommonPlugin;
			import org.flowerplatform.web.git.common.remote.dto.GitRef;
			
			public var selectedNode:TreeNode;
			
			private var allBranches:ArrayCollection;
			
			[Bindable]
			private var branches:ArrayCollection = new ArrayCollection(); /* of GitRef */
			
			private var head:GitRef;
			
			[Bindable]
			private var defaultRemoteName:String = "origin";
			
			override protected function creationCompleteHandler():void {
				super.creationCompleteHandler();		
				wizardImage.source = GitCommonPlugin.getInstance().getResourceUrl("images/import_wiz.png");
				if (!FlexUtilGlobals.getInstance().isMobile) {
					desktopTitleArea.height = 80;
				}
				allBranches = new ArrayCollection();
				//it doesn't work by simply apply focus
				callLater(repositorySelectionPage.uri.setFocus);
			}	
			
			/**
			 * @flowerModelElementId _gvgoEDVgEeKsnMbt6YrXWQ
			 */
			protected override function nextClickHandler():void {
				if (currentState == "repositoryURIPage") {
					popupHost.showSpinner(GitCommonPlugin.getInstance().getMessage("git.cloneWizard.validate.spinner"));
					GitCommonPlugin.getInstance().service.
						validateRepositoryURL(selectedNode, repositorySelectionPage.getURI(), this, validateRepositoryCallbackHandler);					
				} else if (currentState == "branchesPage") {
					var selectedBranches:ArrayCollection = getSelectedBranches();
					// at least one branch must be selected in order to move further
					if (allBranches.length > 0 && selectedBranches.length == 0) {
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
							.setTitle(CommonPlugin.getInstance().getMessage("error"))
							.setText(GitCommonPlugin.getInstance().getMessage("git.cloneWizard.noBranchSelected.error"))
							.showMessageBox();
					} else {
						super.nextClickHandler();						
					}
				}
			}
			
			/**
			 * @flowerModelElementId _mCRiMDVgEeKsnMbt6YrXWQ
			 */
			private function validateRepositoryCallbackHandler(value:int):void {
				popupHost.hideSpinner();			
				switch (value) {
					case 1:
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setTitle(CommonPlugin.getInstance().getMessage("error"))
						.setText(GitCommonPlugin.getInstance().getMessage("git.cloneWizard.repoExists.error"))
						.setWidth(200)
						.setHeight(200)
						.showMessageBox();
						break;
					case 0:
						popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
						GitCommonPlugin.getInstance().service.
						getBranches(repositorySelectionPage.getURI(), this, getBranchesCallbackHandler);
				}				
			}
			
			private function getBranchesCallbackHandler(data:ArrayCollection):void {
				super.nextClickHandler();
				
				if (data != null) {
					allBranches = ArrayCollection(data[0]);					
					head = GitRef(data[1]);					
				} else {
					allBranches.removeAll();
					head = null;					
				}
				allBranches.refresh();
				
				applyFilterHandler();
				
				popupHost.hideSpinner();
			}
			
			private function getSelectedBranches(onlyName:Boolean = false):ArrayCollection {
				var list:ArrayCollection = new ArrayCollection();
				for each (var branch:GitRef in branches) {
					if (branch.getSelected()) {
						list.addItem(onlyName ? branch.name : branch);
					}
				}
				return list;
			}
			
			protected function applyFilterHandler():void {
				branches.removeAll();
				for each (var branch:GitRef in allBranches) {
					if (filter.text == GitCommonPlugin.getInstance().getMessage('git.cloneWizard.branch.filter')) {
						branches.addItem(branch);
					} else if (branch.shortName.toLowerCase().match(filter.text.toLowerCase())) {
						branches.addItem(branch);
					}
				}
				branches.refresh();
			}
			
			/**
			 * @flowerModelElementId _0LbYwDVhEeKsnMbt6YrXWQ
			 */
			protected override function finishClickHandler():void {
				//popupHost.showSpinner(GitCommonPlugin.getInstance().getMessage("git.cloneWizard.cloneRepo.spinner"));
				var selectedBranches:ArrayCollection = getSelectedBranches(true);				
				GitCommonPlugin.getInstance().service.
					cloneRepository(selectedNode,
						repositorySelectionPage.getURI(),
						selectedBranches,
						remoteName != null ? remoteName.text : defaultRemoteName,
						allBranches.length == 0 || selectedBranches.length == allBranches.length,
						null, null);
				super.finishClickHandler();
			}
						
			override public function set popupHost(value:IPopupHost):void {
				super.popupHost = value;
				popupHost.setLabel(GitCommonPlugin.getInstance().getMessage('git.action.cloneRepo.label'));
				popupHost.setIcon(GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/cloneGit.gif'));
			}
			
			private function getIndexForState(stateName:String):int {
				if (stateName == "repositoryURIPage") {
					return 0;
				}
				return 1;
			}
			
		]]>
	</fx:Script>
	
	<popup:states>				
		<mx:State name="repositoryURIPage">			
			<mx:SetProperty name="wizardTitle" value="{GitCommonPlugin.getInstance().getMessage('git.repoSelection.title')}"/>					
			<mx:SetProperty name="wizardDescription" value="{GitCommonPlugin.getInstance().getMessage('git.repoSelection.description')}"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<component:RepositorySelectionPage id="repositorySelectionPage" width="100%" height="100%" />	
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="branchesPage" >			
			<mx:SetProperty name="wizardTitle" value="{GitCommonPlugin.getInstance().getMessage('git.cloneWizard.cloneConfig.title')}"/>					
			<mx:SetProperty name="wizardDescription" value="{GitCommonPlugin.getInstance().getMessage('git.cloneWizard.branch.description')}"/>			
			
			<mx:AddChild relativeTo="{contentArea}">
				<s:VGroup width="100%" height="100%" >
					<!--s:Label text="{GitCommonPlugin.getInstance().getMessage('git.cloneWizard.branch.branchOf', [repositorySelectionPage.getURI()])}"/-->
					<s:TextInput id="filter" width="100%" 
								  change="applyFilterHandler()"
								 creationComplete="{TextUtils.setTextComponentHint(filter, GitCommonPlugin.getInstance().getMessage('git.cloneWizard.branch.filter'));}"/>
					
					<s:List id="listBranches" width="100%" height="100" dataProvider="{branches}" verticalScrollPolicy="auto"  >
						<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer>
									<fx:Script>
										<![CDATA[																			
											import org.flowerplatform.flexutil.FlexUtilGlobals;
											import org.flowerplatform.web.git.common.GitCommonPlugin;
											import org.flowerplatform.web.git.common.remote.dto.GitRef;		
										]]>
									</fx:Script>
									
									<s:HGroup verticalAlign="middle" paddingLeft="5" gap="5">
										<s:CheckBox click="{GitRef(data).setSelected(!GitRef(data).getSelected())}" selected="{GitRef(data).getSelected()}" />									
										<s:BitmapImage id="image" source="{FlexUtilGlobals.getInstance().createAbsoluteUrl(GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/branch_obj.gif'))}"/>	
										<s:Label text="{data.shortName}" />
									</s:HGroup>									
								</s:ItemRenderer>					
							</fx:Component>
						</s:itemRenderer>
					</s:List>
					<s:HGroup paddingTop="10" width="100%" verticalAlign="middle">
						<s:Label text="{GitCommonPlugin.getInstance().getMessage('git.cloneWizard.cloneConfig.remoteName')}"/>
						<s:TextInput id="remoteName" width="100%" text="{defaultRemoteName}" />
					</s:HGroup>
				</s:VGroup>
			</mx:AddChild>
		</mx:State>		
	</popup:states>
	
</popup:Wizard>