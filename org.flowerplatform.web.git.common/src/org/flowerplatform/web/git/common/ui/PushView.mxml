<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
@author Cristina Constantinescu
-->
<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" 
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*" 
			  getIndexForStateFunction="getIndexForState">
	
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import org.flowerplatform.web.git.common.GitCommonPlugin;
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.git.common.remote.dto.ConfigFetchPushPageDto;
			import org.flowerplatform.web.git.common.remote.dto.RemoteConfig;
			
			public var node:TreeNode;
			
			[Bindable]
			private var remoteConfig:RemoteConfig;
			
			override public function set popupHost(value:IPopupHost):void {
				super.popupHost = value;
				popupHost.setLabel(GitCommonPlugin.getInstance().getMessage('git.action.push.label'));
				popupHost.setIcon(GitCommonPlugin.getInstance().getResourceUrl('images/full/obj16/push.gif'));
			}
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				
				popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
				GitCommonPlugin.getInstance().service.
					getFetchPushConfigData(node, false, this, getFetchDataCallbackHandler);
			}
			
			private function getFetchDataCallbackHandler(data:ConfigFetchPushPageDto):void {
				popupHost.hideSpinner();
				if (data == null) {
					removePopup();
				} else {
					repoSelectionPage.remotes.dataProvider = data.remoteConfigs;
					repoSelectionPage.remotes.selectedIndex = 0;
				}
			}
			
			protected override function nextClickHandler():void {
				super.nextClickHandler();				
				if (repoSelectionPage.group.selection == repoSelectionPage.remoteConfig) {					
					refSpecPage.refMappings = repoSelectionPage.getRemoteConfig().pushMappings;
					remoteConfig = repoSelectionPage.getRemoteConfig();					
				} else {						
					refSpecPage.refMappings.removeAll();											
				}					
			}
			
			/**
			 * 
			 */
			protected override function finishClickHandler():void {				
				var pushConfig:RemoteConfig = new RemoteConfig();
				pushConfig.name = remoteConfig.name;
				pushConfig.uri = remoteConfig.uri;
				if (currentState == "pushRemotePage") {
					if (repoSelectionPage.group.selection == repoSelectionPage.customUri) {
						if (repoSelectionPage.getURI().length == 0) {
							FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
								.setTitle(CommonPlugin.getInstance().getMessage("error"))
								.setText(GitCommonPlugin.getInstance().getMessage("git.createRemoteWizard.pushUriIsEmpty"))
								.showMessageBox();							
							return;
						}
						pushConfig.uri = repoSelectionPage.getURI();
						
					} else {
						pushConfig = repoSelectionPage.getRemoteConfig();
					}
				} else {					
					pushConfig.pushMappings = refSpecPage.getRefMappings();
				}
				
				popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.processing"));				
				GitCommonPlugin.getInstance().service.push(node, pushConfig, this, pushCallbackHandler);
				super.finishClickHandler();
			}
			
			private function pushCallbackHandler(value:Boolean):void {
				popupHost.hideSpinner();			
			}
			
			private function getIndexForState(stateName:String):int {
				if (stateName == "pushRemotePage") {
					return 0;
				}
				return 1;
			}
		]]>
	</fx:Script>
	
	<popup:states>				
		<mx:State name="pushRemotePage">			
			<mx:SetProperty name="wizardTitle" value="{GitCommonPlugin.getInstance().getMessage('git.repoSelection.title')}"/>					
			<mx:SetProperty name="wizardDescription" value="{GitCommonPlugin.getInstance().getMessage('git.repoSelection.description')}"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<component:RepositorySelectionPage id="repoSelectionPage" width="100%" height="100%" 
													selectConfiguredRemotes="true" isFetchConfig="false"/>	
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="pushRefspecPage">			
			<mx:SetProperty name="wizardTitle" value="{GitCommonPlugin.getInstance().getMessage('git.pushSpecPage.title')}"/>					
			<mx:SetProperty name="wizardDescription" value="{GitCommonPlugin.getInstance().getMessage('git.pushSpecPage.subtitle', [remoteConfig.name])}"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<component:RefSpecPage id="refSpecPage" width="100%" height="100%"/>	
			</mx:AddChild>			
		</mx:State>
		
	</popup:states>
</popup:Wizard>