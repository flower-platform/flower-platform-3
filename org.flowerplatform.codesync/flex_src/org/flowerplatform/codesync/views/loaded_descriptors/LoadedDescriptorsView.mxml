<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--

Displays all the loaded codeSyncElementDescriptors in a list

@author Mircea Negreanu

-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, org.flowerplatform.flexutil.selection.ISelectionProvider, org.flowerplatform.flexutil.selection.ISelectionForServerProvider"
		 creationComplete="view_creationCompleteHandler(event)"
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.codesync.CodeSyncPlugin;
			import org.flowerplatform.codesync.properties.remote.StringSelectedItem;
			import org.flowerplatform.codesync.remote.CodeSyncElementDescriptor;
			import org.flowerplatform.codesync.remote.RelationDescriptor;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.ClassFactoryActionProvider;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			import org.flowerplatform.properties.action.ShowPropertiesAction;
			
			import spark.events.IndexChangeEvent;
	
			private var _viewHost:IViewHost;
			
			/**
			 * TEMPORARY 
			 * static variable to be notified when descriptors are loaded
			 */
			public static var descriptorsView:LoadedDescriptorsView = null;
			
			/**
			 * Properties menu action
			 */
			protected var actionProvider:ClassFactoryActionProvider = new ClassFactoryActionProvider()
				.addActionClass(ShowPropertiesAction);
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return actionProvider.getActions(selection);
			}
			
			/**
			 * This method is inspired from <code>get selectedItems()</code>. We convert
			 * the selection like this (and not by converting selectedItems), because
			 * <code>get selectedItems()</code> does an iteration as well; so that would
			 * mean 2 iterations. This way, we iterate only once.
			 */
			public function getSelection():IList {
				var result:Array = new Array();
				
				if (list.selectedIndices) {
					var count:int = list.selectedIndices.length;
					
					for (var i:int = 0; i < count; i++)
						result.push(list.dataProvider.getItemAt(list.selectedIndices[i]));  
				}
				
				return new ArrayList(result);
			}
			
			protected function selectionChangeHandler(event:IndexChangeEvent):void {
				// force focus on the list, so that the viewHost catches it and
				// sets the activeViewContent accordingly
				if (focusManager.getFocus() != list) {
					focusManager.setFocus(list);
				}

				FlexUtilGlobals.getInstance().selectionManager.selectionChanged(viewHost, this);
			}

			/**
			 * Convert selection to a list of StringSelectedItem (that are simpler)
			 */
			public function convertSelectionToSelectionForServer(selection:IList):IList {
				if (selection == null) {
					return selection;
				}
				
				var selectedItems:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < selection.length; i++) {
					var item:Object = selection.getItemAt(i);
					
					if (item is CodeSyncElementDescriptor) {
						selectedItems.addItem(new StringSelectedItem(CodeSyncElementDescriptor(item).codeSyncType));
					} else if (item is RelationDescriptor) {
						selectedItems.addItem(new StringSelectedItem(RelationDescriptor(item).type, true));
					}
				}
				return selectedItems;
			}
			
			/**
			 * When the button is clicked, ask the server to regenerate the descriptors
			 */
			protected function regenerateButton_clickHandler(event:MouseEvent):void {
				var command:InvokeServiceMethodServerCommand = new InvokeServiceMethodServerCommand("codeSyncOperationsService", "regenerateDescriptors", null, this, regenerate_callback);
				CommunicationPlugin.getInstance().bridge.sendObject(command);
			}
			
			protected function regenerate_callback(result:String):void {
				// TEMPORARY
				// set the global variable to be notified when the descriptors are loaded
				descriptorsView = this;
				
				// now reload descriptors on the flex side
				CodeSyncPlugin.getInstance().loadDescriptorsFromServer();
				
				// show the resulting message
				if (result != null && result.length > 0) {
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setText(result)
						.setTitle(CodeSyncPlugin.getInstance().getMessage("loadDesc.view.regenerateResults"))
						.setWidth(350)
						.setHeight(300)
						.showMessageBox();
				} else {
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setText(CodeSyncPlugin.getInstance().getMessage("loadDesc.view.regenerateNoError"))
						.setTitle(CodeSyncPlugin.getInstance().getMessage("loadDesc.view.regenerateResults"))
						.setWidth(250)
						.setHeight(200)
						.showMessageBox();
				}
			}
			
			/**
			 * On creation complete set the dataProvider on the list
			 */
			protected function view_creationCompleteHandler(event:FlexEvent):void {
				list.dataProvider = generateListDataProvider();
			}
			
			protected function generateListDataProvider():ArrayCollection {
				var dataProvider:ArrayCollection = new ArrayCollection();
				
				dataProvider.addAll(CodeSyncPlugin.getInstance().getCodeSyncElementDescriptors());
				dataProvider.addAll(CodeSyncPlugin.getInstance().getRelationDescriptors());
				return dataProvider;
			}
			
			/**
			 * TEMPORARY
			 * TODO: TO be deleted
			 * Notification that the descriptors have been loaded from the server
			 */
			public function notificationDescriptorsLoaded():void {
				list.dataProvider = generateListDataProvider();
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout verticalAlign="middle"/>
	</s:layout>

	<s:Button id="regenerateButton"
		label="{CodeSyncPlugin.getInstance().getMessage('loadDesc.view.regenerate')}"
		click="regenerateButton_clickHandler(event)"/>
	
	<s:List id="list"
		width="100%" height="100%"
		change="selectionChangeHandler(event)"
		/>
</s:Group>
