<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!-- 
@author Cristina Constantinescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, org.flowerplatform.flexutil.selection.ISelectionProvider" 
		 xmlns:tree="org.flowerplatform.flexutil.tree.*"
		 creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.layout.Workbench;
			import com.crispico.flower.util.layout.WorkbenchViewHost;
			import com.crispico.flower.util.layout.event.ViewAddedEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.codesync.CodeSyncPlugin;
			import org.flowerplatform.codesync.wizard.WizardEvent;
			import org.flowerplatform.codesync.wizard.action.AddWizardElementAction;
			import org.flowerplatform.codesync.wizard.action.DragWizardElementOnDiagramAction;
			import org.flowerplatform.codesync.wizard.action.RefreshWizardElementsAction;
			import org.flowerplatform.codesync.wizard.action.RemoveWizardElementAction;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.TreeNodeHierarchicalModelAdapter;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.editor.model.DiagramEditorFrontend;
			import org.flowerplatform.editor.model.remote.NotationDiagramEditorStatefulClient;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.ViewLayoutData;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.tree.HierarchicalModelWrapper;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			import spark.events.IndexChangeEvent;
			
			protected var _viewHost:IViewHost;
			
			public function getActions(selection:IList):Vector.<IAction> {
				var result:Vector.<IAction> = new Vector.<IAction>();
				result.push(new AddWizardElementAction(this));		
				result.push(new AddWizardElementAction(this, true));	
				result.push(new RemoveWizardElementAction());
				result.push(new RefreshWizardElementsAction(this));
				result.push(new DragWizardElementOnDiagramAction(this));
				return result;
			}
			
			public function getSelection():IList {
				var array:ArrayList = new ArrayList();
				for (var i:int = 0; i < tree.selectedItems.length; i++) {
					array.addItem(tree.selectedItems[i]);
				}
				return array;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				if (_viewHost != null) {
					DisplayObject(_viewHost).removeEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
					DisplayObject(_viewHost).removeEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
				}
				
				_viewHost = viewHost;
				
				DisplayObject(_viewHost).addEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
				DisplayObject(_viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
			}
			
			private function viewAddedHandler(event:ViewAddedEvent):void {
				// show actions in buttonBar
				_viewHost.selectionChanged();
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
			}
			
			public function refreshHandler(result:Object = null):void {
				var statefulClient:NotationDiagramEditorStatefulClient = CodeSyncPlugin.getInstance().wizardUtils.getSelectedEditorStatefulClient();
				if (CodeSyncPlugin.getInstance().wizardUtils.isSelectedEditorStatefulClientValid(statefulClient)) {
					statefulClient.service_getWizardElements(this, getWizardElementsCallbackHandler);		
				} else {
					TreeNode(tree.rootNode).children.removeAll();
					tree.refreshLinearizedDataProvider();	
				}					
			}
			
			private function getWizardElementsCallbackHandler(result:ArrayCollection):void {
				if (result != null) {
					// get old selected ids from tree
					var oldSelectedIds:ArrayCollection = new ArrayCollection();
					for each (var selected:Object in tree.selectedItems) {		
						oldSelectedIds.addItem(TreeNode(HierarchicalModelWrapper(selected).treeNode).pathFragment.name);						
					}			
					
					TreeNode(tree.rootNode).children = result;		
					tree.refreshLinearizedDataProvider();
					tree.validateProperties(); // this will commit also the selection -> no selection
					
					if (oldSelectedIds.length > 0 && tree.dataProvider.length > 0) {
						// get new selected items
						var vector:Vector.<int> = new Vector.<int>();
						for (var i:int=0; i < tree.dataProvider.length; i++) {							
							if (oldSelectedIds.contains(TreeNode(HierarchicalModelWrapper(tree.dataProvider.getItemAt(i)).treeNode).pathFragment.name)) {
								vector.push(i);
								break;
							}
						}
						// set new selection
						tree.selectedIndices = vector;
						tree.validateProperties(); // this will commit the selection						
					}								
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				var root:TreeNode = new TreeNode();
				root.children = new ArrayCollection();
				tree.rootNode = root;
			}
			
			protected function tree_changeHandler(e:Event):void {
				if (tree.selectedItems != null && tree.selectedItems.length > 0) {
					CodeSyncPlugin.getInstance().wizardUtils.selectedWizardElement = 
						TreeNode(HierarchicalModelWrapper(tree.selectedItems[0]).treeNode);
				} else {
					CodeSyncPlugin.getInstance().wizardUtils.selectedWizardElement = null;
				}
			
				var statefulClient:NotationDiagramEditorStatefulClient = CodeSyncPlugin.getInstance().wizardUtils.getSelectedEditorStatefulClient();
				if (CodeSyncPlugin.getInstance().wizardUtils.isSelectedEditorStatefulClientValid(statefulClient)) {	
					var array:ArrayCollection = new ArrayCollection();
					var selectedItems:IList = getSelection();
					for (var i:int = 0; i < selectedItems.length; i++) {
						var node:TreeNode = TreeNode(HierarchicalModelWrapper(selectedItems.getItemAt(i)).treeNode);
						array.addItem(node.getPathForNode(true));				
					}					
					statefulClient.service_selectWizardElementsFromDiagram(array);		
				}
								
				e.stopImmediatePropagation();
			}
			
		]]>
	</fx:Script>
	<tree:TreeList id="tree" width="100%" height="100%"
				   hierarchicalModelAdapter="{new TreeNodeHierarchicalModelAdapter()}"
				   itemRenderer="org.flowerplatform.communication.tree.GenericTreeItemRenderer"
				   valueCommit="tree_changeHandler(event)"
				   allowMultipleSelection="true"/>		
</s:Group>
