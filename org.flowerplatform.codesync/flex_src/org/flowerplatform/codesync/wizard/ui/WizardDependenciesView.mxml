<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!-- 
@author Cristina Constantinescu
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, org.flowerplatform.flexutil.selection.ISelectionProvider, org.flowerplatform.properties.IPropertiesProvider">
		 
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.layout.event.ViewAddedEvent;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.FlexGlobals;
			
			import org.flowerplatform.codesync.CodeSyncPlugin;
			import org.flowerplatform.codesync.wizard.WizardEvent;
			import org.flowerplatform.codesync.wizard.remote.MDADependency;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FactoryWithInitialization;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			import org.flowerplatform.properties.PropertiesPlugin;
			import org.flowerplatform.properties.property_renderer.StringWithButtonPropertyRenderer;
			import org.flowerplatform.properties.remote.Property;
			
			import spark.events.IndexChangeEvent;
			
			protected var _viewHost:IViewHost;
						
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			public function getSelection():IList {
				var array:ArrayList = new ArrayList();
				for (var i:int = 0; i < list.selectedItems.length; i++) {
					array.addItem(list.selectedItems[i]);
				}
				return array;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				if (_viewHost != null) {
					DisplayObject(_viewHost).removeEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
					DisplayObject(_viewHost).removeEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
				}
				
				_viewHost = viewHost;
				
				DisplayObject(_viewHost).addEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
				DisplayObject(_viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
			}
			
			private function viewAddedHandler(event:ViewAddedEvent):void {
				// show actions in buttonBar
				_viewHost.selectionChanged();
				
				FlexGlobals.topLevelApplication.addEventListener(WizardEvent.SELECTED_WIZARD_ELEMENT_CHANGED, selectedWizardElementChangedHandler);
				PropertiesPlugin.getInstance().propertiesProviders.addItem(this);
				
				// register PropertiesPlugin Renderer
				PropertiesPlugin.getInstance().propertyRendererClasses["LocationForWizardDependencyTargetElement"] = new FactoryWithInitialization
					(StringWithButtonPropertyRenderer, {
						clickHandler: function(itemRendererHandler:IDialogResultHandler, propertyName:String, propertyValue:Object):void {
							var dialog:LocationForWizardDependencyTargetElement = new LocationForWizardDependencyTargetElement();
							dialog.setResultHandler(itemRendererHandler);							
							dialog.currentLocationForNewElements = propertyValue;
							
							FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
							.setViewContent(dialog)						
							.setWidth(470)
							.setHeight(450)
							.show();
						},
						
						getNewPropertyValueHandler: function (dialogResult:Object):String {
							return dialogResult.location;
						}
					});
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				FlexGlobals.topLevelApplication.removeEventListener(WizardEvent.SELECTED_WIZARD_ELEMENT_CHANGED, selectedWizardElementChangedHandler);
				PropertiesPlugin.getInstance().propertiesProviders.removeItem(this);
			}
			
			private function selectedWizardElementChangedHandler(event:WizardEvent = null):void {					
				if (CodeSyncPlugin.getInstance().wizardUtils.selectedMDAElementInfo == null) {
					list.dataProvider = null;
				} else {
					refreshHandler();
				}
			}
			
			public function refreshHandler():void {
				CodeSyncPlugin.getInstance().wizardUtils.selectedEditorStatefulClient
					.service_getMDADependencies(CodeSyncPlugin.getInstance().wizardUtils.selectedMDAElementInfo, this, getMDADependenciesCallbackHandler);		
			}
			
			public function getMDADependenciesCallbackHandler(result:ArrayCollection):void {
				if (result != null) {
					list.dataProvider = result;
				}
			}
			
			public function getProperties(selection:IList):Object {
				if (selection != null && selection.length > 0 && selection.getItemAt(0) is MDADependency) {
					var dependency:MDADependency = MDADependency(selection.getItemAt(0));
					var result:Object = new Object();
					result.propertiesList = new ArrayList(dependency.properties.toArray());
					result.label = dependency.label;
					result.icon = FlexUtilGlobals.getInstance().adjustImageBeforeDisplaying(
						CodeSyncPlugin.getInstance().getResourceUrl('images/chart_line.png'));
					return result;
				}
				return null;
			}
			
			public function setPropertyValue(selection:IList, propertyName:String, propertyValue:Object):Boolean {
				if (selection != null && selection.length > 0 && selection.getItemAt(0) is MDADependency) {
					var mdaDependency:MDADependency = MDADependency(selection.getItemAt(0));
					for each (var property:Property in mdaDependency.properties) {
						if (property.name == propertyName) {
							property.value = propertyValue;
							return true;
						}
					}
				}
				return false;
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void {
				FlexUtilGlobals.getInstance().selectionManager.selectionChanged(_viewHost, this);
			}
			
		]]>
	</fx:Script>
	
	<s:RichText textFlow="{TextConverter.importToFlow(CodeSyncPlugin.getInstance().wizardUtils.selectedMDAElementInfo == null ? CodeSyncPlugin.getInstance().getMessage('wizard.selectedElement.none') : CodeSyncPlugin.getInstance().getMessage('wizard.selectedElement.info', [CodeSyncPlugin.getInstance().wizardUtils.selectedMDAElementInfo.name]), TextConverter.TEXT_FIELD_HTML_FORMAT)}" 
				width="100%" paddingLeft="5" />
	
	<s:List width="100%" height="100%" id="list" change="list_changeHandler(event)" 
			itemRenderer="org.flowerplatform.codesync.wizard.ui.WizardDependenciesListItemRenderer" />			

</s:VGroup>
