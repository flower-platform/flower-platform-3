<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!-- 
@author Cristina Constantinescu
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  implements="org.flowerplatform.flexutil.view_content_host.IViewContent, org.flowerplatform.flexutil.selection.ISelectionProvider, org.flowerplatform.flexutil.selection.ISelectionForServerProvider"
		  creationComplete="creationCompleteHandler(event)" paddingTop="10" paddingBottom="5">
	
	
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.layout.event.ViewAddedEvent;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.codesync.CodeSyncPlugin;
			import org.flowerplatform.codesync.regex.RegexEvent;
			import org.flowerplatform.codesync.regex.RegexUtils;
			import org.flowerplatform.codesync.regex.action.RunAction;
			import org.flowerplatform.codesync.regex.remote.RegexMatchDto;
			import org.flowerplatform.codesync.regex.remote.RegexSelectedItem;
			import org.flowerplatform.editor.text.CodeMirrorEditorFrontend;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			import spark.events.IndexChangeEvent;
			
			protected var _viewHost:IViewHost;
			
			[Bindable]
			public var editorFrontend:CodeMirrorEditorFrontend;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				list.itemRenderer = new ClassFactory(RegexItemRenderer);
				ClassFactory(list.itemRenderer).properties = {iconFunction: getIcon};
				list.labelFunction = function (object:Object):String {
					return RegexMatchDto(object).value + ") " + RegexMatchDto(object).parserRegex.name;
				}
				list.addEventListener(FlexEvent.VALUE_COMMIT, changeHandler);
			}
			
			private function getIcon(item:Object):Object {
				return CodeSyncPlugin.getInstance().getResourceUrl("images/regex/brick.png");
			}
						
			public function getActions(selection:IList):Vector.<IAction> {			
				var result:Vector.<IAction> = new Vector.<IAction>();
				result.push(new RunAction(this));
				return result;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				if (_viewHost != null) {
					DisplayObject(_viewHost).removeEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
					DisplayObject(_viewHost).removeEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
				}
				
				_viewHost = viewHost;
				
				DisplayObject(_viewHost).addEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
				DisplayObject(_viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
			}
			
			public function getSelection():IList {			
				var array:ArrayList = new ArrayList();
				for (var i:int = 0; i < list.selectedItems.length; i++) {
					array.addItem(list.selectedItems[i]);
				}
				return array;
			}
			
			private function viewAddedHandler(event:ViewAddedEvent):void {				
				FlexGlobals.topLevelApplication.addEventListener(RegexEvent.SELECTED_PARSER_CHANGED, selectedParserChangedHandler);
				FlexGlobals.topLevelApplication.addEventListener(RegexEvent.SELECTED_CONFIG_CHANGED, selectedConfigChangedHandler);
				
				// show actions in buttonBar
				_viewHost.selectionChanged();
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {				
				FlexGlobals.topLevelApplication.removeEventListener(RegexEvent.SELECTED_PARSER_CHANGED, selectedParserChangedHandler);
				FlexGlobals.topLevelApplication.removeEventListener(RegexEvent.SELECTED_CONFIG_CHANGED, selectedConfigChangedHandler);
			}
			
			private function selectedConfigChangedHandler(event:RegexEvent):void {
				if (list.dataProvider != null) {
					list.dataProvider.removeAll();	
				}
			}
			
			private function changeHandler(event:Event):void {			
				var array:Array = new Array(list.selectedItems.length);
				for (var i:int = 0; i < list.selectedItems.length; i++) {
					array[i] = list.selectedItems[i];
				}
				if (editorFrontend != null) {
					editorFrontend.colorText(array);
				}
				event.stopImmediatePropagation();
			}
			
			private function indexChangeHandler(e:IndexChangeEvent):void {		
				var array:Array = new Array(list.selectedItems.length);
				for (var i:int = 0; i < list.selectedItems.length; i++) {
					array[i] = list.selectedItems[i];
				}
				var event:RegexEvent = new RegexEvent(RegexEvent.SELECTED_MATCH_CHANGED);
				event.newSelectedMatches = array;
				FlexGlobals.topLevelApplication.dispatchEvent(event);
				
				FlexUtilGlobals.getInstance().selectionManager.selectionChanged(_viewHost, this);
			}
			
			private function selectedParserChangedHandler(event:RegexEvent):void {	
				// parser regex changed -> select all its matches
				var vector:Vector.<int> = new Vector.<int>();			
				for each (var match:RegexMatchDto in event.newSelectedMatches) {
					var index:int = list.dataProvider.getItemIndex(match);
					if (index != -1) {
						vector.push(index);
					}
				}
				list.selectedIndices = vector;
				if (vector.length > 0) {
					list.ensureIndexIsVisible(vector[0]);
				}			
				
				event.stopImmediatePropagation();
			}
			
			public function convertSelectionToSelectionForServer(selection:IList):IList {
				if (selection == null) {
					return selection;
				}			
				var selectedItems:ArrayCollection = new ArrayCollection();
				for each (var match:RegexMatchDto in selection.toArray()) {					
					selectedItems.addItem(new RegexSelectedItem(RegexUtils.REGEX_MATCH_TYPE, match));
				}
				
				return selectedItems;
			}
			
		]]>
	</fx:Script>
	
	<s:RichText textFlow="{TextConverter.importToFlow(CodeSyncPlugin.getInstance().regexUtils.selectedConfigMessage, TextConverter.TEXT_FIELD_HTML_FORMAT)}" 
				width="100%" paddingLeft="5"/>
	<s:RichText textFlow="{TextConverter.importToFlow(editorFrontend == null ? CodeSyncPlugin.getInstance().getMessage('regex.editor.none') : CodeSyncPlugin.getInstance().getMessage('regex.editor', [editorFrontend.editorStatefulClient.editableResourcePath]), TextConverter.TEXT_FIELD_HTML_FORMAT)}" 
				width="100%" paddingLeft="5" />
	<s:List id="list" width="100%" height="100%" change="indexChangeHandler(event)" allowMultipleSelection="true" />
	
</s:VGroup>
