<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!-- 
@author Cristina Constantinescu
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  implements="org.flowerplatform.flexutil.view_content_host.IViewContent, org.flowerplatform.flexutil.selection.ISelectionProvider, org.flowerplatform.flexutil.selection.ISelectionForServerProvider"
		  creationComplete="creationCompleteHandler(event)" paddingTop="10" paddingBottom="5">
				

	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.layout.event.ViewAddedEvent;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.codesync.CodeSyncPlugin;
			import org.flowerplatform.codesync.regex.RegexEvent;
			import org.flowerplatform.codesync.regex.RegexUtils;
			import org.flowerplatform.codesync.regex.action.AddMacroRegexAction;
			import org.flowerplatform.codesync.regex.action.RemoveMacroRegexAction;
			import org.flowerplatform.codesync.regex.remote.MacroRegexDto;
			import org.flowerplatform.codesync.regex.remote.RegexSelectedItem;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			protected var _viewHost:IViewHost;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				list.itemRenderer = new ClassFactory(RegexItemRenderer);
				ClassFactory(list.itemRenderer).properties = {iconFunction: getItemIcon};
				
				list.addEventListener(FlexEvent.VALUE_COMMIT, changeHandler);
			}
						
			private function getItemIcon(item:Object):Object {
				return CodeSyncPlugin.getInstance().getResourceUrl("images/regex/percent.png");
			}
			
			public function getActions(selection:IList):Vector.<IAction> {			
				var result:Vector.<IAction> = new Vector.<IAction>();
				result.push(new AddMacroRegexAction(this));		
				result.push(new RemoveMacroRegexAction(this));
				return result;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				if (_viewHost != null) {
					DisplayObject(_viewHost).removeEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
					DisplayObject(_viewHost).removeEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
				}
				
				_viewHost = viewHost;
				
				DisplayObject(_viewHost).addEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
				DisplayObject(_viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
			}
			
			public function getSelection():IList {			
				var array:ArrayList = new ArrayList();
				for (var i:int = 0; i < list.selectedItems.length; i++) {
					array.addItem(list.selectedItems[i]);
				}
				return array;
			}
			
			private function viewAddedHandler(event:ViewAddedEvent):void {
				// show actions in buttonBar
				_viewHost.selectionChanged();
				FlexGlobals.topLevelApplication.addEventListener(RegexEvent.SELECTED_CONFIG_CHANGED, selectedConfigChangedHandler);
				FlexGlobals.topLevelApplication.addEventListener(RegexEvent.MACROS_REQUEST_REFRESH, refreshHandler);
			}
						
			private function viewRemovedHandler(event:ViewRemovedEvent):void {			
				FlexGlobals.topLevelApplication.removeEventListener(RegexEvent.SELECTED_CONFIG_CHANGED, selectedConfigChangedHandler);
				FlexGlobals.topLevelApplication.removeEventListener(RegexEvent.MACROS_REQUEST_REFRESH, refreshHandler);
			}
			
			private function selectedConfigChangedHandler(event:RegexEvent):void {
				if (CodeSyncPlugin.getInstance().regexUtils.selectedConfig == null) {
					list.dataProvider.removeAll();
				} else {
					refreshHandler();
				}
			}
			
			public function convertSelectionToSelectionForServer(selection:IList):IList {
				if (selection == null) {
					return selection;
				}			
				var selectedItems:ArrayCollection = new ArrayCollection();
				for each (var regex:MacroRegexDto in selection.toArray()) {				
					selectedItems.addItem(new RegexSelectedItem(RegexUtils.REGEX_MACRO_TYPE, null, regex));
				}
				
				return selectedItems;
			}
					
			public function refreshHandler(event:RegexEvent = null):void {
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand(
						"regexService", 
						"getMacroRegexes", 
						[CodeSyncPlugin.getInstance().regexUtils.selectedConfig], 
						this, getMacrosRegexesCallbackHandler));
			}
			
			public function getMacrosRegexesCallbackHandler(result:ArrayCollection):void {
				if (result != null) {
					// try to keep the old selection
					var oldSelectedId:String = list.selectedItem != null ? list.selectedItem.id : null;
										
					// set new data
					list.dataProvider = result;
					
					if (oldSelectedId != null) { // set the old selection if id found in new list
						for each (var macro:MacroRegexDto in list.dataProvider) {
							if (macro.id == oldSelectedId) {
								list.selectedItem = macro;
								break;
							}
						}				
					}
				}
			}
			
			private function changeHandler(event:Event):void {	
				FlexUtilGlobals.getInstance().selectionManager.selectionChanged(_viewHost, this);
				
				// stop propagation (otherwise, this method will be called again)
				event.stopImmediatePropagation();
			}
			
			public function addMacro(macro:MacroRegexDto):void {
				if (macro != null) {
					if (list.dataProvider == null) {
						list.dataProvider = new ArrayCollection();
					}
					list.dataProvider.addItem(macro);
					list.selectedItem = macro;
				}
			}
			
			public function removeMacro(removedMacro:MacroRegexDto):void {
				if (removedMacro != null) {
					var index:int;					
					for each (var macro:MacroRegexDto in list.dataProvider) {
						if (macro.id == removedMacro.id) {
							index = list.dataProvider.getItemIndex(macro);
							list.dataProvider.removeItemAt(index);							
							break;
						}
					}
					if (index == 0) { 
						list.selectedIndex = 0;
					} else {
						list.selectedIndex = list.dataProvider.length > 0 ? index - 1 : -1;
					}				
				}
			}
		]]>
	</fx:Script>
	
	<s:RichText textFlow="{TextConverter.importToFlow(CodeSyncPlugin.getInstance().regexUtils.selectedConfigMessage, TextConverter.TEXT_FIELD_HTML_FORMAT)}" 
				width="100%" paddingLeft="5"/>
	<s:List id="list" width="100%" height="100%" labelField="name" />
	
</s:VGroup>
