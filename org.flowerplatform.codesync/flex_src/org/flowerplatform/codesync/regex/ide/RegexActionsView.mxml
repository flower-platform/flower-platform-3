<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!-- 
@author Cristina Constatinescu
-->
<tree:TreeList xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:tree="org.flowerplatform.flexutil.tree.*"
			   implements="org.flowerplatform.flexutil.view_content_host.IViewContent"
			   initialize="initializeHandler(event)"
			   hierarchicalModelAdapter="{new RegexActionsHierachicalModelAdapter()}"
			   change="changeHandler(event)" allowMultipleSelection="true">
				

	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.layout.event.ViewAddedEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.codesync.regex.ide.remote.RegexDto;
			import org.flowerplatform.codesync.regex.ide.remote.RegexMatchDto;
			import org.flowerplatform.codesync.regex.ide.ui.RegexActionsHierachicalModelAdapter;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.tree.HierarchicalModelWrapper;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			import spark.events.IndexChangeEvent;
			
			protected var _viewHost:IViewHost;
			
			public function getActions(selection:IList):Vector.<IAction> {			
				return null;
			}
			
			public function set viewHost(viewHost:IViewHost):void {
				if (_viewHost != null) {
					DisplayObject(_viewHost).removeEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
					DisplayObject(_viewHost).removeEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
				}
				
				_viewHost = viewHost;
				
				DisplayObject(_viewHost).addEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
				DisplayObject(_viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);	
			}
			
			public function itemLabelFunction(data:HierarchicalModelWrapper):String {
				if (data.treeNode is RegexMatchDto) {
					return "Match " + RegexMatchDto(data.treeNode).value;
				} 
				return RegexDto(data.treeNode).name;
			}
			
			protected function initializeHandler(event:FlexEvent):void {
				addEventListener(ViewAddedEvent.VIEW_ADDED, viewAddedHandler);
				addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);
							
				rootNode = new RegexDto();
			}
			
			private function viewAddedHandler(event:ViewAddedEvent):void {
				FlexGlobals.topLevelApplication.addEventListener(RegexDataEvent.REGEX_ACTIONS_CHANGED, regexActionsChangedHandler);
				FlexGlobals.topLevelApplication.addEventListener(RegexDataEvent.REGEX_MATCHES_SELECTED_CHANGED, regexMatchesSelectedChangedHandler);
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				FlexGlobals.topLevelApplication.removeEventListener(RegexDataEvent.REGEX_ACTIONS_CHANGED, regexActionsChangedHandler);
				FlexGlobals.topLevelApplication.removeEventListener(RegexDataEvent.REGEX_MATCHES_SELECTED_CHANGED, regexMatchesSelectedChangedHandler);
			}
			
			private function regexActionsChangedHandler(event:RegexDataEvent):void {				
				RegexDto(rootNode).matches = event.newData;
				refreshLinearizedDataProvider();
			}
			
			protected function changeHandler(e:IndexChangeEvent):void {				
				var array:Array = [];
				var event:RegexDataEvent = new RegexDataEvent(RegexDataEvent.REGEX_ACTIONS_SELECTED_CHANGED);
				for each (var selected:Object in selectedItems) {
					var item:Object = HierarchicalModelWrapper(selected).treeNode;
					if (item is RegexDto) {
						if (RegexDto(item).matches.length == 0) {
							return;
						}
						for (var i:int = 0; i < RegexDto(item).matches.length; i++) {
							var match:RegexMatchDto = RegexMatchDto(RegexDto(item).matches.getItemAt(i));
							if (array.indexOf(match) == -1) {
								array.push(match);
							}
						}					
					} else {
						array.push(item);
					}					
				}
				event.newSelectedMatches = array;
				FlexGlobals.topLevelApplication.dispatchEvent(event);
			}
			
			private function regexMatchesSelectedChangedHandler(event:RegexDataEvent):void {		
				var vector:Vector.<int> = new Vector.<int>();
				for each (var match:RegexMatchDto in event.newSelectedMatches) {
					var item:HierarchicalModelWrapper = findRegexItem(match.regexName);
					if (item != null) {
						if (!item.expanded) {
							item.expanded = true;
							refreshLinearizedDataProvider();
						}
						var index:int = findRegexMatchItemIndex(match.value);
						if (index != -1) {
							vector.push(index);
						}
					}
				}
				selectedIndices = vector;
			}
			
			private function findRegexItem(name:String):HierarchicalModelWrapper {
				for (var i:int = 0; i < dataProvider.length; i++) {
					var item:HierarchicalModelWrapper = HierarchicalModelWrapper(dataProvider.getItemAt(i));
					if (item.treeNode is RegexDto && RegexDto(item.treeNode).name == name) {
						return item;
					}
				}
				return null;
			}
			
			private function findRegexMatchItemIndex(value:String):int {
				for (var i:int = 0; i < dataProvider.length; i++) {
					var item:HierarchicalModelWrapper = HierarchicalModelWrapper(dataProvider.getItemAt(i));
					if (item.treeNode is RegexMatchDto && RegexMatchDto(item.treeNode).value == value) {
						return i;
					}
				}
				return -1;
			}
		]]>
	</fx:Script>
	
	<tree:itemRenderer>
		<fx:Component>
			<tree:TreeListItemRenderer labelFunction="{outerDocument.itemLabelFunction}" />
		</fx:Component>
	</tree:itemRenderer>
	
</tree:TreeList>
