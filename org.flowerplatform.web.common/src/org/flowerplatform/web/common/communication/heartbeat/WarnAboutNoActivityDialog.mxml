<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
 Popup that warns the user using a countdown that it will be disconnected by the server
 due to inactivity. User can stop the disconnecting by closing popup.
 
 @see ChannelObserverStatefulClient

 @author Sorin
 @author Mariana
-->
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	minWidth="200" minHeight="150"
	horizontalAlign="center"
	implements="org.flowerplatform.flexutil.view_content_host.IViewContent"
	creationComplete="onCreationComplete()"
	>
	
	<s:Label textAlign="center" width="100%" height="100%">
Because you did not have any activity, you will be automatically disconnected in {secondsUntilDisconnect} seconds.

If you do not want to be disconnected close this popup.
	</s:Label>
	
	<s:Button label="Close" click="formCancelHandler()" />
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			
			private var _viewHost:IViewHost;
			
			[Bindable]
			public var secondsUntilDisconnect:Number;
			
			private var secondsUpdater:Timer; 
			
			public function onCreationComplete():void {
				secondsUpdater = new Timer(1000, secondsUntilDisconnect);
				secondsUpdater.addEventListener(TimerEvent.TIMER, updateSeconds);
				secondsUpdater.start();
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			public function getSelection():IList {
				return null;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
				viewHost.setLabel("Automatic Disconnect");
				viewHost.setIcon(WebCommonPlugin.getInstance().getResourceUrl("images/login.png"));
				viewHost.displayCloseButton(false);
			}
			
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function closeForm():void {
				if (secondsUpdater == null)
					return;
				secondsUpdater.stop();
				secondsUpdater.removeEventListener(TimerEvent.TIMER, updateSeconds);
				secondsUpdater = null;
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
			private function updateSeconds(event:TimerEvent):void {
				secondsUntilDisconnect --;
				if (secondsUntilDisconnect <= 0) {
					closeForm();
					WebCommonPlugin.getInstance().authenticationManager.bridge.disconnect(); // Connection not lost or connection lost but undetected, so disconnect ourself.
				}
			}
			
			protected function formCancelHandler(event:Event = null):void {
				var client:HeartbeatStatefulClient = HeartbeatStatefulClient(CommunicationPlugin.getInstance()
					.statefulClientRegistry.getStatefulClientById(HeartbeatStatefulClient.CLIENT_ID));
				client.signalActivity();
				closeForm();
			}			
		]]>
	</fx:Script>
</s:VGroup>