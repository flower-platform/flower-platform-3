<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Victor Badila
-->

<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*"
			  xmlns:ui="org.flowerplatform.web.svn.common.ui.*"
			  xmlns:mx="library://ns.adobe.com/flex/mx">	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.PathFragment;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.remote.dto.FileDto;
			import org.flowerplatform.web.svn.common.remote.dto.GetModifiedFilesDto;
			
			public var selection:ArrayList;		
			
			[Bindable]
			public var commitPath:String = null;
			
			[Bindable]
			public var modifiedResources:GetModifiedFilesDto = null;
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				wizardImage.source = WebCommonPlugin.getInstance().getResourceUrl("images/newfolder_wizban.gif");
				getCommitPath();
				getModifiedData();				
			}
			
			public override function set popupHost(value:IPopupHost):void {
				_popupHost = value;	
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.ui.commit.viewLabel"));
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/commit.gif"));
			}
			
			public function getModifiedData():void {				
				// following block appears in 3 different classes (this, CheckoutView, UpdateToVersionView)
				var selectionPaths:ArrayList = new ArrayList;
				for(var i:int=0; i<selection.length; i++) {
					var path:ArrayCollection = ArrayCollection(TreeNode(selection.getItemAt(i)).getPathForNode(true));				
					selectionPaths.addItem(path);
				}				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "getDifferences", [selectionPaths], this, getModifiedDataCallback));				
			}
			
			public function getModifiedDataCallback(res:GetModifiedFilesDto):void {
				modifiedResources = res;
			}
			
			public function getCommitPath():void {				
				var result:String = SvnCommonPlugin.getInstance().getMessage("svn.ui.commit.wizardPartialName");
				if (selection.length>1) {
					result = result.concat(' ', SvnCommonPlugin.getInstance().getMessage("svn.ui.commit.multipleTargetSelected"));
					commitPath = result;
				} else {					
					var fullpath:ArrayCollection = TreeNode(selection.getItemAt(0)).getPathForNode(true);
					var svnUrl:String = null;
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand("svnService", "getCommitUrlPathForSingleSelection", [fullpath], this, commitPathCallback));
					result.concat(' ', svnUrl);					
				}				
			}		
			
			public function commitPathCallback(result:String):void {				
				commitPath = SvnCommonPlugin.getInstance().getMessage("svn.ui.commit.wizardPartialName").concat(' ',result);
			}		
			
			protected override function finishClickHandler():void {				
				var selectedFiles:ArrayCollection = new ArrayCollection();
				if (selectedFiles.length == 0) {								
					for each (var project:FileDto in modifiedResources.files) {
						if (project.getSelected()) {
							selectedFiles.addItem(project);
						}
					}
				}
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "commit", 
						[selectedFiles, commComponent.commitMessage.text, keepLocksCheckbox.selected], 
						this, finishCallbackHandler ));
				popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.commitSvnRepository.view.spinner"));				
			}
			
			private function finishCallbackHandler(result:Boolean):void {
				_popupHost.hideSpinner();
				if (result == true) {					
					FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
				}
			}			
			
			private function modifyAll(value:Boolean):void {
				var files:ArrayCollection = modifiedResources.files;
				for(var i:int=0; i<files.length; i++) {
					FileDto(files.getItemAt(i)).setSelected(value);
				}
				files.refresh();
			}
			
		]]>		
	</fx:Script>
	
	<popup:states>
		<mx:State name="0">				
			<mx:SetProperty name="wizardTitle"
							value="{commitPath}"/>										
			<mx:AddChild relativeTo="{contentArea}">						
				<s:VGroup width="100%">
					<s:Rect height="10"/>										 
					<ui:CommentComponent id="commComponent" width="100%" height="100%"/>
					<s:Rect height="5"/>
					<s:CheckBox id="keepLocksCheckbox" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.commit.keepLocks')}"/>
					<s:HGroup>
						<s:Button id="selectAllButton" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.commit.selectAllButton')}"
								  click="{modifyAll(true)}">							
						</s:Button>
						<s:Button id="deselectAllButton" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.commit.deselectAllButton')}"
								  click="{modifyAll(false)}">							
						</s:Button>
					</s:HGroup>
					<s:List width="100%" height="100%" id="list" dataProvider="{modifiedResources.files}">			
						<s:itemRenderer>						
							<fx:Component>
								<s:ItemRenderer>									
									<fx:Script>
										<![CDATA[											
											import org.flowerplatform.web.svn.common.SvnCommonPlugin;
											import org.flowerplatform.web.svn.common.remote.dto.FileDto;
										]]>
									</fx:Script>
									<s:HGroup verticalAlign="middle" horizontalAlign="center" gap="5" paddingLeft="5">	
										<s:CheckBox click="{FileDto(data).setSelected(!FileDto(data).getSelected())}" 
													selected="{FileDto(data).getSelected()}"/>
										<s:BitmapImage source="{SvnCommonPlugin.getInstance().getComposedImageUrl(data.imageUrls.source)}"/>				                    
										<s:Label text="{data.label}"/>									
									</s:HGroup>	
								</s:ItemRenderer>					
							</fx:Component>
						</s:itemRenderer>
					</s:List>					
				</s:VGroup>		 
			</mx:AddChild>						
		</mx:State>	
	</popup:states>	
	
</popup:Wizard>
