<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Victor Badila
-->

<popup:Wizard 
	xmlns:fx="http://www.adobe.com/2006/mxml"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:popup="org.flowerplatform.flexutil.popup.*"
	xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.ArrayCollection;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.remote.dto.FileDto;
			import org.flowerplatform.web.svn.common.remote.dto.GetModifiedFilesDto;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			
			[Bindable]
			public var modifiedResources:GetModifiedFilesDto = null;
			
			public function cancelHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);				
			}
			
			protected override function finishClickHandler():void {				
				var selectedFiles:ArrayCollection = new ArrayCollection();
				if (selectedFiles.length == 0) {								
					for each (var project:FileDto in modifiedResources.files) {
						if (project.getSelected()) {
							selectedFiles.addItem(project);
						}
					}
				}
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "revert", 
						[selectedFiles], 
						this, finishCallbackHandler));
				popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.ui.revert.spinner"));				
			}
			
			private function finishCallbackHandler(result:Boolean):void {
				_popupHost.hideSpinner();
				if (result == true) {					
					FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
				}
			}
			
			public override function set popupHost(value:IPopupHost):void {
				_popupHost = value;				
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.action.revert.view.label"));
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/revert.gif"));
			}
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				wizardImage.source = WebCommonPlugin.getInstance().getResourceUrl("images/newfolder_wizban.gif");							
			}
			
			private function modifyAll(value:Boolean):void {
				var files:ArrayCollection = modifiedResources.files;
				for(var i:int=0; i<files.length; i++) {
					FileDto(files.getItemAt(i)).setSelected(value);
				}
				files.refresh();
			}
			
		]]>
	</fx:Script>	
	
	<popup:states>
		<mx:State name="0">			
			<mx:SetProperty name="wizardTitle" value="{SvnCommonPlugin.getInstance().getMessage('svn.ui.revert.WizardTitle')}"/>			
			<mx:AddChild relativeTo="{contentArea}">
				<s:VGroup width="100%">
					<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.revert.localChangesWillBeRemoved')}"/>
					<s:Rect height="5"/>
					<s:HGroup>
						<s:Button id="selectAllButton" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.commit.selectAllButton')}"
								  click="{modifyAll(true)}">							
						</s:Button>
						<s:Button id="deselectAllButton" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.commit.deselectAllButton')}"
								  click="{modifyAll(false)}">							
						</s:Button>
					</s:HGroup>
					<s:Rect height="5"/>
					<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.revert.localChanges')}"/>
					<s:List width="100%" height="100%" id="list" dataProvider="{modifiedResources.files}">			
						<s:itemRenderer>						
							<fx:Component>
								<s:ItemRenderer>									
									<fx:Script>
										<![CDATA[											
											import org.flowerplatform.web.svn.common.SvnCommonPlugin;
											import org.flowerplatform.web.svn.common.remote.dto.FileDto;
										]]>
									</fx:Script>
									<s:HGroup verticalAlign="middle" horizontalAlign="center" gap="5" paddingLeft="5">	
										<s:CheckBox click="{FileDto(data).setSelected(!FileDto(data).getSelected())}" 
													selected="{FileDto(data).getSelected()}"/>
										<s:BitmapImage source="{SvnCommonPlugin.getInstance().getComposedImageUrl(data.imageUrls.source)}"/>				                    
										<s:Label text="{data.label}"/>
									</s:HGroup>	
								</s:ItemRenderer>					
							</fx:Component>
						</s:itemRenderer>
					</s:List>													
				</s:VGroup>
			</mx:AddChild>
		</mx:State>					
	</popup:states>	
	
</popup:Wizard>
