<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Gabriela Murgoci
-->

<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:common="com.crispico.flower.flexdiagram.util.common.*"
			  implements="org.flowerplatform.flexutil.dialog.IDialogResultHandler">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.GenericTreeStatefulClient;
			import org.flowerplatform.communication.tree.remote.PathFragment;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.popup.ActionBase;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.projects.remote.WorkingDirectoryTreeStatefulClient;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.projects.remote.SvnRepositoryTreeStatefulClient;
			import org.flowerplatform.web.svn.common.remote.BranchResource;
			import org.flowerplatform.web.svn.common.ui.component.BranchTagSelectionPageView;
			import org.flowerplatform.web.svn.common.ui.component.SelectRevisionWindowView;
			
			import spark.primitives.supportClasses.StrokedElement;
			
			/**
			 * @flowerModelElementId _7zbVIHMzEeGqFZPifgWPGQ
			 */
			public var branchResources:ArrayCollection;
			
			/**
			 * @flowerModelElementId _9JlPwHMzEeGqFZPifgWPGQ
			 */
			public var commonParentPath:Object;
			
			/**
			 * @flowerModelElementId _-SOS0HMzEeGqFZPifgWPGQ
			 */
			public var commonParentName:String;
			
			/**
			 * @flowerModelElementId __2JjsHMzEeGqFZPifgWPGQ
			 */
			public var commonParentUrl:String;
			
			/**
			 * @flowerModelElementId _BBhKoHM0EeGqFZPifgWPGQ
			 */
			public var node:TreeNode;
			
			public var selection:IList;
			
			/**
			 * @flowerModelElementId _XQYywHPzEeGyzdZi-qn9ag
			 */
			private var lastSelectedBtn:Button;
			
			[Bindable]
			public var depthDropdownDataProvider:ArrayList;
			
			private function getProjectsCallbackHandler(result:Boolean):void {
				popupHost.hideSpinner();
				if (result) {					
					cancelClickHandler();
				}
			} 
			
			public function getBranchResourceCallBackHandler(result:ArrayCollection):void {
				var parentName:String;
				var i:int;
				branchResources = result;
				commonParentName = String(branchResources.removeItemAt(1));
				commonParentUrl = commonParentName;
				locationTxt.text = commonParentName;
				commonParentPath = branchResources.removeItemAt(0);
				pathChangedHandler();
			}
			
			override protected function creationCompleteHandler():void {
				super.creationCompleteHandler();
				
				wizardImage.source = SvnCommonPlugin.getInstance().getResourceUrl("images/newlocation_wizban.gif");
				
				depthDropdownDataProvider = new ArrayList();
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.switchTo.depthDropdownValues.workingCopy"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.switchTo.depthDropdownValues.fullyRecursive"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.switchTo.depthDropdownValues.imediateChildren"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.switchTo.depthDropdownValues.onlyFileChildren"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.switchTo.depthDropdownValues.onlyThisItem"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.switchTo.depthDropdownValues.exclude"));
				
				var array:ArrayCollection = new ArrayCollection();
				for (var i:int=0; i < selection.length; i++) {
					array.addItem(TreeNode(selection.getItemAt(i)).getPathForNode(true));
				}
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "populateBranchResourcesList", [array, true], this, getBranchResourceCallBackHandler )); 
			}
			
			/**
			 * @flowerModelElementId _XQYywXPzEeGyzdZi-qn9ag
			 */
			private function pathChangedHandler():void {
				for each (var item:BranchResource in branchResources) {					
					item.customizedPath = "[" + locationTxt.text + "/" + item.partialPath + "]";					
				}
				branchResources.refresh();
			}
			
			/**
			 * @flowerModelElementId _XQZZ0HPzEeGyzdZi-qn9ag
			 */
			private function browseBtnHandler(event:MouseEvent):void {
				lastSelectedBtn = Button(event.target);
				var view:BranchTagSelectionPageView = new BranchTagSelectionPageView(); 
				view.setResultHandler(this);
				view.node = node;
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setWidth(400)
					.setHeight(450)
					.setPopupContent(view)
					.show();
			}
			
			/**
			 * @flowerModelElementId _XQZZ03PzEeGyzdZi-qn9ag
			 */
			public function handleDialogResult(result:Object):void {
				if (result == null) {
					return;
				}
				if (lastSelectedBtn == browseBtn) {
					locationTxt.text = String(result);
					pathChangedHandler();
				 } else if (lastSelectedBtn == selectRevisionBtn) {
					 checkoutHeadCb.selected = false;
					 revisionTxt.text = String(result);
				} 
			}
			
			/**
			 * @flowerModelElementId _XQaA4XPzEeGyzdZi-qn9ag
			 */
			public function selectRevisionBtnHandler(event:MouseEvent):void {
				lastSelectedBtn = Button(event.target);
				var popUp:SelectRevisionWindowView = new SelectRevisionWindowView();
				popUp.remoteResourcePath = commonParentPath;
				popUp.remoteResourceName = commonParentName;
				popUp.setResultHandler(this);
				popUp.showPopup();
			}
			
			/**
			 * @flowerModelElementId _Osw2EHKZEeGXFIlpn-r9CA
			 */
			protected override function finishClickHandler():void {
				popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.switchTo.view.spinner"));
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService",
						"switchTo",
						[branchResources, locationTxt.text, (checkoutHeadCb.selected ? -1 : Number(revisionTxt.text)), depthDropdown.selectedIndex, setDepthCb.selected, ignoreExternalsCb.selected, allowUnversionedCb.selected],
						this, getProjectsCallbackHandler ));  
			}
			
			private function serverResponseHandler(value:Boolean):void {
				if (value) {
					super.finishClickHandler();
				}				
			}			
			
		]]>
	</fx:Script>
		
		<popup:states>				
			<mx:State name="0">	
				<mx:SetProperty name="wizardTitle" value="Switch to Branch/Tag"/>			
				<mx:SetProperty name="wizardDescription"
								value="Update the working copy to another revision and/or location."/>		
				<mx:AddChild relativeTo="{contentArea}">
					<s:VGroup width="100%" height="100%">
						<s:VGroup width="100%" height="50">
							<s:Label text="To URL:"/>
							<s:HGroup width="100%">
								<s:TextInput id="locationTxt" width="100%"
											 change="pathChangedHandler()" text="{commonParentUrl}"/>
								<s:Button id="browseBtn" label="Select..."
										  click="browseBtnHandler(event)"/>					
							</s:HGroup>		
						</s:VGroup>
						<s:CheckBox id="checkoutHeadCb" label="Switch to HEAD revision"
									selected="true"/>
						<s:HGroup verticalAlign="middle">
							<s:Label text="Revision:"/>
							<s:TextInput id="revisionTxt" width="50"
										 enabled="{!checkoutHeadCb.selected}"/>
							<s:Button id="selectRevisionBtn" label="Select..."
									  click="selectRevisionBtnHandler(event)"/>
						</s:HGroup>	
						<s:Spacer height="10%"/>
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Depth:"/>
							<s:DropDownList id="depthDropdown" width="100%"
											dataProvider="{depthDropdownDataProvider}"
											labelField="depthSelectorDropdown" selectedIndex="0">
							</s:DropDownList>
						</s:HGroup>
						<s:CheckBox id="setDepthCb" label="Change working copy to specified depth"/>
						<s:CheckBox id="ignoreExternalsCb" label="Ignore externals"/>
						<s:CheckBox id="allowUnversionedCb" label="Allow unversioned obstructions"
									selected="true"/>			
					</s:VGroup>
				</mx:AddChild>
			</mx:State>		
		</popup:states>	
		
</popup:Wizard>