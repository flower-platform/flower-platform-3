<?xml version="1.0" encoding="utf-8"?>
<!--
Window used to select a revision number for a given remote resource.

<p>
An <code>IDialogResultHandler</code> must be set in order to handle the window result.
The result can be:
<ul>
<li> selected revision -> ok pressed
<li> null -> cancel pressed
</ul>

@author Cristi
@author Cristina
@author Gabriela Murgoci
@author Victor Badila

@flowerModelElementId _v2V2QGwbEeGN3LpFXIiaDw
-->
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	
	xmlns:pnl="com.crispico.flower.util.popup.*" 	
	xmlns:common="com.crispico.flower.flexdiagram.util.common.*"
	
	creationComplete="creationCompleteHandler(event)"
	implements="org.flowerplatform.flexutil.popup.IPopupContent">
	
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import mx.events.FlexEvent;
			
			import flash.events.Event;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.svn.*;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.history.HistoryEntry;
			
			import spark.formatters.DateTimeFormatter;
			
			public static const NUMBER_LOG_ENTRIES:Number = 25;
			/**
			 * @flowerModelElementId _zGrTsGwdEeGN3LpFXIiaDw
			 */
			public var remoteResourcePath:Object;
			
			protected var _popupHost:IPopupHost;
			
			[Bindable]
			public var dateTimeFormatter:DateTimeFormatter = new DateTimeFormatter();
			
			[Bindable]
			public var volatileAffectedPathsEntry:ArrayCollection;
			
			/**
			 * @flowerModelElementId __Z3IAHJ9EeGZAqbcNpPqCg
			 */
			public var remoteResourceName:String;
			
			/**
			 * @flowerModelElementId _4pJL0GwfEeGN3LpFXIiaDw
			 */
			private var resultHandler:IDialogResultHandler;
			
			/**
			 * @flowerModelElementId __Z4WIHJ9EeGZAqbcNpPqCg
			 */
			public function setResultHandler(resultHandler:IDialogResultHandler):void {
				this.resultHandler = resultHandler;
			}
			
			/**
			 * @flowerModelElementId __Z5kQXJ9EeGZAqbcNpPqCg
			 */
			protected function creationCompleteHandler(event:FlexEvent):void {	
				dateTimeFormatter.dateTimePattern = "MM/DD/YYYY HH:NN";				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnHistoryService",
						"getEntries",
						[remoteResourcePath, -1, SvnCommonPlugin.NUMBER_LOG_ENTRIES, false], 
						this, 
						appendToHistoryEntriesTableCallback));  
				popupHost.addToControlBar(buttonBar);
			}
			
			/**
			 * @flowerModelElementId _K44aEGwdEeGN3LpFXIiaDw
			 */
			public function getNextBtnHandler():void {
				var data:ArrayCollection = ArrayCollection(historyEntriesTable.dataProvider);
				if (data != null && data.length > 0) {
					var revisionStart:String = HistoryEntry(data.getItemAt(data.length - 1)).revision;					
					if (revisionStart.charAt(0) == '*') {
						revisionStart = revisionStart.substr(1);
					}
					
					//ModalSpinner.addModalSpinner(this, "Loading data...");			
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand("svnHistoryService",
							"getEntries",
							[remoteResourcePath, Number(revisionStart), SvnCommonPlugin.NUMBER_LOG_ENTRIES, false], 
							this, 
							appendToHistoryEntriesTableCallback));		
				}
			}
			
			/**
			 * @flowerModelElementId _O_XuUGwdEeGN3LpFXIiaDw
			 */
			public function getAllBtnHandler():void {
				var data:ArrayCollection = ArrayCollection(historyEntriesTable.dataProvider);
				if (data != null && data.length > 0) {
					var revisionStart:String = HistoryEntry(data.getItemAt(data.length - 1)).revision;
					if (revisionStart.charAt(0) == '*') {
						revisionStart = revisionStart.substr(1);
					}
					
					//ModalSpinner.addModalSpinner(this, "Loading data...");			
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand("svnHistoryService",
							"getEntries",
							[remoteResourcePath, Number(revisionStart), -1, false], 
							this, 
							appendToHistoryEntriesTableCallback));		
				}
			}
			
			/**
			 * @flowerModelElementId _6bc-UGwcEeGN3LpFXIiaDw
			 */
			public function appendToHistoryEntriesTableCallback(value:ArrayCollection):void {			
				if (value != null) {
					if (historyEntriesTable ==  null || historyEntriesTable.dataProvider == null) {
						historyEntriesTable.dataProvider = value;
					} else {
						ArrayCollection(historyEntriesTable.dataProvider).addAll(value);
					}
					
					//	ModalSpinner.removeModalSpinner(this);
				}
			}
			
			/**
			 * @flowerModelElementId _6N0qoGwfEeGN3LpFXIiaDw
			 */
			public function formOkHandler(event:Event):void {
				if (historyEntriesTable.selectedIndex == -1) {
					Alert.show("No revision selected!");
					return;
				}
				var revisionStart:String = HistoryEntry(historyEntriesTable.selectedItem).revision;
				if (revisionStart.charAt(0) == '*') {
					revisionStart = revisionStart.substr(1);
				}
				resultHandler.handleDialogResult(revisionStart);
				//closeForm();
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
			/**
			 * @flowerModelElementId _Fru4YGwgEeGN3LpFXIiaDw
			 */
			protected function formCancelHandler(event:Event=null):void {	
				resultHandler.handleDialogResult(null);
				//super.formCancelHandler(event);
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
			private function date_sortCompareFunc(itemA:Object, itemB:Object):int {				
				var dateA:Date = new Date(Date.parse(itemA.date));
				var dateB:Date = new Date(Date.parse(itemB.date));
				return ObjectUtil.dateCompare(dateA, dateB);
			}
			
			private function revision_sortCompareFunc(itemA:Object, itemB:Object):int {	
				var revA:String;
				if (itemA.revision.charAt(0) == '*') {
					revA = itemA.revision.substr(1);
				}
				var revB:String;
				if (itemB.revision.charAt(0) == '*') {
					revB = itemB.revision.substr(1);
				}
				return ObjectUtil.compare(revA, revB);
			}
			
			
			/**
			 * @author Victor Badila
			 */
			private function getAffectedPaths():void {
				if (historyEntriesTable == null)
					return;
				var obj:Object = ArrayCollection(historyEntriesTable.dataProvider).getItemAt(commentField.grid.selectedIndex);
				if(historyEntriesTable.selectedItem == null) {
					return;
				}
				var rev:int = historyEntriesTable.selectedItem.revision;
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand(
						"svnHistoryService", 
						"getEntries", 
						[remoteResourcePath, rev, 1, true], 
						this, 
						getAffectedPathsCallback));							
			}	
			
			/**
			 * @author Victor Badila
			 */
			private function getAffectedPathsCallback(result:ArrayCollection):void {
				volatileAffectedPathsEntry = result.getItemAt(0).affectedPathEntries;				
			}
			
			public function getActions(selection:IList):Vector.<IAction>{
				return null;
			}
			
			
			public function getSelection():IList {
				return null;
			}
			
			public function get popupHost():IPopupHost {
				return _popupHost;				
			}	
			
			public function set popupHost(value:IPopupHost):void {
				_popupHost = value;	
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/svn_persp.gif"));
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.action.branchTag.view.page.label"));			
			}	
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:HGroup horizontalAlign="right" id="buttonBar">
			<s:Button id="getAllBtn" click="getAllBtnHandler()" label="Get All"/>
			<s:Button id="getNextBtn" click="getNextBtnHandler()" label="{'Next ' + SvnCommonPlugin.NUMBER_LOG_ENTRIES}"/>					
			<s:Button id="okBtn" width="80" label="Ok" click="{formOkHandler(event)}" />
			<s:Button id="cancelBtn" width="80" label="Cancel" click="{formCancelHandler(event)}" /> 	
		</s:HGroup>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:VGroup gap="3" width="100%" height="100%" >	
		<s:DataGrid id="historyEntriesTable" width="100%" height="50%" click="{getAffectedPaths()}">		
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="Revision" dataField="revision" sortCompareFunction="revision_sortCompareFunc"/>
					<s:GridColumn headerText="Date" sortCompareFunction="date_sortCompareFunc" dataTipFormatter="{dateTimeFormatter}" dataField="date"/>
					<s:GridColumn headerText="Author" dataField="author" />
					<s:GridColumn headerText="Comment" dataField="comment" id="commentField"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid> 
		
		<s:TextArea id="commentArea" width="100%" height="10%" editable="false" 
					text="{HistoryEntry(historyEntriesTable.selectedItem).comment}" />	
		<s:DataGrid id="affectedPathEntriesTable" width="100%" height="25%" 
					dataProvider="{volatileAffectedPathsEntry}" >
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="Action" dataField="action"/>
					<s:GridColumn headerText="Affected paths" dataField="affectedPath" dataTipField="affectedPath" showDataTips="true"/>
					<s:GridColumn headerText="Description" dataField="description" dataTipField="description" showDataTips="true"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>			
	</s:VGroup>
	
</s:Group> 