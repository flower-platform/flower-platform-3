<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Gabriela Murgoci
-->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:tree="org.flowerplatform.communication.tree.*"
		 width="400" height="300" creationComplete="creationCompleteHandler()"
		 implements="org.flowerplatform.flexutil.popup.IPopupContent">
	
	<fx:Script>
		
		<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.collections.IList;
		import mx.controls.Alert;
		import mx.events.FlexEvent;
		import mx.validators.Validator;
		
		import org.flowerplatform.common.CommonPlugin;
		import org.flowerplatform.communication.CommunicationPlugin;
		import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
		import org.flowerplatform.communication.tree.remote.GenericTreeStatefulClient;
		import org.flowerplatform.communication.tree.remote.PathFragment;
		import org.flowerplatform.communication.tree.remote.TreeNode;
		import org.flowerplatform.flexutil.FlexUtilGlobals;
		import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
		import org.flowerplatform.flexutil.popup.ActionBase;
		import org.flowerplatform.flexutil.popup.IAction;
		import org.flowerplatform.flexutil.popup.IPopupHost;
		import org.flowerplatform.web.common.WebCommonPlugin;
		import org.flowerplatform.web.common.projects.remote.WorkingDirectoryTreeStatefulClient;
		import org.flowerplatform.web.svn.common.SvnCommonPlugin;
		import org.flowerplatform.web.svn.common.projects.remote.SvnRepositoryTreeStatefulClient;
		
		import spark.primitives.supportClasses.StrokedElement;
		
		public var nodesToOpen:ArrayCollection;
		
		public var selectedNodes:ArrayList;
		
		public var node:TreeNode;
			
		protected var _popupHost:IPopupHost;
			
		private var resultHandler:IDialogResultHandler;
			
		public var treeType:Boolean;
		
		[Bindable]
		public var folderName:String;
		
		[Bindable]
		public var destinationURL:String;
			
		public function setResultHandler(resultHandler:IDialogResultHandler):void {
			this.resultHandler = resultHandler;
		}
			
		public function getDestinationFolder():void {
			var size:int = tree.getSelection().length;
			var fullPath:ArrayCollection = node.children; 
			destinationURL = TreeNode(tree.getSelection().getItemAt(size - 1)).getPath();
		}
			
		public function getActions(selection:IList):Vector.<IAction>{
			return null;
		}
			
		public function getSelection():IList {
			return null;
		}
				
		public function set popupHost(value:IPopupHost):void {
			_popupHost = value;	
			_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/svn_persp.gif"));
			_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.action.branchTag.view.page.label"));			
		}	
			
		private function okClickHandler():void {
			var size:int = tree.getSelection().length;
			resultHandler.handleDialogResult(TreeNode(tree.getSelection().getItemAt(size - 1)).getPath()); 
			cancelClickHandler();
		}
			
		private function cancelClickHandler():void {
			FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);	
		}
			
		private function getProjectsCallbackHandler(result:Boolean):void {
			_popupHost.hideSpinner();
			if (result) {					
				cancelClickHandler();
			}
		} 
			
		protected function creationCompleteHandler():void {
			_popupHost.addToControlBar(buttonBar);
			var statefulClient:GenericTreeStatefulClient;
			statefulClient = new SvnRepositoryTreeStatefulClient();
			tree.statefulClient = statefulClient;				
			statefulClient.treeList = tree;
				
			CommunicationPlugin.getInstance().statefulClientRegistry.register(statefulClient, null);
				
			var fullPath:ArrayCollection = node.getPathForNode();
			var firstSegmentName:String = PathFragment(fullPath.getItemAt(0)).name;
			var lastSegmentName:String = PathFragment(fullPath.getItemAt(fullPath.length - 1)).name;
			
			tree.statefulClient.context[SvnRepositoryTreeStatefulClient.ORGANIZATION_KEY] = firstSegmentName;
			tree.statefulClient.openNode(null, this, getProjectsCallbackHandler);	
			folderName = PathFragment(fullPath.getItemAt(fullPath.length - 1)).name;
			destinationURL = PathFragment(fullPath.getItemAt(2)).name;
		}
		
		]]>
	</fx:Script>
	
	<fx:Declarations>		
		<s:HGroup id="buttonBar" width="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button id="ok" width="80" label="{CommonPlugin.getInstance().getMessage('ok')}"
					  click="okClickHandler()"/>
			<s:Button id="cancel" width="80"
					  label="{CommonPlugin.getInstance().getMessage('cancel')}"
					  click="cancelClickHandler()"/>			
		</s:HGroup>		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
	</s:layout>
	
	<tree:GenericTreeList id="tree" width="100%" height="100%" dispatchEnabled="false"/>	
	
</s:Group>
