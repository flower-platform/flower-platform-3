<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Gabriela Murgoci
-->

<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:ui="org.flowerplatform.web.svn.common.ui.*"
			  xmlns:common="com.crispico.flower.flexdiagram.util.common.*"
			  implements="org.flowerplatform.flexutil.dialog.IDialogResultHandler">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.GenericTreeStatefulClient;
			import org.flowerplatform.communication.tree.remote.PathFragment;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.popup.ActionBase;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.projects.remote.WorkingDirectoryTreeStatefulClient;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.projects.remote.SvnRepositoryTreeStatefulClient;
			import org.flowerplatform.web.svn.common.remote.BranchResource;
			import org.flowerplatform.web.svn.common.ui.component.RepositoryBrowserView;
			import org.flowerplatform.web.svn.common.ui.component.SelectRevisionWindowView;
			
			import spark.primitives.supportClasses.StrokedElement;
			
			public var node:TreeNode;
			
			public var selection:IList;
			
			public var viewLabel:String;
			
			public var viewIcon:String;
			
			[Bindable]
			public var projectName:String;
			
			[Bindable]
			public var repositoriesInfo:ArrayCollection;
			
			[Bindable]
			private var location:String;
			
			public override function set currentState(value:String):void {
				if (value == "1" && currentState == "0" && rbUseRepository.selected) {
					currentState = "2";
				} else if (value == "1" && currentState == "2" && rbUseRepository.selected) {
					currentState = "0";
				} else {
					super.currentState = value;
				}
			}
			
			public function handleDialogResult(result:Object):void {
				var res:String = String(result);
				res = res.replace(getRepositoryUrl(), "");
				if (result != null) {
					var path:ArrayCollection = node.getPathForNode(true);
					var pathf:PathFragment = PathFragment(path.getItemAt(path.length - 1));
					folderTxt.text = res + "/" + pathf.name;
					locationTxt.text = getRepositoryUrl() + folderTxt.text;
				}	
			} 
			
			private function getProjectsCallbackHandler(result:Boolean):void {
				popupHost.hideSpinner();
				if (result) {					
					cancelClickHandler();
				}
			} 
			
			public function getRepositoriesInfoCallBackHandler(result:ArrayCollection):void {
				var projName:String;
				var i:int;
				repositoriesInfo = result;
				var path:ArrayCollection = node.getPathForNode(true);
				var pathf:PathFragment = PathFragment(path.getItemAt(path.length - 1));
				projectName = pathf.name;
			}
			
			private function getRepositoryUrl():String {
				if (rbCreateRepository.selected) {
					return repositoryUrlTxt.text;
				}
				if (listRepositories.selectedItem == null) {
					listRepositories.selectedIndex = 0;					
				}
				return BranchResource(listRepositories.selectedItem).name;
			}
			
			public function browseBtnHandler():void {
				var view:RepositoryBrowserView = new RepositoryBrowserView(); 
				view.setResultHandler(this);
				view.node = node;
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setWidth(400)
					.setHeight(450)
					.setPopupContent(view)
					.show();
			}
			
			protected override function cancelClickHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			} 
			
			protected override function finishClickHandler():void {
				popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService",
						"shareProject",
						[node.getPathForNode(true), getRepositoryUrl(), rbProjectName.selected ? projectName : folderTxt.text, rbCreateRepository.selected, commentArea.commitMessage.text],
						this, getProjectsCallbackHandler ));   
			} 
			
			override public function set popupHost(value:IPopupHost):void {
				_popupHost = value;	
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl(viewIcon));
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage(viewLabel));
			} 
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				wizardImage.source = SvnCommonPlugin.getInstance().getResourceUrl("images/newlocation_wizban.gif");
				var array:ArrayCollection = new ArrayCollection();
				for (var i:int=0; i < selection.length; i++) {
					array.addItem(TreeNode(selection.getItemAt(i)).getPathForNode(true));
				}
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "populateRepositoriesInfo", [array], this, getRepositoriesInfoCallBackHandler )); 
			}
		]]>
	</fx:Script>
	
	<popup:states>
		<s:State name="0">			
			<mx:SetProperty name="wizardTitle" value="Share Project with SVN Repository"/>			
			<mx:SetProperty name="wizardDescription"
							value="Select an existing repository location or create a new location."/>			
			<mx:AddChild relativeTo="{contentArea}">
				<!-- Choose create/use repository panel -->
				<s:VGroup width="100%" height="100%">
					<s:Label height="50"
							 text="This wizard will help you to share your files with the SVN repository for the first time. {'\n'}Your project will automatically be imported into the SVN repository, {'\n'}and the Commit dialog will open to allow you to commit your resources."/>
					<s:RadioButton id="rbCreateRepository" width="100%"
								   label="Create a new repository location"
								   click="{listRepositories.enabled = false}" groupName="shareGroup"
								   selected="true"/>
					<s:RadioButton id="rbUseRepository" width="100%"
								   label="Use existing repository location:"
								   click="{listRepositories.enabled = true; listRepositories.selectedIndex = 0; location = getRepositoryUrl();}"
								   groupName="shareGroup"/>
					<s:List id="listRepositories" width="100%" height="100%"
							change="{location = getRepositoryUrl();}"
							dataProvider="{repositoriesInfo}" enabled="false"
							horizontalScrollPolicy="auto">			
						<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer>
									<s:layout>
										<s:HorizontalLayout verticalAlign="middle"/>
									</s:layout>
									<fx:Script>
										<![CDATA[
											import org.flowerplatform.flexutil.FlexUtilGlobals;
											import org.flowerplatform.web.svn.common.SvnCommonPlugin;
										]]>
									</fx:Script>
									<common:BitmapContainer id="image"
															source="{FlexUtilGlobals.getInstance().createAbsoluteUrl(SvnCommonPlugin.getInstance().getResourceUrl(data.image))}"/>		
									<s:Label id="nameTxt" text="{data.name}"/>
							</s:ItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:List>
				</s:VGroup>
			</mx:AddChild>
		</s:State>	
		<s:State name="1">			
			<mx:SetProperty name="wizardTitle" value="Enter Repository Location Information"/>	
			<mx:SetProperty name="wizardDescription"
							value="Define the location and protocol required to connect with an existing SVN repository."/>	
			<mx:AddChild relativeTo="{contentArea}">
				<!-- Create repository panel -->
					<s:HGroup width="100%">
						<s:Label text="Url:"/>
						<s:TextInput id="repositoryUrlTxt" width="100%"
									 change="{location = getRepositoryUrl();}"/>		
					</s:HGroup>		
			</mx:AddChild>
		</s:State>	
		<mx:State name="2">			
			<mx:SetProperty name="wizardTitle" value="Enter Folder Name"/>				
			<mx:SetProperty name="wizardDescription"
							value="Select the name of the folder in the SVN repository."/>				
			<mx:AddChild relativeTo="{contentArea}">
				<!-- Choose folder panel -->
				<s:VGroup width="100%" height="100%">
					<s:RadioButton id="rbProjectName" width="100%"
								   label="Use project name as folder name"
								   click="{locationTxt.text = getRepositoryUrl() + '/' + projectName}"
								   groupName="folderGroup" selected="true"/>
					<s:RadioButton id="rbSpecificFolder" width="100%"
								   label="Use specified folder name:"
								   click="{locationTxt.text = getRepositoryUrl() + '/' + folderTxt.text}"
								   groupName="folderGroup"/>	
					<s:HGroup width="100%">				
						<s:TextInput id="folderTxt" width="100%"
									 enabled="{rbSpecificFolder.selected}"/>
						<s:Button id="selectFolderBtn" label="Select..." click="browseBtnHandler()"
								  enabled="{rbSpecificFolder.selected}"/>
					</s:HGroup>
					<s:HGroup width="100%" paddingTop="20">
						<s:Label text="Url:"/>
						<s:TextInput id="locationTxt" width="100%" text="{location}"/>		
					</s:HGroup>	
				</s:VGroup>	
			</mx:AddChild>
		</mx:State>
		<mx:State name="3">			
			<mx:SetProperty name="wizardTitle" value="Ready to Share Project"/>				
			<mx:SetProperty name="wizardDescription"
							value="Select Finish to import the project into the SVN repository."/>	
			<mx:AddChild relativeTo="{contentArea}">
				<s:VGroup>
				<!-- Comment panel -->
				<s:Label text="The wizard has all the information necessary to share your project {'\n'}with the SVN repository. When you click 'Finish', the wizard will import your project {'\n'}into the repository and open the Synchronize view to allow you to commit {'\n'}your resources.{'\n'}{'\n'}">
				</s:Label>
				<ui:CommentComponent id="commentArea" width="100%" height="100%"/>
				</s:VGroup>
			</mx:AddChild>
		</mx:State>
	</popup:states>
</popup:Wizard>



