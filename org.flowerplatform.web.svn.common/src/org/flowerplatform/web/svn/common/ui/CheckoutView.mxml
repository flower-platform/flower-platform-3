<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Victor Badila
-->

<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
			  xmlns:s="library://ns.adobe.com/flex/spark"
  			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  creationComplete="init()"
			  implements="org.flowerplatform.flexutil.dialog.IDialogResultHandler"
			  minWidth="300" minHeight="200">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.Tree;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.PathFragment;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.ui.WorkingDirectorySelectionPopupView;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
						
			public var selection:ArrayList;			
			
			[Bindable]
			public var depthDropdownDataProvider:ArrayList;
		
			
			private function getProjectsCallbackHandler(result:Boolean):void {
				_popupHost.hideSpinner();
				if (result == true) {					
					FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
				}
			}
						
			public override function set popupHost(value:IPopupHost):void {
				_popupHost = value;				
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepiository.view.label"));
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/repository_rep.gif"));
			}
			
			protected override function cancelClickHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);		
			}
			
			protected override function finishClickHandler():void {				
				var organizationName:String = getSvnRepositoriesTreeNode(TreeNode(selection.getItemAt(0))).parent.label;				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "workingDirectoryExists", [workingDirectoryTextInput.text, organizationName], 
						this, finishClickHandler2 ));		
				_popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepository.view.spinner"));
			}			
				
			public function finishClickHandler2(result:Boolean):void {
				_popupHost.hideSpinner();
				if (result) {
					var wdNode:TreeNode = getWorkingDirectoryTreeNode(TreeNode(selection.getItemAt(0)));
					/* var childrenArray:ArrayCollection = wdNode.children;
					for (var i:int=0; i<childrenArray.length; i++) {
						if (TreeNode(childrenArray.getItemAt(i)).label == workingDirectoryTextInput.text) {
							wdNode = TreeNode(childrenArray.getItemAt(i));
							break;
						}
					}				 */	
					var selectionPaths:ArrayList = new ArrayList;
					for(var i:int=0; i<selection.length; i++) {
						var path:ArrayCollection = ArrayCollection(TreeNode(selection.getItemAt(i)).getPathForNode(true));
						selectionPaths.addItem(path);
					}					
					var revisionValue:String = revision.text;
					var headRev:Boolean = false;
					if (headRevisionCheckbox.selected)
						headRev = true;
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand("svnService", "checkout", 
							[selectionPaths, wdNode.getPathForNode(true), "/" + workingDirectoryTextInput.text, 
							revisionValue, depthDropdown.selectedIndex, headRev, forceCheck.selected, ignoreCheck.selected], 
							this, getProjectsCallbackHandler ));
					popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepository.view.spinner"));		
				} else {
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setTitle(SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.interogationNewWorkingDirectory.title'))
						.setText(SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.interogationNewWorkingDirectory.content'))
						.addButton("Yes", createWorkingDirectory)
						.addButton("No")
						.setWidth(300)
						.setHeight(300)
						.showMessageBox();					
				}
			}	
			
			public function createWorkingDirectory(event:MouseEvent):void {
				var path:String = workingDirectoryTextInput.text
				var organizationTreeNode:TreeNode = getSvnRepositoriesTreeNode(TreeNode(selection.getItemAt(0))).parent;
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "createFolderAndMarkAsWorkingDirectory", [path, organizationTreeNode], this, createWorkingDirectoryCallbackHandler ));
				_popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepository.view.spinner"));
			} 
			
			public function createWorkingDirectoryCallbackHandler(result:Boolean):void {
				_popupHost.hideSpinner();
				if (result) {
					finishClickHandler2(true);
				} else {
					Alert.show(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.createWorkingDirectory.invalidArgument"));					
				}
			}
			
			public function handleDialogResult(result:Object):void {
				workingDirectoryTextInput.text = String(result);
			}
			
			public function init():void {
				wizardImage.source = WebCommonPlugin.getInstance().getResourceUrl("images/newfolder_wizban.gif");
				depthDropdownDataProvider = new ArrayList();
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.fullyRecursive"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.immediateChildren"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.onlyChildren"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.onlyThis"));
			}
			
			public function openWorkingDirectoryBrowseWindow():void {
				var organizationName:String = TreeNode(getSvnRepositoriesTreeNode(TreeNode(selection.getItemAt(0)))).parent.label;				
				var view:WorkingDirectorySelectionPopupView = new WorkingDirectorySelectionPopupView();
				view.init(organizationName);				
				view.setResultHandler(this);
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setPopupContent(view)
					.show();
			}
			
			// Had to give parameter to following method. Otherwise error message and does not compile
			public function alertNotImpl(whatever:Object):void {
				Alert.show("Feature not implemented yet");
			}			
			
			public function getWorkingDirectoriesForNode(treeNode:TreeNode):ArrayList {
				var result:ArrayList = new ArrayList;
				treeNode = getWorkingDirectoryTreeNode(treeNode);
				for (var i:int=0; i<treeNode.children.length;i++) {	
					var value:String = treeNode.children.getItemAt(i).label;
					result.addItem(value);
				}
				return result;				
			}			
			
			public function getWorkingDirectoryTreeNode(treeNode:TreeNode):TreeNode {				
				treeNode = getSvnRepositoriesTreeNode(treeNode);
				var children:ArrayCollection = treeNode.parent.children;
				var i:int = 0;
				while (TreeNode(children.getItemAt(i)).label != "Working Directories") {
					i++;					
				}
				treeNode = TreeNode(treeNode.parent.children.getItemAt(i));
				return treeNode;
			}
			
			public function getSvnRepositoriesTreeNode(treeNode:TreeNode):TreeNode {
				while (treeNode.label!='Svn Repositories') {
					treeNode = treeNode.parent;
				}
				return treeNode;
			}
			
		]]>		
	</fx:Script>
	
	<popup:states>
		<mx:State name="0">			
			<mx:SetProperty name="wizardTitle" 
							value="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.wizardName')}"/>										
			<mx:AddChild relativeTo="{contentArea}">						
				<s:VGroup width="100%">					
					<s:HGroup width="100%">
						<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.workingDirectoryIndicator')}"/>
						<s:TextInput width="100%" id="workingDirectoryTextInput"/>
						<s:Button label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.browseWorkspaceButton')}" click="{openWorkingDirectoryBrowseWindow()}"/>
					</s:HGroup>
					<s:Rect width="1" height="10"/>
					<s:CheckBox label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.headRevisionCheckbox')}" id="headRevisionCheckbox"/>					
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.revisionLabel')}"/>
						<s:TextInput id="revision" enabled="{!headRevisionCheckbox.selected}" width="100%"/>
						<s:Button label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.revisionButton')}" click="{alertNotImpl(null)}"/>
					</s:HGroup>
					<s:Rect width="1" height="10"/>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.depthLabel')}"/>
						<s:DropDownList labelField="depthSelectorDropdown" id="depthDropdown" width="100%" dataProvider="{depthDropdownDataProvider}">
						</s:DropDownList>
					</s:HGroup>						
					<s:CheckBox id="ignoreCheck" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.ignoreExternalsCheckbox')}"/>					
					<s:CheckBox id="forceCheck" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.allowUnrevisionedObstructionsCheckbox')}"/>
				</s:VGroup>		 
			</mx:AddChild>
			<mx:SetProperty target="finish" name="enabled" value="{headRevisionCheckbox.selected || revision.text!=''}"/>			
		</mx:State>	
	</popup:states>
	
</popup:Wizard>
