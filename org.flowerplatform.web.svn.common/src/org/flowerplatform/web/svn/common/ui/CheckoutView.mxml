<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Victor Badila
-->

<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
			  xmlns:s="library://ns.adobe.com/flex/spark"
  			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:utils="com.crispico.flower.util.*"
			  creationComplete="init()"
			  implements="org.flowerplatform.flexutil.dialog.IDialogResultHandler">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.ui.WorkingDirectorySelectionPopupView;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.action.SvnProjectFileAction;
			import org.flowerplatform.web.svn.common.ui.component.SelectRevisionWindowView;
						
			[Bindable]
			public var currentSelectedItemName:String;
			
			[Bindable]
			public var depthDropdownDataProvider:ArrayList;
			
			private var lastBtnPressed:Button;
			
			public var applyForAll:Boolean = false;
			
			public var newProjectName:String = "";
			
			public var selection:ArrayList;
			
			public var selectionIndex:int = 0;			
			
			public var workingDirectoryName:String = "";
					
			private function resetView():void {
				currentSelectedItemName = TreeNode(selection.getItemAt(0)).label;
				locationTextInput.text = workingDirectoryName + '/';
				callLater(locationTextInput.setFocus);	
				headRevisionCheckbox.selected = true;
				ignoreCheck.selected = false;
				forceCheck.selected = false;
			}
						
			public override function set popupHost(value:IPopupHost):void {
				_popupHost = value;				
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepiository.view.label"));
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/checkout.gif"));
			}
			
			private function selectRevisionBtnHandler():void {
				lastBtnPressed = selectRevisionButton;
				var view:SelectRevisionWindowView = new SelectRevisionWindowView();
				var tn:TreeNode = TreeNode(selection.getItemAt(selectionIndex));
				view.remoteResourcePath = tn.getPathForNode(true);
				view.remoteResourceName = tn.label;
				view.setResultHandler(this);
				//view.showPopup();
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setWidth(400)
					.setHeight(450)
					.setPopupContent(view)
					.show();
			}
			
			protected override function cancelClickHandler():void {
				selectionIndex++;
				if (selectionIndex == selection.length) {
					FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
				} else {
					resetView();
					callLater(locationTextInput.setFocus);										
				}						
			}
			
			protected override function finishClickHandler():void {
				setWorkingDirectoryNameAndProjectName();
				var projectDestinationAdditionalPath:String;
				if (newProjectName!="") {
					projectDestinationAdditionalPath = newProjectName;
				} else {
					projectDestinationAdditionalPath = TreeNode(selection.getItemAt(selectionIndex)).label;
				}
				var wdNode:TreeNode = getWorkingDirectoriesTreeNode(TreeNode(selection.getItemAt(0)));
				var organizationName:String = getSvnRepositoriesTreeNode(TreeNode(selection.getItemAt(0))).parent.label;				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "workingDirectoryExistsAndProjectLocationIsValid", 
						[workingDirectoryName, organizationName, projectDestinationAdditionalPath, wdNode.getPathForNode(true)], 
						this, finishClickHandler2 ));		
				_popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepository.view.spinner"));
			}
						
			private function setWorkingDirectoryNameAndProjectName():void {
				var textArea:String = locationTextInput.text;
				while (textArea.charAt(0) == "/" || textArea.charAt(0) == "\\") {
					textArea.substr(1);
				}
				var indexOfFirstBar:int;
				if (textArea.indexOf("/") > textArea.indexOf('\\')) {
					indexOfFirstBar = textArea.indexOf("/");
				} else {
					indexOfFirstBar = textArea.indexOf("\\");
				}
				if (indexOfFirstBar != -1) {
					workingDirectoryName = textArea.substr(0, indexOfFirstBar);
				    newProjectName = textArea.substr(indexOfFirstBar+1);
				} else {
					workingDirectoryName = textArea;
					newProjectName = null;
				}
					
			}
				
			public function finishClickHandler2(result:int):void {
				_popupHost.hideSpinner();
				if (result == 0) {
					var wdNode:TreeNode = getWorkingDirectoriesTreeNode(TreeNode(selection.getItemAt(0)));					
					var selectionPaths:ArrayList = new ArrayList;	
					if (applyDefaultForAll.selected) {
						workingDirectoryName = locationTextInput.text;
						newProjectName = "";
						applyForAll = true; // and thus CheckoutView will be closed after checkout, if all goes well
						for(var i:int=0; i<selection.length; i++) {							
							selectionPaths.addItem(ArrayCollection(TreeNode(selection.getItemAt(i)).getPathForNode(true)));
						}					
					} else {						
						selectionPaths.addItem(ArrayCollection(TreeNode(selection.getItemAt(selectionIndex)).getPathForNode(true)));						
					}										
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand("svnService", "checkout", 
							[selectionPaths, wdNode.getPathForNode(true), "/" + workingDirectoryName, 
							 revision.text, depthDropdown.selectedIndex, headRevisionCheckbox.selected, 
							 forceCheck.selected, ignoreCheck.selected, newProjectName], 
							this, finishCallbackHandler ));
					popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepository.view.spinner"));
					
				} else if (result == 1){
					FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
						.setTitle(SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.interogationNewWorkingDirectory.title'))
						.setText(SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.interogationNewWorkingDirectory.content'))
						.addButton("Yes", createWorkingDirectory)
						.addButton("No")
						.setWidth(300)
						.setHeight(300)
						.showMessageBox();					
				} else {
					Alert.show(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.errorMsg.aFileWithGivenPathAlreadyExists"));
				}
			}
			
			private function finishCallbackHandler(result:Boolean):void {
				_popupHost.hideSpinner();
				if ((result == true && ++selectionIndex == selection.length) || applyForAll) {					
					FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
				} else {
					resetView();					
					callLater(locationTextInput.setFocus);
				}
			}
			
			public function createWorkingDirectory(event:MouseEvent):void {				
				var organizationTreeNode:TreeNode = getSvnRepositoriesTreeNode(TreeNode(selection.getItemAt(0))).parent;
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "createFolderAndMarkAsWorkingDirectory", 
						[workingDirectoryName, organizationTreeNode], this, createWorkingDirectoryCallbackHandler ));
				_popupHost.showSpinner(SvnCommonPlugin.getInstance().getMessage("svn.action.checkoutSvnRepository.view.spinner"));
			} 
			
			public function createWorkingDirectoryCallbackHandler(result:Boolean):void {
				_popupHost.hideSpinner();
				if (result) {
					finishClickHandler2(0);
				} else {
					Alert.show(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.createWorkingDirectory.invalidArgument"));					
				}
			}
			
			public function handleDialogResult(result:Object):void {
				if (lastBtnPressed == browseWorkingDirectoriesButton) {
					locationTextInput.text = String(result) + "/" + wizardTitle;
				} else if (lastBtnPressed == selectRevisionButton) {
					if (result != null) {					
						revision.text = String(result);
					}	
				}
			}
			
			public function init():void {
				currentSelectedItemName = TreeNode(selection.getItemAt(0)).label;
				wizardImage.source = WebCommonPlugin.getInstance().getResourceUrl("images/newfolder_wizban.gif");
				depthDropdownDataProvider = new ArrayList();
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.fullyRecursive"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.immediateChildren"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.onlyChildren"));
				depthDropdownDataProvider.addItem(SvnCommonPlugin.getInstance().getMessage("svn.ui.checkout.depthDropdownValues.onlyThis"));
				callLater(locationTextInput.setFocus);
								
			}
			
			public function openWorkingDirectoryBrowseWindow():void {
				lastBtnPressed = browseWorkingDirectoriesButton;
				var organizationName:String = TreeNode(getSvnRepositoriesTreeNode(TreeNode(selection.getItemAt(0)))).parent.label;				
				var view:WorkingDirectorySelectionPopupView = new WorkingDirectorySelectionPopupView();
				view.init(organizationName);				
				view.setResultHandler(this);
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setPopupContent(view)
					.show();
			}
						
			public function getWorkingDirectoriesForNode(treeNode:TreeNode):ArrayList {
				var result:ArrayList = new ArrayList;
				treeNode = getWorkingDirectoriesTreeNode(treeNode);
				for (var i:int=0; i<treeNode.children.length;i++) {	
					var value:String = treeNode.children.getItemAt(i).label;
					result.addItem(value);
				}
				return result;				
			}			
			
			public function getWorkingDirectoriesTreeNode(treeNode:TreeNode):TreeNode {				
				treeNode = getSvnRepositoriesTreeNode(treeNode);
				var children:ArrayCollection = treeNode.parent.children;
				var i:int = 0;
				while (TreeNode(children.getItemAt(i)).label != "Working Directories") {
					i++;					
				}
				treeNode = TreeNode(treeNode.parent.children.getItemAt(i));
				return treeNode;
			}
			
			public function getSvnRepositoriesTreeNode(treeNode:TreeNode):TreeNode {
				while (treeNode.label!='Svn Repositories') {
					treeNode = treeNode.parent;
				}
				return treeNode;
			}
			
			public function cancelAllHandler(event:Event):void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				var button:spark.components.Button = new spark.components.Button();
				button.label = SvnCommonPlugin.getInstance().getMessage("svn.actions.checkout.CancelAllButtonLabel");
				button.addEventListener(MouseEvent.CLICK, cancelAllHandler);
				buttonBar.addElement(button);
			}
			
		]]>		
	</fx:Script>
	
	<popup:states>
		<mx:State name="0">			
			<mx:SetProperty name="wizardTitle" 
							value="{currentSelectedItemName}"/>			
			<mx:AddChild relativeTo="{contentArea}">
				<s:VGroup width="100%" height="100%">					
					<s:HGroup width="100%">
						<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.locationIndicator')}"/>
						<s:TextInput width="100%" id="locationTextInput"/>
						<s:Button label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.browseWorkspaceButton')}" click="{openWorkingDirectoryBrowseWindow()}" id="browseWorkingDirectoriesButton"/>
						<utils:HintButton toolTip="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.locationFormHint')}"/>
					</s:HGroup>
					<s:Rect width="1" height="10"/>
					<s:CheckBox label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.headRevisionCheckbox')}" id="headRevisionCheckbox" selected="true"/>					
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.revisionLabel')}"/>
						<s:TextInput id="revision" enabled="{!headRevisionCheckbox.selected}" width="100%"/>
						<s:Button label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.revisionButton')}" id="selectRevisionButton" click="{selectRevisionBtnHandler()}"/>						
					</s:HGroup>
					<s:Rect width="1" height="10"/>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.depthLabel')}"/>
						<s:DropDownList labelField="depthSelectorDropdown" id="depthDropdown" width="100%" dataProvider="{depthDropdownDataProvider}" selectedIndex="0">
						</s:DropDownList>
					</s:HGroup>						
					<s:CheckBox id="ignoreCheck" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.ignoreExternalsCheckbox')}"/>					
					<s:CheckBox id="forceCheck" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.allowUnrevisionedObstructionsCheckbox')}"/>
					<s:CheckBox id="applyDefaultForAll" label="{SvnCommonPlugin.getInstance().getMessage('svn.ui.checkout.applyDefaultSettingsForAll')}"/>
				</s:VGroup>		 
			</mx:AddChild>
			<mx:SetProperty target="finish" name="enabled" value="{(headRevisionCheckbox.selected || revision.text!='') &amp;&amp; locationTextInput.text!=''}"/>			
		</mx:State>	
	</popup:states>
	
</popup:Wizard>
