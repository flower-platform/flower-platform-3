<<<<<<< HEAD
<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Gabriela Murgoci
-->

<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:ui="org.flowerplatform.web.svn.common.ui.*"
			  xmlns:tree="org.flowerplatform.communication.tree.*"
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.GenericTreeStatefulClient;
			import org.flowerplatform.communication.tree.remote.PathFragment;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.popup.ActionBase;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.projects.remote.WorkingDirectoryTreeStatefulClient;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.projects.remote.SvnRepositoryTreeStatefulClient;
			
			import spark.primitives.supportClasses.StrokedElement;
			
			public var nodesToOpen:ArrayCollection;
			
			public var selectedNodes:ArrayList;
			
			public var node:TreeNode;
			
			[Bindable]
			public var folderName:String;
			
			[Bindable]
			public var destinationURL:String;
			
			[Bindable]
			public var destinationFolderName:String;
			
			[Bindable]
			public var userComment:String;
			
			[Bindable]
			private var check:Boolean;
			
			private function getProjectsCallbackHandler(result:Boolean):void {
				popupHost.hideSpinner();
				if (result) {					
					cancelClickHandler();
				}
			} 
			
			protected override function nextClickHandler():void {
				if (Validator.validateAll(validators).length > 0) {
					return;
				} 
				super.nextClickHandler();
			}
			
			protected override function cancelClickHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			} 
			
			protected override function finishClickHandler():void {
				var destPath:ArrayCollection = TreeNode(tree.getSelection().getItemAt(tree.getSelection().length - 1)).getPathForNode(true);
				var sourcePath:ArrayCollection = node.getPathForNode(true);
				
				destPath.removeItemAt(0);
				destPath.addItemAt(sourcePath.getItemAt(2), 0);
				destPath.addItemAt(sourcePath.getItemAt(1), 0);
				destPath.addItemAt(sourcePath.getItemAt(0), 0);
				
				popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "renameMove",[sourcePath, destPath, myFolderName.text, commComponent.commitMessage.text], this, getProjectsCallbackHandler ));
			} 
			
			override public function set popupHost(value:IPopupHost):void {
				_popupHost = value;	
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/svn_persp.gif"));
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.action.renameMove.view.label"));
			} 
			
			public function getDestinationFolder():void {
				var size:int = tree.getSelection().length;
				var fullPath:ArrayCollection = node.children; 
				destinationURL = TreeNode(tree.getSelection().getItemAt(size - 1)).getPath();
			}
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				wizardImage.source = SvnCommonPlugin.getInstance().getResourceUrl("images/newlocation_wizban.gif");
				
				var statefulClient:GenericTreeStatefulClient = new SvnRepositoryTreeStatefulClient();
				
				tree.statefulClient = statefulClient;				
				statefulClient.treeList = tree;
				
				CommunicationPlugin.getInstance().statefulClientRegistry.register(statefulClient, null);
				
				var fullPath:ArrayCollection = node.getPathForNode();
				var firstSegmentName:String = PathFragment(fullPath.getItemAt(0)).name;
				
				var lastSegmentName:String = PathFragment(fullPath.getItemAt(fullPath.length - 1)).name;
				tree.statefulClient.context[SvnRepositoryTreeStatefulClient.ORGANIZATION_KEY] = firstSegmentName;
				tree.statefulClient.openNode(null, this, getProjectsCallbackHandler);	
				folderName = PathFragment(fullPath.getItemAt(fullPath.length - 1)).name;
				destinationURL = PathFragment(fullPath.getItemAt(2)).name;
			}
		]]>
	</fx:Script>
	
	<fx:Array id="validators">
		<mx:StringValidator minLength="1" property="text" source="{myFolderName}"/>
		<mx:StringValidator minLength="1" property="text" source="{myFolderName2}"/>
	</fx:Array>
	
	<popup:states>
		<mx:State name="0">			
			<mx:SetProperty name="wizardTitle" value="Move or rename a remote resource"/>			
			<mx:AddChild relativeTo="{contentArea}">	
				<s:VGroup width="100%" height="100%">	
					<s:Label width="100%" text="Enter or select the url of destination parent folder:"/>
					<s:TextInput id="myFolderName2" width="100%" text="{destinationURL}" editable="false"/>	
					<tree:GenericTreeList id="tree" width="100%" height="100%"
										  click="getDestinationFolder()" dispatchEnabled="false"/>											
					<s:Label width="100%" text="Resource destination name:"/>				
					<s:TextInput id="myFolderName" width="100%" text="{folderName}"/>															
				</s:VGroup>	
			</mx:AddChild>
		</mx:State>	
		
		<mx:State name="1">			
			<mx:SetProperty name="wizardTitle" value="Commit"/>					
			<mx:AddChild relativeTo="{contentArea}">									
				<ui:CommentComponent id = "commComponent" 
									 width="100%"
									 height="100%" />
			</mx:AddChild>
		</mx:State>	
		
	</popup:states>
</popup:Wizard>



=======
<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
@author Gabriela Murgoci
-->

<popup:Wizard xmlns:fx="http://www.adobe.com/2006/mxml"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:popup="org.flowerplatform.flexutil.popup.*"
			  xmlns:tree="org.flowerplatform.communication.tree.*"
			  xmlns:component="org.flowerplatform.web.git.common.ui.component.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.GenericTreeStatefulClient;
			import org.flowerplatform.communication.tree.remote.PathFragment;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.popup.ActionBase;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.projects.remote.WorkingDirectoryTreeStatefulClient;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.svn.common.projects.remote.SvnRepositoryTreeStatefulClient;
			
			import spark.primitives.supportClasses.StrokedElement;
			
			public var nodesToOpen:ArrayCollection;
			
			public var selectedNodes:ArrayList;
			
			public var node:TreeNode;
			
			[Bindable]
			public var folderName:String;
			
			[Bindable]
			public var destinationURL:String;
			
			[Bindable]
			public var destinationFolderName:String;
			
			[Bindable]
			public var userComment:String;
			
			[Bindable]
			private var check:Boolean;
			
			private function getProjectsCallbackHandler(result:Boolean):void {
				popupHost.hideSpinner();
				if (result) {					
					cancelClickHandler();
				}
			} 
			
			protected override function nextClickHandler():void {
				if (Validator.validateAll(validators).length > 0) {
					return;
				} 
				super.nextClickHandler();
			}
			
			protected override function cancelClickHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			} 
			
			protected override function finishClickHandler():void {
				var destPath:ArrayCollection = TreeNode(tree.getSelection().getItemAt(tree.getSelection().length - 1)).getPathForNode(true);
				var sourcePath:ArrayCollection = node.getPathForNode(true);
				
				destPath.removeItemAt(0);
				destPath.addItemAt(sourcePath.getItemAt(2), 0);
				destPath.addItemAt(sourcePath.getItemAt(1), 0);
				destPath.addItemAt(sourcePath.getItemAt(0), 0);
				
				popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.gettingData"));
				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnService", "renameMove",[sourcePath, destPath, myFolderName.text, commitMessage.text], this, getProjectsCallbackHandler ));
			} 
			
			override public function set popupHost(value:IPopupHost):void {
				_popupHost = value;	
				_popupHost.setIcon(SvnCommonPlugin.getInstance().getResourceUrl("images/svn_persp.gif"));
				_popupHost.setLabel(SvnCommonPlugin.getInstance().getMessage("svn.action.renameMove.view.label"));
			} 
			
			public function getDestinationFolder():void {
				var size:int = tree.getSelection().length;
				var fullPath:ArrayCollection = node.children; 
				destinationURL = TreeNode(tree.getSelection().getItemAt(size - 1)).getPath();
			}
			
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				wizardImage.source = SvnCommonPlugin.getInstance().getResourceUrl("images/newlocation_wizban.gif");
				
				var statefulClient:GenericTreeStatefulClient = new SvnRepositoryTreeStatefulClient();
				
				tree.statefulClient = statefulClient;				
				statefulClient.treeList = tree;
				
				CommunicationPlugin.getInstance().statefulClientRegistry.register(statefulClient, null);
				
				var fullPath:ArrayCollection = node.getPathForNode();
				var firstSegmentName:String = PathFragment(fullPath.getItemAt(0)).name;
				
				var lastSegmentName:String = PathFragment(fullPath.getItemAt(fullPath.length - 1)).name;
				tree.statefulClient.context[SvnRepositoryTreeStatefulClient.ORGANIZATION_KEY] = firstSegmentName;
				tree.statefulClient.openNode(null, this, getProjectsCallbackHandler);	
				folderName = PathFragment(fullPath.getItemAt(fullPath.length - 1)).name;
				destinationURL = PathFragment(fullPath.getItemAt(2)).name;
			}
		]]>
	</fx:Script>
	
	<fx:Array id="validators">
		<mx:StringValidator minLength="1" property="text" source="{myFolderName}"/>
		<mx:StringValidator minLength="1" property="text" source="{myFolderName2}"/>
	</fx:Array>
	
	<popup:states>
		<mx:State name="0">			
			<mx:SetProperty name="wizardTitle" value="Move or rename a remote resource"/>			
			<mx:AddChild relativeTo="{contentArea}">	
				<s:VGroup width="100%" height="100%">	
					<s:Label width="100%" text="Enter or select the url of destination parent folder:"/>
					<s:TextInput id="myFolderName2" width="100%" text="{destinationURL}" editable="false"/>	
					<tree:GenericTreeList id="tree" width="100%" height="100%"
										  click="getDestinationFolder()" dispatchEnabled="false"/>											
					<s:Label width="100%" text="Resource destination name:"/>				
					<s:TextInput id="myFolderName" width="100%" text="{folderName}"/>															
				</s:VGroup>	
			</mx:AddChild>
		</mx:State>	
		
		<mx:State name="1">			
			<mx:SetProperty name="wizardTitle" value="Commit"/>					
			<mx:AddChild relativeTo="{contentArea}">									
				<s:VGroup width="100%" height="100%">
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label width="100%" text="Enter commit message:"/>							
					</s:HGroup>					
					<s:TextArea id="commitMessage" width="100%" heightInLines="3"/>					
					<s:HGroup width="100%" verticalAlign="middle">
					</s:HGroup>										
				</s:VGroup>		 			
			</mx:AddChild>
		</mx:State>	
		
	</popup:states>
</popup:Wizard>



>>>>>>> origin/GH94-Merge
