<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--

@author Cristi

-->
<mx:TabNavigator 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:openresourcesview="com.crispico.flower.mp.web.editorsupport.openresourcesview.*" 
	xmlns:tree="org.flowerplatform.communication.tree.*"
	creationComplete="creationCompleteHandler()" 
	implements="org.flowerplatform.flexutil.layout.IDirtyStateProvider" >
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.IDataRenderer;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.stateful_service.StatefulClient;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.editor.remote.EditableResource;
			import org.flowerplatform.editor.remote.EditorStatefulClient;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
//			implements="com.crispico.flower.mp.web.editorsupport.IDirtyStateProvider"
			
//			import com.crispico.flower.flexdiagram.contextmenu.FlowerContextMenu;
//			import com.crispico.flower.mp.communication.stateful_service.StatefulClient;
//			import com.crispico.flower.mp.communication.stateful_service.StatefulClientRegistry;
//			import com.crispico.flower.mp.web.editor.GlobalEditorOperationsManager;
//			import com.crispico.flower.mp.web.editor.communication.EditorStatefulClient;
//			import com.crispico.flower.mp.web.editorsupport.EditableResource;
//			import com.crispico.flower.mp.web.editorsupport.EditableResourceClient;
//			import com.crispico.flower.mp.web.editorsupport.openresourcesview.action.UnsubscribeFromEditableResourceAction;
//			import com.crispico.flower.util.layout.event.ViewRemovedEvent;
//			
//			import mx.collections.ArrayCollection;
			
			/**
			 * Not null when the view is open; null otherwise.
			 * 
			 * 
			 */
			public static var INSTANCE:OpenResourcesView;
			
//			/**
//			 * Populated directly by <code>UpdateEditableResourceClientCommand</code>. We know
//			 * all the ERs in the application in <code>EditorSupport.editableResources</code>, but
//			 * they are held as a dictionary which is not an valid data provider for a graphical
//			 * component. That's why we duplicate the data here, in a list format.
//			 * 
//			 * 
//			 */
//			[Bindable]
//			public var editableResourcesCollection:ArrayCollection = new ArrayCollection();
//			
//			private var unsubscribeFromEditableResourceAction:UnsubscribeFromEditableResourceAction = new UnsubscribeFromEditableResourceAction();
			
			/**
			 * Initialize the list with the existing elements, by iterating through all <code>EditorStatefulClients</code>s.
			 * 
			 * 
			 */
			private function creationCompleteHandler():void	{
				INSTANCE = this;
				addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);
	
				for each (var sc:StatefulClient in CommunicationPlugin.getInstance().statefulClientRegistry.mx_internal::statefulClientsList) {
					if (sc is EditorStatefulClient && EditorStatefulClient(sc).editableResourceStatus != null) {
						TreeNode(tree.rootNode).children.addItem(EditorStatefulClient(sc).editableResourceStatus);
					}
				}
				tree.addEventListener(Event.CHANGE, selectionChangedHandler);
			}
			
			/**
			 * @author Daniela
			 */ 
			private function selectionChangedHandler(event:Event):void {
				// update the target of the Save action
//				GlobalEditorOperationsManager.INSTANCE.editorInputChangedForComponent(this);
			}
//			
			/**
			 * 
			 */			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				INSTANCE = null;				
			}
//			
//			/**
//			 * 
//			 */
//			private function fillContextMenu(contextMenu:FlowerContextMenu):void {
//				contextMenu.addActionEntryIfVisible(unsubscribeFromEditableResourceAction);
//			}
//			
//			/**
//			 * 
//			 */
//			private function getLabel(object:Object):String {
//				if (object is EditableResource) {
//					var editableResource:EditableResource = EditableResource(object);
//					return GlobalEditorOperationsManager.INSTANCE.getEditableResourceLabel(editableResource, true);
//				} else if (object is EditableResourceClient) {
//					return EditableResourceClient(object).name + " (" + 
//						EditableResourceClient(object).login + ")";
//				} else {
//					return null;
//				}
//			}			
//			
//			/**
//			* Returns true if at least one of the resources it displays is dirty.
//			* 
//			* @author Daniela
//			* @author Mariana 
//			*/ 
			public function isDirty():Boolean {
//				for each (var editableResource:EditableResource in editableResourcesCollection) {
//					if (editableResource.dirty)
//						return true;
//				}
				return false;
			}
//TODO			
			public function getEditorStatefulClientForSelectedElement():Object {
				if (!(tree.selectedItem is EditableResource)) {
					return null;
				}
				//TODO CS/STFL de scos castul la string
				//var editableResourcePath:String = String(EditableResource(tree.selectedItem).editorInput);
				//return GlobalEditorOperationsManager.INSTANCE.getInterestingEditorStatefulClientForEditableResourcePath(editableResourcePath);
				return null;
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			public function editableResourceStatusAdded(editableResourceStatus:EditableResource):void {
				TreeNode(tree.rootNode).children.addItem(editableResourceStatus);
			}
			
			/**
			 * @author Sebastian Solomon
			 */
			public function editableResourceStatusRemoved(editableResourceStatus:EditableResource):void {
				if (editableResourceStatus == null) {
					return;
					// I haven't actually seen this case (i.e. == null), but in theory could happen,
					// if the editor is closed really quickly, before the data arrives
				}
//				
//				var itemIndex:int = editableResourcesCollection.getItemIndex(editableResourceStatus);
				var itemIndex:int = TreeNode(tree.rootNode).children.getItemIndex(editableResourceStatus);
				
				if (itemIndex < 0) {
					// However I seen this case: something went wrong when first registering
					// and the element is not in the list
					return;
				}
				
				//editableResourcesCollection.removeItemAt(itemIndex);
				TreeNode(tree.rootNode).children.removeItemAt(itemIndex);
			}
			
			public function editableResourceClientAddedOrRemoved():void {
//				// inject a refresh, in order to force the refresh of the item renderer;
//				// needed for: change state from "no children" <-> "has children"; and for the label
//				// update, because we show the size of the list, which is not binded/listened
//				tree.invalidateDisplayList();
			}
			
		]]>
		
	</fx:Script>
	<mx:VBox label="All Resources" width="100%" height="100%">
		<tree:GenericTreeList id="tree"
				width="100%" height="100%"
				hierarchicalModelAdapter="{new EditableResourceHierachicalModelAdapter()}"
				itemRenderer="org.flowerplatform.editor.open_resources_view.OpenResourcesTreeItemRenderer"
				allowMultipleSelection="true"/>
	</mx:VBox>
		
</mx:TabNavigator>