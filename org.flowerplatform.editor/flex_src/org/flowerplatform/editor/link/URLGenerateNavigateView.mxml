<?xml version="1.0" encoding="utf-8"?>
<!--
 Dialog shown from :
 - Project Explorer when selecting openable nodes;
 - Global Menu, Navigate > URL Generate / Navigate;
 - Editor Header Bar
 
 Capable of generating an external link to be shared to open some resources.
 Also capable of navigating to some resources using an external link or manually introduced paths.
 
 @author Sorin
 @flowerModelElementId _aQ4C4EhHEeKn-dlTSOkszw
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
	  xmlns:s="library://ns.adobe.com/flex/spark" 
	  xmlns:mx="library://ns.adobe.com/flex/mx"
	  creationComplete="creationCompleteHandler();"
	  implements="org.flowerplatform.flexutil.popup.IPopupContent"
	  >
	
	<fx:Declarations>
		<s:VGroup width="100%" height="100%" id="visibleEditorLinkArea">					
			<s:Label text="Link to Current Opened Resource :" fontWeight="bold" />
			<s:TextArea id="visibleEditorLinkTextArea" width="100%" height="100%" editable="false"/> 
			<s:HGroup horizontalAlign="right" width="100%" >
				<s:Button label="Copy to clipboard" click="System.setClipboard(visibleEditorLinkTextArea.text);"/>
			</s:HGroup>		
		</s:VGroup>
		
		<s:HGroup id="buttonBar" width="100%" horizontalAlign="right" verticalAlign="middle">
			<s:Button id="ok" label="Open Resources" click="openResourcesButtonHandler()" width="120"/>
			<s:Button id="cancel" label="{CommonPlugin.getInstance().getMessage('cancel')}" click="cancelHandler()" width="80"/>			
		</s:HGroup>	
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" />
	</s:layout>
		
	<s:Label id="customLabel" fontWeight="bold"/>
	<s:TextArea id="multipleResourcesLinkTextArea" width="100%" height="100%" editable="false"/>
	<s:HGroup horizontalAlign="right" width="100%" >
		<s:Button label="Copy to clipboard" click="System.setClipboard(multipleResourcesLinkTextArea.text);" />
	</s:HGroup> 
	
	<s:Spacer width="100%" height="5" />
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke weight="2"/>
		</s:stroke>
	</s:Line>
	<s:Spacer width="100%" height="5" />
	
	<s:Label text="Open Resources from Link :" fontWeight="bold" />
	<s:TextArea id="openResourcesFromTextArea" minHeight="90" width="100%" height="100%">
		<s:creationComplete>
			<![CDATA[
				TextUtils.setTextComponentHint(openResourcesFromTextArea, 
					"Enter here a shared http link or enter only paths to openable resources separated by commas or newlines \n" +
					"E.g http://../flower-dev-center/main.jsp?openResources=text://organization/workspace/project/file.txt or \n" +
					"E.g diagram://organization/workspace/project/model.flower/|Diagram1, java://organization/workspace/project/MyClass.java"			
					);
			]]>
		</s:creationComplete>
	</s:TextArea>
	
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.layout.Workbench;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.utils.StringUtil;
			
			import org.flowerplatform.blazeds.BridgeEvent;
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.common.link.LinkProvider;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.editor.BasicEditorDescriptor;
			import org.flowerplatform.editor.EditorFrontend;
			import org.flowerplatform.editor.EditorPlugin;
			import org.flowerplatform.editor.remote.EditorStatefulClient;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.layout.IWorkbench;
			import org.flowerplatform.flexutil.layout.ViewLayoutData;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.flexutil.text.TextUtils;
			
			public var showForCurrentOpenResource:Boolean;

			private static const EDITOR_SUPPORT_SERVICE_ID:String = "editorSupport";
			
			private static const EDITOR_SUPPORT_GET_FRIENDLY_METHOD:String = "getFriendlyEditableResourcePathList";
			
			private static const EDITOR_SUPPORT_NAVIGATE_METHOD:String = "navigateFriendlyEditableResourcePathList";
			
			private var _popupHost:IPopupHost;
			
			private function creationCompleteHandler():void {
				CommunicationPlugin.getInstance().bridge.addEventListener(BridgeEvent.DISCONNECTED, bridgeDisconnectedHandler);
				
				if (showForCurrentOpenResource) {
					this.addElementAt(visibleEditorLinkArea, 0);	
					computeLinksFromEditors();
				} else {
					
				}
				customLabel.text = showForCurrentOpenResource ? 'Link to All Opened Resources :' : 'Link to Selected Resources :';
				_popupHost.addToControlBar(buttonBar);
			}
			
			/**
			 * Close dialog when disconnected.
			 */
			private function bridgeDisconnectedHandler(event:BridgeEvent):void {
				cancelHandler();
			}
						
//			/**
//			 * Navigates to the openable resources received as url parameter in the browser, just the first time the user logs in.
//			 * @flowerModelElementId _aQ54FEhHEeKn-dlTSOkszw
//			 */ 
//			public static function navigateOnceFromBrowserURLParameters():void {
//				if (CommonPlugin.getInstance().linkProvider.getOpenResources() == null) 
//					return;
//				navigate(CommonPlugin.getInstance().linkProvider.getOpenResources(), CommonPlugin.getInstance().linkProvider.getSelectResourceAtIndex());
//				CommonPlugin.getInstance().linkProvider.clearOpenResources();
//				CommonPlugin.getInstance().linkProvider.clearSelectResourceAtIndex();
//			}
//			
//			/**
//			 * @param projectExplorer if the dialog is shown from Project Explorer, this dialog may need to know about to take it's selection
//			 */ 
//			public static function showDialog(projectExplorer:Object /* ProjectExplorerTree */= null):void {
//				var dialog:URLGenerateNavigateDialog = new URLGenerateNavigateDialog();
//				dialog.currentState = projectExplorer != null ? PROJECT_EXPLORER_STATE : EDITORS_STATE;
//				dialog.showPopup(NaN, NaN, FlexGlobals.topLevelApplication as DisplayObject);
//
//				if (projectExplorer != null) {
//					dialog.computeLinkFromProjectExplorer(projectExplorer);
//				} else { 
//					dialog.computeLinksFromEditors();
//				}
//			}
//			
//			/**
//			 * When opened from Project Explorer the dialog can generate only for openable nodes.
//			 */ 
//			private function computeLinkFromProjectExplorer(projectExplorer:Object /* ProjectExplorerTree */):void {
//			 	var canonicalEditableResourcePathList:ArrayCollection /* of String */ = new ArrayCollection();
////				for each (var selectedNode:NavigatorTreeNode in projectExplorer.view.selection) {
//				for each (var selectedNode:Object in projectExplorer.view.selection) {
//					var canonicalEditableResourcePath:String = getCanonicalEditableResourcePathFromNavigatorTreeNode(selectedNode);
//					if (canonicalEditableResourcePath != null)
//						canonicalEditableResourcePathList.addItem(canonicalEditableResourcePath);
//				}
//				
//				CommunicationPlugin.getInstance().bridge.sendObject(
//					new InvokeServiceMethodServerCommand(
//						EDITOR_SUPPORT_SERVICE_ID,	EDITOR_SUPPORT_GET_FRIENDLY_METHOD, [canonicalEditableResourcePathList], null, 
//						function(friendlyEditableResourcePathList : ArrayCollection):void {
//							multipleResourcesLinkTextArea.text = createNavigableURL(friendlyEditableResourcePathList);
//						}));				
//			}
//			
			/**
			 * Generates 2 links one for the visible editor and one for all editors.
			 * For the last it also writes the tab to be selected.
			 */ 
			private function computeLinksFromEditors():void {
//				var workbench:Workbench = WebPlugin.getInstance().workbench;
				var workbench:Workbench = Workbench(FlexUtilGlobals.getInstance().workbench);
				
				var editorLayoutDataList:ArrayCollection /* of ViewLayoutData */ = new ArrayCollection();
				workbench.getAllViewLayoutData(null, editorLayoutDataList, true);
				
				if (editorLayoutDataList.length == 0)
					return; // No editors opened => nothing to show
				
				var canonicalEditableResourcePathList:ArrayCollection /* of String */= new ArrayCollection();
				
				for each (var editorLayoutData:ViewLayoutData in editorLayoutDataList) {
					canonicalEditableResourcePathList.addItem(getCanonicalEditableResourcePathFromEditorLayoutData(editorLayoutData));
				}
				
				var visibleEditorLayoutData:ViewLayoutData = workbench.getAllVisibleViewLayoutData(true /* only editors*/)[0];
				var visibleCanonicalEditableResourcePath:String = getCanonicalEditableResourcePathFromEditorLayoutData(visibleEditorLayoutData);
				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand(
						EDITOR_SUPPORT_SERVICE_ID,	EDITOR_SUPPORT_GET_FRIENDLY_METHOD, [canonicalEditableResourcePathList], null, 
						function(friendlyEditableResourcePathList : ArrayCollection):void {
							var indexOfSelectedResource:int = canonicalEditableResourcePathList.getItemIndex(visibleCanonicalEditableResourcePath);
							multipleResourcesLinkTextArea.text = createNavigableURL(friendlyEditableResourcePathList, indexOfSelectedResource);
						}));
				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand(
						EDITOR_SUPPORT_SERVICE_ID,	EDITOR_SUPPORT_GET_FRIENDLY_METHOD, [new ArrayCollection([visibleCanonicalEditableResourcePath])],	null, 
						function(friendlyEditableResourcePathList : ArrayCollection):void {
							visibleEditorLinkTextArea.text = createNavigableURL(friendlyEditableResourcePathList);
						}));
			}
			
//			/**
//			 * Internal helper method
//			 */
//			private static function getCanonicalEditableResourcePathFromNavigatorTreeNode(node:Object/*NavigatorTreeNode*/):String {
//				var editorDescriptor:BasicEditorDescriptor = EditorSupport.INSTANCE.getFirstEditorDescriptorForNode(node.contentTypeId);
//				if (editorDescriptor == null || !editorDescriptor.canCalculateFriendlyEditableResourcePath()) 
//					return null; // Only if the node is openable
////				var editableResourcePath:String = ProjectExplorerStatefulClient.getEditableResourcePathFromTreeNode(node) as String; 
//				var editableResourcePath:String = SingletonRefsFromPrePluginEra.projectExplorerStatefulClient_getEditableResourcePathFromTreeNodeFunction(node) as String; 
//				return editorDescriptor.calculateStatefulClientId(editableResourcePath);
//			}
//			
			/**
			 * Internal helper method
			 */
			private static function getCanonicalEditableResourcePathFromEditorLayoutData(editorLayoutData:ViewLayoutData):String {
				var workbench:Workbench = Workbench(FlexUtilGlobals.getInstance().workbench);
				var editorFrontend:EditorFrontend = workbench.layoutDataToComponent[editorLayoutData];
				
				var editorDescriptor:BasicEditorDescriptor = editorFrontend.editorStatefulClient.editorDescriptor;
				var editableResourcePath:String = editorFrontend.editorInput as String;
				return editorDescriptor.calculateStatefulClientId(editableResourcePath);
			}
			
			/**
			 * Given a list of paths it creates something like : http://fdc.com/fdc/main.jsp?openResources=path1,path2,path3&selectedResource=path2
			 * <p>
			 * <code>selectedResource</code> url parameter may be missing if an index of a path isn't specified (NaN).
			 */ 
			private function createNavigableURL(friendlyEditableResourcePathList:ArrayCollection /* of String */, indexOfSelectedResource:Number = NaN):String {
				if (friendlyEditableResourcePathList.length == 0)
					return null;
				
				var navigableURL:String = CommonPlugin.getInstance().linkProvider.getBrowserURLWithoutQuery() + "?" + LinkProvider.OPEN_RESOURCES + "=";
				var comma:String = "";
				for each (var friendlyEditableResourcePath:String in friendlyEditableResourcePathList) {
					navigableURL += comma + friendlyEditableResourcePath;
					comma = ",";
				}
				if (!isNaN(indexOfSelectedResource) && friendlyEditableResourcePathList.length > 1) 
					navigableURL += "&" + LinkProvider.SELECT_RESOURCE_AT_INDEX + "=" + indexOfSelectedResource;
				return navigableURL;
			}
			
			/**
			 * @flowerModelElementId _aQ7tREhHEeKn-dlTSOkszw
			 */
			private function openResourcesButtonHandler():void {
				var openResourcesText:String = StringUtil.trim(openResourcesFromTextArea.getStyle("color") != "0x999999" ? openResourcesFromTextArea.text : ""); // if null returns '' 
				if (openResourcesText.length == 0)  
					return; // No url or path to open.
				
				if (openResourcesText.indexOf("?") < 0) { // asume this is not an url link so it must be the paths separated by comma 
//					navigate(openResourcesText);
					cancelHandler();
					return; 
				}
				
				var urlParameters:Object = CommonPlugin.getInstance().linkProvider.parseURLQueryParameters(openResourcesText);
				if (urlParameters.openResources == null) {
					Alert.show("Incorrect format, the URL doesn't contain '" + LinkProvider.OPEN_RESOURCES + "' query parameter !");
					return;
				}
//				navigate(urlParameters.openResources, urlParameters.selectResourceAtIndex);
				cancelHandler();
			}			
						
			public function cancelHandler():void {		
				CommunicationPlugin.getInstance().bridge.removeEventListener(BridgeEvent.DISCONNECTED, bridgeDisconnectedHandler);
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);	
			}
			
			public function getActions(selection:IList):Vector.<IAction> {				
				return null;
			}
			
			public function getSelection():IList {				
				return null;
			}
			
			public function get popupHost():IPopupHost {
				return _popupHost;
			}
			
			public function set popupHost(value:IPopupHost):void {
				_popupHost = value;				
				popupHost.setLabel("URL Generate / Navigate");
				popupHost.setIcon(EditorPlugin.getInstance().getResourceUrl("images/external_link.png"));
			}
						
			/**
			 * Calls the server to trigger the processing and the openning of the correct editor with content.
			 */
//			private static function navigate(openResources:String, selectResourceAtIndex:int = -1):void {
//				CommunicationPlugin.getInstance().bridge.sendObject(
//					new InvokeServiceMethodServerCommand(
//						EDITOR_SUPPORT_SERVICE_ID,	EDITOR_SUPPORT_NAVIGATE_METHOD, 
//						[openResources, selectResourceAtIndex]));
//			}
			
			
		]]>
	</fx:Script>
</s:Group>