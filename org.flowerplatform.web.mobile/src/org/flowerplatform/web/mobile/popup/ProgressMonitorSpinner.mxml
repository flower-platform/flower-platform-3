<?xml version="1.0" encoding="utf-8"?>
<!--
	@author Cristina Constantinescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="org.flowerplatform.flexutil.popup.IProgressMonitor, org.flowerplatform.flexutil.popup.IPopupContent"
		 
		  creationComplete="creationCompleteHandler(event)">
			
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.flexutil.popup.IProgressMonitor;
			import org.flowerplatform.flexutil.popup.IProgressMonitorHandler;
									
			private static const TRACE_ENABLED:Boolean = true;
			
			private var progressMonitorHandler:IProgressMonitorHandler;
			
			private var allowCancellation:Boolean;
			private var title:String;
			
			protected function creationCompleteHandler(event:FlexEvent):void	{
				progressLabel.text = title;
				cancelButton.visible = allowCancellation;
			}
			
			public function setAllowCancellation(value:Boolean):IProgressMonitor {
				this.allowCancellation = value;
				return this;
			}
			
			public function setHandler(value:IProgressMonitorHandler):IProgressMonitor {
				this.progressMonitorHandler = value;
				return this;
			}
			
			public function setLabel(value:String):IProgressMonitor {
				progressLabel.text = value;
				return this;
			}
			
			public function setTitle(value:String):IProgressMonitor 	{
				this.title = value;
				return this;
			}
			
			public function setTotalWork(value:Number):IProgressMonitor {				
				return this;
			}
			
			public function setWorked(value:Number):IProgressMonitor {				
				return this;
			}
			
			public function show():void {		
				FlexUtilGlobals.getInstance().popupHandlerFactory.createPopupHandler()
					.setPopupContent(this)
					.setTitle(title)				
					.show();
			}
			
			public function close():void {				
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}			
			
			private function cancelButtonHandler():void {
				cancelButton.enabled = false;
				cancelButton.label = "Canceling...";
				progressMonitorHandler.attemptCancelProgressMonitor();
			}
			
			public function getActions(selection:IList):Vector.<IAction> {			
				return null;
			}
			
			public function getSelection():IList {
				return null
			}
			
			public function set popupHost(popupHost:IPopupHost):void {	
			}
						
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill><s:SolidColor color="#E9EBF5" /></s:fill>
	</s:Rect>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:BusyIndicator symbolColor="#66aaff" width="35" height="35"/>
		<s:Label id="progressLabel" color="#66aaff" fontWeight="bold" />	
		<s:Button id="cancelButton" label="Cancel" visible="false"/>
	</s:VGroup>
	
</s:Group>
