<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!---
@author Cristian Spiescu
-->
<!--<s:Application-->
<s:ViewNavigatorApplication 
	applicationDPI="160" creationComplete="creationCompleteHandler()"
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mobile="org.flowerplatform.web.mobile.*">
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mobile "org.flowerplatform.web.mobile.*";
		@namespace texteditor "com.crispico.flower.texteditor.*";
		
		.borderlessButton {
			/* used for the buttons shown on diagrams */
			skinClass: ClassReference("spark.skins.mobile.supportClasses.ButtonSkinBase");
		}
		
		s|TextInput {
			skinClass: ClassReference("org.flowerplatform.web.mobile.text.ValidatingTextInputSkin")
		}
		
		texteditor|SyntaxTextEditor {
			skinClass: ClassReference("org.flowerplatform.web.mobile.text.RichEditableTextAreaSkin");
		}
		
		s|FormItem {
			skinClass: ClassReference("org.flowerplatform.flexutil.form.FlowerFormItemSkin");
		}
		
		s|ActionBar s|Label {
			color: #FFFFFF;
			fontSize: 28;
			fontWeight: bold;
			paddingLeft: 5;
			alignmentBaseline: descent;
		}
		
		@media (application-dpi: 160) {
			s|ActionBar s|Label {
				fontSize: 18;
			}
		}
		
		@media (application-dpi: 320) {
			s|ActionBar s|Label {
				fontSize: 36;
			}
		}

	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			
			import org.flowerplatform.editor.mindmap.MindMapModelPlugin;
			import org.flowerplatform.blazeds.BridgeEvent;
			import org.flowerplatform.codesync.CodeSyncPlugin;
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.editor.EditorPlugin;
			import org.flowerplatform.editor.java.JavaEditorPlugin;
			import org.flowerplatform.editor.model.EditorModelPlugin;
			import org.flowerplatform.editor.text.EditorTextPlugin;
			import org.flowerplatform.editor.text.java.EditorTextJavaPlugin;
			import org.flowerplatform.emf_model.notation.MindMapNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.plugin.AbstractFlexPlugin;
			import org.flowerplatform.flexutil.plugin.FlexPluginDescriptor;
			import org.flowerplatform.flexutil.popup.AlertPopupMessageBoxFactory;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.git.common.GitCommonPlugin;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			import org.flowerplatform.web.mobile.RecentActivityView;
			import org.flowerplatform.web.mobile.SplitView;
			import org.flowerplatform.web.mobile.popup.ProgressMonitorSpinnerHandlerFactory;
			import org.flowerplatform.web.mobile.popup.WrapperViewPopupHandlerFactory;
			
			public static function get mainApp():MainMobile {
				return MainMobile(FlexGlobals.topLevelApplication);
			}
			
			/**
			 * We need to inject the plugin URL, so that the plugins can find resources and messages.
			 */
			private function setDescriptorWithUrl(plugin:AbstractFlexPlugin, url:String):AbstractFlexPlugin {
				var descriptor:FlexPluginDescriptor = new FlexPluginDescriptor();
				descriptor.url = url;
				plugin.flexPluginDescriptor = descriptor;
				return plugin;
			}
			
			private var plugins:Array = [
				setDescriptorWithUrl(new CommonPlugin(), 'servlet/public-resources/org.flowerplatform.common/swc/org.flowerplatform.common.swc|library.swf'),
				setDescriptorWithUrl(new CommunicationPlugin(), 'servlet/public-resources/org.flowerplatform.communication/swc/org.flowerplatform.communication.swc|library.swf'),
				setDescriptorWithUrl(new EditorPlugin(), 'servlet/public-resources/org.flowerplatform.editor/swc/org.flowerplatform.editor.swc|library.swf'),
				setDescriptorWithUrl(new EditorTextPlugin(), 'servlet/public-resources/org.flowerplatform.editor.text/swc/org.flowerplatform.editor.text.swc|library.swf?pluginClass=EditorTextPlugin'),
				setDescriptorWithUrl(new EditorTextJavaPlugin(), 'servlet/public-resources/org.flowerplatform.editor.text.java/swc/org.flowerplatform.editor.text.java.swc|library.swf?pluginClass=EditorTextJavaPlugin'),
				setDescriptorWithUrl(new EditorModelPlugin(), 'servlet/public-resources/org.flowerplatform.editor.model/swc/org.flowerplatform.editor.model.swc|library.swf?pluginClass=EditorModelPlugin'),
				setDescriptorWithUrl(new JavaEditorPlugin(), 'servlet/public-resources/org.flowerplatform.editor.java/swc/org.flowerplatform.editor.java.swc|library.swf?pluginClass=JavaEditorPlugin'),
				setDescriptorWithUrl(new WebCommonPlugin(), 'servlet/public-resources/org.flowerplatform.web/swc/org.flowerplatform.web.swc|library.swf'),
				setDescriptorWithUrl(new GitCommonPlugin(), 'servlet/public-resources/org.flowerplatform.web.git/swc/org.flowerplatform.web.git.swc|library.swf'),
				setDescriptorWithUrl(new CodeSyncPlugin(), 'servlet/public-resources/org.flowerplatform.codesync/swc/org.flowerplatform.codesync.swc|library.swf?pluginClass=CodeSyncPlugin'),
				setDescriptorWithUrl(new MindMapModelPlugin(), 'servlet/public-resources/org.flowerplatform.editor.mindmap/swc/org.flowerplatform.editor.mindmap.swc|library.swf?pluginClass=MindMapModelPlugin'),
				setDescriptorWithUrl(new SvnCommonPlugin(), 'servlet/public-resources/org.flowerplatform.web.svn/swc/org.flowerplatform.web.svn.swc|library.swf')
			];
			
			private function startPlugins():void {
				for each (var plugin:AbstractFlexPlugin in plugins) {
					plugin.preStart();
				}
				for each (plugin in plugins) {
					plugin.start();
				}
			}
			
			protected function creationCompleteHandler():void {
				navigator.defaultPushTransition = crossFadeTransition;
				navigator.defaultPopTransition = crossFadeTransition;
				navigator.navigationContent = mainNavigatorContent.navigatorContent;
				navigator.pushView(RecentActivityView);
				
				FlexUtilGlobals.getInstance().isMobile = true;	
				FlexUtilGlobals.getInstance().popupHandlerFactory = new WrapperViewPopupHandlerFactory();
				FlexUtilGlobals.getInstance().messageBoxFactory = new AlertPopupMessageBoxFactory();
				FlexUtilGlobals.getInstance().progressMonitorHandlerFactory = new ProgressMonitorSpinnerHandlerFactory();
				FlexUtilGlobals.getInstance().rootUrl = "http://localhost:8080/org.flowerplatform.web.app/";
				
				
				startPlugins();
				
				CommunicationPlugin.getInstance().bridge.addEventListener(BridgeEvent.WELCOME_RECEIVED_FROM_SERVER, welcomeReceivedFromServerHandler);
			}
			
			protected function welcomeReceivedFromServerHandler(event:BridgeEvent):void {
				navigator.pushView(SplitView);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mobile:MainNavigatorContent id="mainNavigatorContent" navigator="{navigator}"/>
		<s:CrossFadeViewTransition id="crossFadeTransition"/>
	</fx:Declarations>
	<!--	<s:ViewNavigator id="navigator1" width="100%" height="100%" firstView="org.flowerplatform.web.mobile.RecentActivityView"
	navigationContent="{mainNavigatorContent.navigatorContent}" defaultPushTransition="{crossFadeTransition}" defaultPopTransition="{crossFadeTransition}">
	</s:ViewNavigator>
	</s:Application>-->
</s:ViewNavigatorApplication>