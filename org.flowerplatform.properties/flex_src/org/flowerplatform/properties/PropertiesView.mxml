<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="182" creationComplete="creationCompleteHandler(event)"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, mx.managers.IFocusManagerComponent">
	<s:layout>
		<s:VerticalLayout useVirtualLayout="true"/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.layout.event.ViewRemovedEvent;
			import org.flowerplatform.flexutil.selection.ISelectionForServerProvider;
			import org.flowerplatform.flexutil.selection.ISelectionProvider;
			import org.flowerplatform.flexutil.selection.SelectionChangedEvent;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			protected var _viewHost:IViewHost;
			
			public var selection:IList;
			public var selectionForServer:IList;

			protected function creationCompleteHandler(flexvent:FlexEvent):void {				
				propertyList.itemRenderer = new ClassFactory(PropertyItemRenderer);
				propertyList.dataProvider = new ArrayList();
				// get selection from active provider to populate properties list with data
				var activeSelectionProvider:ISelectionProvider = FlexUtilGlobals.getInstance().selectionManager.activeSelectionProvider;
				if (activeSelectionProvider != null && activeSelectionProvider is ISelectionForServerProvider) {
					// create dummy event
					var event:SelectionChangedEvent = new SelectionChangedEvent();
					event.selection = activeSelectionProvider.getSelection();
					event.selectionForServer = ISelectionForServerProvider(activeSelectionProvider).convertSelectionToSelectionForServer(event.selection);
					
					selectionChangedHandler(event);
				}
				// listen for selection changes
				FlexUtilGlobals.getInstance().selectionManager.addEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
				IEventDispatcher( _viewHost).addEventListener(ViewRemovedEvent.VIEW_REMOVED, viewRemovedHandler);
			}
			
			private function viewRemovedHandler(event:ViewRemovedEvent):void {
				FlexUtilGlobals.getInstance().selectionManager.removeEventListener(SelectionChangedEvent.SELECTION_CHANGED, selectionChangedHandler);
			}
						
			public function get viewHost():IViewHost {
				return _viewHost;
			}
			
			public function set viewHost(value:IViewHost):void {
				_viewHost = value;
			}
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
						
			private function selectionChangedHandler(event:SelectionChangedEvent):void {
				selection = event.selection;

				// reset data
				icon.source = null;
				label.text = null;
				IList(propertyList.dataProvider).removeAll();

				// get properties from providers
				for (var i:int=0; i < PropertiesPlugin.getInstance().propertiesProviders.length(); i++) {
					var propertiesProvider:IPropertiesProvider = IPropertiesProvider(PropertiesPlugin.getInstance().propertiesProviders.getItemAt(i));
					addPropertiesToList(propertiesProvider.getProperties(event.selection));			
				}
				
				// get properties from server
				if (event.selectionForServer == null || event.selectionForServer.length == 0) {
					return;
				}
				CommunicationPlugin.getInstance().bridge.sendObject(new InvokeServiceMethodServerCommand(
					"propertiesService", "getProperties", 
					[event.selectionForServer], 
					this, function(object:Object):void {
						addPropertiesToList(object);		
						selectionForServer = event.selectionForServer;
					}));	
			}
			
			private function addPropertiesToList(object:Object):void {
				if (object == null) {
					return;
				}
				for (var j:int=0; j < IList(object.propertiesList).length; j++) {
					var property:Object = IList(object.propertiesList).getItemAt(j);
					propertyList.dataProvider.addItem(property);
				}
				if (object.icon != null) {
					icon.source = String(object.icon);
				}
				if (object.label != null) {
					label.text = String(object.label);
				}
			}
			
			public function setPropertyValue(propertyName:String, propertyValue:Object):void {
				for (var i:int=0; i < PropertiesPlugin.getInstance().propertiesProviders.length(); i++) {
					var propertiesProvider:IPropertiesProvider = IPropertiesProvider(PropertiesPlugin.getInstance().propertiesProviders.getItemAt(i));
					if (propertiesProvider.setPropertyValue(selection, propertyName, propertyValue)) {
						return; // property set by one provider, so stop
					}
				}
				
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand(
						"propertiesService",
						"setProperties",
						[selectionForServer, propertyName, propertyValue]
					)
				);
			}
			
		]]>
	</fx:Script>
	<s:HGroup id = "iconAndLabel" paddingLeft="5">
		<s:Image id="icon" height="100%"/>
		<s:Label id="label" height ="100%" verticalAlign="middle"/>	
	</s:HGroup>

	<s:List id="propertyList" width="100%" height="100%">

	</s:List>
</s:Group>
