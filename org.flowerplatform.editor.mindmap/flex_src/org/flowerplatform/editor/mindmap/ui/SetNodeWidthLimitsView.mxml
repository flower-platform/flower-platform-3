<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!---
@author Cristina Constantinescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:local="org.flowerplatform.editor.mindmap.ui.*"
		 implements="org.flowerplatform.flexutil.popup.IPopupContent"
		 creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.editor.mindmap.MindMapModelPlugin;
			import org.flowerplatform.editor.mindmap.remote.MindMapDiagramEditorStatefulClient;
			import org.flowerplatform.editor.model.remote.DiagramEditorStatefulClient;
			import org.flowerplatform.emf_model.notation.MindMapNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			
			private var _popupHost:IPopupHost;
			
			public var selection:IList;
			
			[Bindable]
			public var currentMinWidth:Number;
			[Bindable]
			public var currentMaxWidth:Number;
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			public function getSelection():IList {
				return null;
			}
			
			public function get popupHost():IPopupHost {
				return _popupHost;
			}
			
			public function set popupHost(popupHost:IPopupHost):void {
				_popupHost = popupHost;
				_popupHost.setLabel(MindMapModelPlugin.getInstance().getMessage('setWidthLimits.action.label'));
				_popupHost.setIcon(MindMapModelPlugin.getInstance().getResourceUrl('images/images.png'));
			}
					
			protected function creationCompleteHandler(event:FlexEvent):void {
				popupHost.addToControlBar(buttonBar);
			}
			
			public function okHandler():void {
				// validate form
				if (Validator.validateAll(validators).length > 0) {
					return;
				}				
				
				popupHost.showSpinner(CommonPlugin.getInstance().getMessage("spinner.processing"));
				MindMapDiagramEditorStatefulClient(DiagramEditorStatefulClient.TEMP_INSTANCE).service_setMinMaxWidth(
					selection, Number(nodeMinWidth.text), Number(nodeMaxWidth.text),
					this, setMinMaxWidthCallbackHandler);		
			}
			
			protected function cancelHandler():void {
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);
			}
			
			private function setMinMaxWidthCallbackHandler(value:Boolean):void {
				popupHost.hideSpinner();
				if (value) {
					cancelHandler();
				}
			}
			
		]]>
	</fx:Script>
		
	<fx:Declarations>
		<fx:Array id="validators">
			<s:NumberValidator id="minWidthValidator" source="{nodeMinWidth}" property="text" minValue="1" maxValue="{Number(nodeMaxWidth.text)}"/>
			<s:NumberValidator id="maxWidthValidator" source="{nodeMaxWidth}" property="text" minValue="{Number(nodeMinWidth.text)}" />			
		</fx:Array>
		
		<s:HGroup id="buttonBar" width="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button id="ok" label="{CommonPlugin.getInstance().getMessage('ok')}" click="okHandler()" width="80"/>
			<s:Button id="cancel" label="{CommonPlugin.getInstance().getMessage('cancel')}" click="cancelHandler()" width="80"/>			
		</s:HGroup>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout gap="3" />
	</s:layout>
	
	<s:Form id="form" height="100%" width="100%">		
		<s:FormItem label="{MindMapModelPlugin.getInstance().getMessage('setWidthLimits.minimumWidth')}" width="100%">
			<s:TextInput id="nodeMinWidth" text="{currentMinWidth}" width="100%" creationComplete="{callLater(nodeMinWidth.setFocus)}" />		
		</s:FormItem>	
		<s:FormItem label="{MindMapModelPlugin.getInstance().getMessage('setWidthLimits.maximumWidth')}" width="100%">
			<s:TextInput id="nodeMaxWidth" text="{currentMaxWidth}" width="100%" />		
		</s:FormItem>	
	</s:Form>
	
</s:Group>
