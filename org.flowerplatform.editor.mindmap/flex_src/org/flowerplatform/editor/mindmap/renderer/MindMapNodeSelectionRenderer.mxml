<?xml version="1.0" encoding="utf-8"?>
<!---
@author Cristina Constantinescu
-->
<selection:AbstractSelectionRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
									xmlns:s="library://ns.adobe.com/flex/spark" 
									xmlns:mx="library://ns.adobe.com/flex/mx" 
									xmlns:selection="org.flowerplatform.flexdiagram.renderer.selection.*"
									xmlns:ui="org.flowerplatform.flexdiagram.ui.*">
	
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			import mx.core.IVisualElementContainer;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			
			import org.flowerplatform.emf_model.notation.Diagram;
			import org.flowerplatform.emf_model.notation.MindMapNode;
			import org.flowerplatform.flexdiagram.DiagramShell;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexdiagram.mindmap.controller.IMindMapControllerProvider;
			import org.flowerplatform.flexdiagram.renderer.DiagramRenderer;
			
			import spark.primitives.Ellipse;
						
			[Bindable]
			public var circleRadius:int = 10;
			
			public var padding:int = 3;
			
			override public function activate(diagramShell:DiagramShell, target:IVisualElement):void {
				super.activate(diagramShell, target);			
					
				DisplayObject(target).addEventListener(ResizeEvent.RESIZE, handleTargetMoveResize);				
				// update position
				handleTargetMoveResize(null);				
				if (MindMapNode(getTargetModel()).hasChildren && 
					IMindMapControllerProvider(diagramShell.getControllerProvider(getTargetModel())).getMindMapModelController(getTargetModel()).getParent(getTargetModel()) != null) {	
					vLine.visible = !getTargetModel().expanded;
					diagramShell.diagramRenderer.addElement(circle);
				}
			}
			
			/**
			 * 
			 * Called when we don't need the anchors, 
			 * and also when we don't want the anchors shown.
			 * @flowerModelElementId _b1gjZb8REd6XgrpwHbbsYQ
			 */
			override public function deactivate():void {
				try {
					diagramShell.diagramRenderer.removeElement(circle);
				} catch (e:ArgumentError) {					
				}				
							
				// remove resize listeners				
				DisplayObject(target).removeEventListener(ResizeEvent.RESIZE, handleTargetMoveResize);					
				super.deactivate();
			}
	
			protected function handleTargetMoveResize(event:Event):void {
				setLayoutBoundsPosition(target.x, target.y);
				setLayoutBoundsSize(target.width, target.height);
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {			
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				graphics.clear();
				graphics.lineStyle(2, 0x3C37FE);		
				graphics.drawRoundRect(-padding, -padding, target.width + padding * 2, target.height + padding * 2, 10, 10);			
				
				if (getTargetModel().side == MindMapDiagramShell.LEFT) {
					circle.x = getTargetModel().x - circleRadius * 2;						
					circle.y = getTargetModel().y + getTargetModel().height / 2 - circleRadius;
				} else if (getTargetModel().side == MindMapDiagramShell.RIGHT) {
					circle.x = getTargetModel().x + getTargetModel().width;
					circle.y = getTargetModel().y + getTargetModel().height / 2 - circleRadius;							
				}
			}
			
			protected function circle_mouseClickHandler(event:MouseEvent):void {
				IMindMapControllerProvider(diagramShell.getControllerProvider(getTargetModel())).getMindMapModelController(getTargetModel()).setExpanded(getTargetModel(), !getTargetModel().expanded);
				getTargetModel().expanded = !getTargetModel().expanded;	
				vLine.visible = !getTargetModel().expanded;
				
				if (!getTargetModel().expanded) {
					MindMapDiagramShell(diagramShell).removeModelFromRootChildren(getTargetModel(), true);
					diagramShell.shouldRefreshVisualChildren(diagramShell.rootModel);
				}
				event.preventDefault();
				event.stopImmediatePropagation();
			}
			
			protected function circle_mouseDownUpHandler(event:MouseEvent):void {
				event.preventDefault();
				event.stopImmediatePropagation();
			}
					
		]]>
	</fx:Script>

	<fx:Declarations>
			<s:Group id="circle" 
					 click="circle_mouseClickHandler(event)" 
					 mouseDown="circle_mouseDownUpHandler(event)" mouseUp="circle_mouseDownUpHandler(event)"
					 width="{circleRadius * 2}" height="{circleRadius * 2}" >		
				<s:layout>				
					<s:BasicLayout />
				</s:layout>				
				<s:Ellipse id="ellipse" width="100%" height="100%" >				
					<s:stroke>
						<s:SolidColorStroke color="#808080" weight="1" />
					</s:stroke>
					<s:fill>
						<s:SolidColor color="white" />
					</s:fill>			
				</s:Ellipse>
				<s:Line id="hLine" yFrom="{circleRadius -1/2}"  xFrom="{circleRadius/2}" yTo="{circleRadius -1/2}" xTo="{circleRadius * 2 - circleRadius/2}">
					<s:stroke>
						<s:SolidColorStroke color="#808080" weight="1" />
					</s:stroke>
				</s:Line>
				<s:Line id="vLine" xFrom="{circleRadius - 1/2}"  yFrom="{circleRadius/2}" xTo="{circleRadius - 1/2}" yTo="{circleRadius * 2 - circleRadius/2}">
					<s:stroke>
						<s:SolidColorStroke color="#808080" weight="1" />
					</s:stroke>
				</s:Line>
			</s:Group>
		
	</fx:Declarations>
	
</selection:AbstractSelectionRenderer>
