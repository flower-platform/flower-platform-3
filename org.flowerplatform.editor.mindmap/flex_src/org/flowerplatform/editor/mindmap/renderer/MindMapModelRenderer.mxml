<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!---
	@author Cristina Constantinescu
-->
<s:IconItemRenderer								
				xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 				
				 xmlns:model="org.flowerplatform.flexdiagram.samples.mindmap.model.*"
				 implements="org.flowerplatform.flexdiagram.renderer.IDiagramShellAware"
				minWidth="10" minHeight="16" updateComplete="updateCompleteHandler(event)" creationComplete="creationCompleteHandler(event)"
				iconFunction="getImage" doubleClickEnabled="true" doubleClick="doubleClickHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElementContainer;
			
			import org.flowerplatform.flexdiagram.mindmap.controller.IMindMapControllerProvider;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			
			import org.flowerplatform.editor.mindmap.MindMapModelPlugin;
			import org.flowerplatform.editor.mindmap.controller.MindMapNodeRendererController;
			import org.flowerplatform.editor.model.remote.DiagramEditorStatefulClient;
			import org.flowerplatform.emf_model.notation.MindMapNode;
			import org.flowerplatform.emf_model.notation.View;
			import org.flowerplatform.flexdiagram.DiagramShell;
			import org.flowerplatform.flexdiagram.controller.model_extra_info.DynamicModelExtraInfoController;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexutil.FlexUtilGlobals;

			private static const circleRadius:int = 3;
								
			private var _diagramShell:DiagramShell;
			private var creationComplete:Boolean = false;
			
			public function get diagramShell():DiagramShell {
				return _diagramShell;
			}
			
			public function set diagramShell(value:DiagramShell):void {
				_diagramShell = value;
			}
			
			override public function set data(value:Object):void {
				if (super.data != null) {
					data.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
					View(data).removeEventListener(DiagramEditorStatefulClient.VIEW_DETAILS_UPDATED_EVENT, viewDetailsUpdatedHandler);			
				}
				super.data = value;
			
				if (data != null) {
					data.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
					View(data).addEventListener(DiagramEditorStatefulClient.VIEW_DETAILS_UPDATED_EVENT, viewDetailsUpdatedHandler);
					x = data.x;
					y = data.y;
//					minWidth = data.width;
//					minHeight = data.height;
					
					if (getNode().viewDetails != null) {
						viewDetailsUpdatedHandler(null);
					}				
				}
			}
			
			protected function viewDetailsUpdatedHandler(event:Event):void {
				label = getNode().viewDetails.text;
				if (iconDisplay) {
					iconDisplay.source = getImage(null);					
				}
				invalidateDisplayList();
			}
			
			private function getImage(object:Object):Object {
				if (View(data).viewDetails) {
					var icon:String = View(data).viewDetails.icon;
					return FlexUtilGlobals.getInstance().createAbsoluteUrl(MindMapModelPlugin.getInstance().getResourceUrl(icon));
				}
				return null;
			}
			
			private function modelChangedHandler(event:PropertyChangeEvent):void {
				switch (event.property) {
					case "x":
						x = getNode().x;						
						break;
					case "y":
						y = getNode().y;						
						break;
					case "height":
						minHeight = getNode().height;					
						getDynamicObject(data).shouldRefreshPosition = true;						
						break;
					case "width":					
						minWidth = getNode().width;
						getDynamicObject(data).shouldRefreshPosition = true;					
						break;
					case "expanded":	
					case "hasChildren":	
						invalidateDisplayList();			
						var selectionRenderer:UIComponent = UIComponent(DynamicModelExtraInfoController(diagramShell.getControllerProvider(data).getModelExtraInfoController(data)).getDynamicObject(data).selectionRenderer);
						if (selectionRenderer != null) {
							selectionRenderer.invalidateDisplayList();
						}
						break;
				}			
			
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {			
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				graphics.clear();
				graphics.lineStyle(1, 0x808080);
				graphics.beginFill(0xCCCCCC, 0);
				graphics.drawRoundRect(0, 0, unscaledWidth, unscaledHeight, 10, 10);		
				
				if (getNode() != null && getNode().hasChildren && getNode().expanded == false) {
					if (getNode().side == MindMapDiagramShell.LEFT) {
						graphics.drawCircle(-circleRadius, height/2, circleRadius);
					} else if (data.side == MindMapDiagramShell.RIGHT) {						
						graphics.drawCircle(width + circleRadius, height/2, circleRadius);
					}
				}
			}
			
			override protected function setElementSize(element:Object, width:Number, height:Number):void {
				super.setElementSize(element, width, height);
				if (element == labelDisplay || element == iconDisplay) {
					if (width != 0 && data != null && data.width != width && !isNaN(width)) {
						getNode().setWidth(this.width);
						getDynamicObject(getNode()).shouldRefreshPosition = true;
					}
					if (height != 0 && data != null && data.height != height && !isNaN(height)) {
						getNode().setHeight(this.height);
						getDynamicObject(getNode()).shouldRefreshPosition = true;						
					}
				}
			}
			
			private function getNode():MindMapNode {
				return MindMapNode(data);
			}
			
			protected function updateCompleteHandler(event:FlexEvent):void {
				if (data != null && getDynamicObject(data).shouldRefreshPosition && !parentRefreshesPosition(data)) {		
					MindMapDiagramShell(diagramShell).refreshNodePositions(data);								
				}			
				if (data != null) {
					MindMapNodeRendererController(MindMapDiagramShell(diagramShell).getControllerProvider(data).getRendererController(data)).updateConnectors(data);
					getDynamicObject(data).shouldRefreshPosition = false;
				}
			}
			
			private function getDynamicObject(model:Object):Object {
				return DynamicModelExtraInfoController(diagramShell.getControllerProvider(model).getModelExtraInfoController(model)).getDynamicObject(model);
			}
			
			private function parentRefreshesPosition(model:Object):Boolean {
				var parent:Object = MindMapDiagramShell(diagramShell).getModelController(model).getParent(model);
				if (parent != null) {
					if (getDynamicObject(parent).shouldRefreshPosition) {
						return true;
					}
					return parentRefreshesPosition(parent);
				}
				return false;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				if (data != null) {					
					var parent:Object = MindMapDiagramShell(diagramShell).getModelController(data).getParent(data);
					if (parent != null) {
						getDynamicObject(parent).shouldRefreshPosition = true;
						MindMapDiagramShell(diagramShell).refreshNodePositions(parent);	
					}
				}	

			}
			
			protected function doubleClickHandler(event:MouseEvent):void {
				IMindMapControllerProvider(diagramShell.getControllerProvider(data)).getMindMapModelController(data).setExpanded(data, !getNode().expanded);
				getNode().expanded = !getNode().expanded;	
								
				if (!getNode().expanded) {
					MindMapDiagramShell(diagramShell).removeModelFromRootChildren(getNode(), true);
					diagramShell.shouldRefreshVisualChildren(diagramShell.rootModel);
				}
			}
			
		]]>
	</fx:Script>
	
</s:IconItemRenderer>