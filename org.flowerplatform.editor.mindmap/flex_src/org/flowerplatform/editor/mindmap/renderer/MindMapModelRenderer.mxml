<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!---
@author Cristina Constantinescu
-->
<s:DataRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="org.flowerplatform.flexdiagram.renderer.IDiagramShellAware" 
		 initialize="initializeHandler(event)" cacheAsBitmap="true">
		
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.core.DPIClassification;
			import mx.core.FlexGlobals;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			
			import org.flowerplatform.editor.mindmap.MindMapModelPlugin;
			import org.flowerplatform.editor.model.remote.DiagramEditorStatefulClient;
			import org.flowerplatform.emf_model.notation.MindMapNode;
			import org.flowerplatform.emf_model.notation.View;
			import org.flowerplatform.flexdiagram.DiagramShell;
			import org.flowerplatform.flexdiagram.controller.model_extra_info.DynamicModelExtraInfoController;
			import org.flowerplatform.flexdiagram.mindmap.MindMapDiagramShell;
			import org.flowerplatform.flexdiagram.tool.event.ZoomPerformedEvent;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.FlowerArrayList;
			
			import spark.core.ContentCache;
			import spark.core.IContentLoader;
			import spark.primitives.BitmapImage;
			
			private static const circleRadius:int = 3;
			
			private var _diagramShell:MindMapDiagramShell;
								
			protected var iconDisplays:IList;
			
			private var _icons:FlowerArrayList = new FlowerArrayList();
			
			private static var imageCache:ContentCache;
			
			public function get icons():FlowerArrayList {
				return _icons;
			}
						
			public function set icons(value:FlowerArrayList):void {
				if (value == _icons)
					return;
				if (value == null) {
					_icons.removeAll();
				} else {
					var i:int;
					var j:int = 0;
					if (_icons.length > 0 && value.length > 0) {
						while (j < value.length && j < _icons.length) {
							BitmapImage(iconDisplays.getItemAt(j)).source = value.getItemAt(j);
							j++;
						}
					}
					if (j < _icons.length) {
						i = j;
						while (i < iconDisplays.length)  {
							removeIconDisplay(BitmapImage(iconDisplays.getItemAt(i)));
						}
					}
					if (j < value.length) {
						for (i = j; i < value.length; i++) {
							addIconDisplay(value.getItemAt(i));
						}
					}
					_icons = value;
				}			
			}
			
			protected function addIconDisplay(icon:Object):void {
				var iconDisplay:BitmapImage = new BitmapImage();
				iconDisplay.contentLoader = imageCache;
				iconDisplay.source = icon;
				
				addElementAt(iconDisplay, numElements - 1);
								
				if (iconDisplays == null) {
					iconDisplays = new ArrayList();
				}
				iconDisplays.addItem(iconDisplay);
			}

			protected function removeIconDisplay(iconDisplay:BitmapImage):void {
				removeElement(iconDisplay);
				iconDisplays.removeItemAt(iconDisplays.getItemIndex(iconDisplay));
				
				invalidateSize();
			}			
			
			public function get diagramShell():DiagramShell {
				return _diagramShell;
			}
			
			public function set diagramShell(value:DiagramShell):void {
				_diagramShell = MindMapDiagramShell(value);
			}
			
			private function get node():MindMapNode {
				return MindMapNode(data);
			}
			
			public function get applicationDPI():Number	{
				return FlexGlobals.topLevelApplication.applicationDPI;
			}
			
			private function get dynamicObject():Object {
				return DynamicModelExtraInfoController(diagramShell.getControllerProvider(node).getModelExtraInfoController(node)).getDynamicObject(node);
			}
			
			override public function set data(value:Object):void {
				if (super.data != null) {
					data.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
					View(data).removeEventListener(DiagramEditorStatefulClient.VIEW_DETAILS_UPDATED_EVENT, viewDetailsUpdatedHandler);					
				}
				
				super.data = value;
				
				if (data != null) {
					data.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
					View(data).addEventListener(DiagramEditorStatefulClient.VIEW_DETAILS_UPDATED_EVENT, viewDetailsUpdatedHandler);
					
					x = dynamicObject(node).x;
					y = dynamicObject(node).y;
					
					if (node.viewDetails != null) {
						viewDetailsUpdatedHandler(null);
					}
				}
			}
				
			protected function initializeHandler(event:FlexEvent):void {				
				addEventListener(ResizeEvent.RESIZE, resizeHandler);
				addEventListener(ZoomPerformedEvent.ZOOM_PERFORMED, zoomPerformedHandler);
				
				if (imageCache == null) {
					imageCache = new ContentCache();
					imageCache.enableCaching = true;
					imageCache.maxCacheEntries = 100;
				}
				
				if (!FlexUtilGlobals.getInstance().isMobile) {
					minHeight = 22;
				} else {
					switch (applicationDPI) {
						case DPIClassification.DPI_320:	{
							minHeight = 88;
							break;
						}
						case DPIClassification.DPI_240:	{
							minHeight = 66;
							break;
						}
						default: {
							// default PPI160
							minHeight = 44;
							break;
						}
					}
				}
				
				setStyle("verticalGap", 0);
				setStyle("iconsGap", 1);
			}
					
			private function resizeHandler(event:ResizeEvent):void {
				dynamicObject().width = width;
				dynamicObject().height = height;
														
				var parent:Object = diagramShell.getControllerProvider(node).getModelChildrenController(node).getParent(node);
				if (parent is MindMapNode) {						
					_diagramShell.refreshNodePositions(parent);	
				} else { // refresh root node
					var rootModel:Object = diagramShell.getControllerProvider(diagramShell.rootModel)
						.getModelChildrenController(diagramShell.rootModel).getChildren(diagramShell.rootModel).getItemAt(0);
					_diagramShell.refreshNodePositions(rootModel);
				}				
			}						
			
			protected function viewDetailsUpdatedHandler(event:Event):void {
				if (node.viewDetails.hasOwnProperty("text")) {
					labelDisplay.text = node.viewDetails.text;
				}
				
				if (node.viewDetails.hasOwnProperty("minWidth")) {
					minWidth = node.viewDetails.minWidth;
				}
				if (node.viewDetails.hasOwnProperty("maxWidth")) {
					maxWidth = node.viewDetails.maxWidth;
				}			
							
				if (node.viewDetails.hasOwnProperty("icons")) {
					var nodeIcons:ArrayCollection = node.viewDetails.icons;
					var iconsURLs:Array = new Array();
					for (var i:int = 0; i < nodeIcons.length; i++) {
						iconsURLs.push(FlexUtilGlobals.getInstance().createAbsoluteUrl(MindMapModelPlugin.getInstance().getResourceUrl(String(nodeIcons.getItemAt(i)))));
					}
					this.icons = new FlowerArrayList(iconsURLs);
				}
				invalidateSize();
				invalidateDisplayList();
			}
			
			private function modelChangedHandler(event:PropertyChangeEvent):void {
				switch (event.property) {
					case "x":
						x = dynamicObject().x;						
						break;
					case "y":
						y = dynamicObject().y;						
						break;
				}
			}
					
			protected function zoomPerformedHandler(event:ZoomPerformedEvent):void {
				invalidateSize();				
				invalidateDisplayList();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				graphics.clear();
				graphics.lineStyle(1, 0x808080);
				graphics.beginFill(0xCCCCCC, 0);
				graphics.drawRoundRect(0, 0, unscaledWidth, unscaledHeight, 10, 10);		
				
				if (node != null && node.viewDetails != null && node.viewDetails.hasChildren && node.viewDetails.expanded == false) {
					if (node.viewDetails.side == MindMapDiagramShell.LEFT) {
						graphics.drawCircle(-circleRadius, height/2, circleRadius);
					} else if (node.viewDetails.side == MindMapDiagramShell.RIGHT) {						
						graphics.drawCircle(width + circleRadius, height/2, circleRadius);
					}
				}
			}
			
			override public function validateDisplayList():void {
				super.validateDisplayList();
				
				if (iconDisplays && iconDisplays.length > 0) {
					for (var i:int=0; i < iconDisplays.length; i++) {
						var iconDisplay:BitmapImage = BitmapImage(iconDisplays.getItemAt(i));
						iconDisplay.validateDisplayList();
					}
				}
			}
			
			override public function validateProperties():void {
				super.validateProperties();
				
				if (iconDisplays && iconDisplays.length > 0) {
					for (var i:int=0; i < iconDisplays.length; i++) {
						var iconDisplay:BitmapImage = BitmapImage(iconDisplays.getItemAt(i));
						iconDisplay.validateProperties();
					}
				}	
			}
			
			override public function validateSize(recursive:Boolean = false):void {
				if (iconDisplays && iconDisplays.length > 0) {
					for (var i:int=0; i < iconDisplays.length; i++) {
						var iconDisplay:BitmapImage = BitmapImage(iconDisplays.getItemAt(i));
						iconDisplay.validateSize();
					}
				}				
				super.validateSize(recursive);
			}
						
		]]>
	</fx:Script>
	<s:layout>
		<s:HorizontalLayout gap="2" verticalAlign="middle" paddingBottom="2" paddingTop="2" paddingLeft="2" paddingRight="2"/>		
	</s:layout>
	
	<s:Label id="labelDisplay" />
</s:DataRenderer>
