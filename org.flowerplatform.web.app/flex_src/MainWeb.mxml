<?xml version="1.0" encoding="utf-8"?>
<s:Application applicationComplete="applicationCompleteHandler(event)"
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<s:RemoteObject id="testAmfService" destination="testAmfService" fault="Alert.show(event.toString())">
			<mx:method name="testMet" result="Alert.show('res')"/>
		</s:RemoteObject>
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		s|FormItem {
			skinClass: ClassReference("org.flowerplatform.flexutil.form.FlowerFormItemSkin");
		}
		
		s|Button {
			cornerRadius: 4;
			skinClass: ClassReference("org.flowerplatform.flexutil.button.HaloButtonSkin");
		}

		s|ButtonBar {
			skinClass: ClassReference("org.flowerplatform.flexutil.button.HaloButtonBarSkin");
		}
		
	</fx:Style>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.crispico.flower.util.popup.ResizablePopupWindowPopupHandlerFactory;
			import com.crispico.flower.util.popup.TextAreaPopupMessageBoxFactory;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.ImageSnapshot;
			import mx.managers.PopUpManager;
			import mx.messaging.config.ConfigMap;
			import mx.messaging.management.Attribute;
			import mx.messaging.management.MBeanAttributeInfo;
			import mx.messaging.management.MBeanConstructorInfo;
			import mx.messaging.management.MBeanFeatureInfo;
			import mx.messaging.management.MBeanInfo;
			import mx.messaging.management.MBeanOperationInfo;
			import mx.messaging.management.MBeanParameterInfo;
			import mx.messaging.management.ObjectInstance;
			import mx.messaging.management.ObjectName;
			import mx.messaging.messages.AcknowledgeMessage;
			import mx.messaging.messages.AcknowledgeMessageExt;
			import mx.messaging.messages.AsyncMessage;
			import mx.messaging.messages.AsyncMessageExt;
			import mx.messaging.messages.CommandMessage;
			import mx.messaging.messages.CommandMessageExt;
			import mx.messaging.messages.ErrorMessage;
			import mx.messaging.messages.HTTPRequestMessage;
			import mx.messaging.messages.MessagePerformanceInfo;
			import mx.messaging.messages.RemotingMessage;
			import mx.messaging.messages.SOAPMessage;
			import mx.states.AddChild;
			import mx.utils.ObjectProxy;
			import mx.utils.RpcClassAliasInitializer;
			
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.context_menu.ContextMenu;
			import org.flowerplatform.flexutil.context_menu.ContextMenuManager;
			import org.flowerplatform.flexutil.context_menu.FillContextMenuEvent;
			import org.flowerplatform.flexutil.plugin.FlexPluginManager;
			import org.flowerplatform.flexutil.popup.ActionBase;
			import org.flowerplatform.flexutil.popup.ComposedAction;
			import org.flowerplatform.flexutil.popup.IAction;
			
			import spark.utils.DataItem;
			
			
			// Temporary:
			// forces loading the "states" resource bundle; needed by the WebPlugin; anyway, "states" is not a big deal: only a property
			AddChild;
			
			// We force the reference towards the classe below, because they declare "RemoteClass" annotation, which is ignored when used
			// by classes from SWCs (i.e. plugins). By referencing them now, the compiler uses their annotation and automatically registers
			// the corresponding alias, so that plugins won't have to manually user "registerClassAlias" for them (as they do for their
			// own Remote Objects
			RemotingMessage;
			MBeanParameterInfo;
			MBeanConstructorInfo;
			AcknowledgeMessageExt;
			MBeanFeatureInfo;
			Attribute;
			AsyncMessageExt;
			CommandMessageExt;
			ObjectInstance;
			MBeanAttributeInfo;
			MBeanInfo;
			DataItem;
			MBeanOperationInfo;
			SOAPMessage;
			AcknowledgeMessage;
			ObjectName;
			RpcClassAliasInitializer;
			ErrorMessage;
			ArrayCollection;
			AsyncMessage;
			MessagePerformanceInfo;
			ConfigMap;
			HTTPRequestMessage;
			CommandMessage;
			ArrayList;
			ObjectProxy;
			ImageSnapshot;
			
			protected function applicationCompleteHandler(event:FlexEvent):void	{
				FlexUtilGlobals.getInstance().messageBoxFactory = new TextAreaPopupMessageBoxFactory();
				FlexUtilGlobals.getInstance().popupHandlerFactory = new ResizablePopupWindowPopupHandlerFactory();
					
				FlexPluginManager.getInstance().loadPlugins(new ArrayCollection([
					'servlet/public-resources/org.flowerplatform.common/swc/org.flowerplatform.common.swc|library.swf',
					'servlet/public-resources/org.flowerplatform.communication/swc/org.flowerplatform.communication.swc|library.swf',
					'servlet/public-resources/org.flowerplatform.editor/swc/org.flowerplatform.editor.swc|library.swf',
					'servlet/public-resources/org.flowerplatform.editor.text/swc/org.flowerplatform.editor.text.swc|library.swf?pluginClass=EditorTextPlugin',
					'servlet/public-resources/org.flowerplatform.editor.text.java/swc/org.flowerplatform.editor.text.java.swc|library.swf?pluginClass=EditorTextJavaPlugin',
					'servlet/public-resources/org.flowerplatform.editor.model/swc/org.flowerplatform.editor.model.swc|library.swf?pluginClass=EditorModelPlugin',
					'servlet/public-resources/org.flowerplatform.web/swc/org.flowerplatform.web.swc|library.swf',
//					'servlet/public-resources/org.flowerplatform.web.git/swc/org.flowerplatform.web.git.swc|library.swf'
				]));
				
				FlexUtilGlobals.getInstance().contextMenuManager = new ContextMenuManager();
			}
		]]>
	</fx:Script>
</s:Application>
