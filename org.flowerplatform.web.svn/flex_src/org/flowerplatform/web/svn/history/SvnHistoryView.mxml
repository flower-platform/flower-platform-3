<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
 @author Victor Badila 
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"	 
	xmlns:common="com.crispico.flower.flexdiagram.util.common.*" 
	xmlns:skin="com.crispico.flower.util.skin.*"
	xmlns:fx="http://www.adobe.com/2006/mxml"
	xmlns:util="com.crispico.flower.util.*" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	creationComplete="init()">
	
	<mx:Script>
		<![CDATA[
			import com.crispico.flower.util.layout.ArrangeTool;
			import com.crispico.flower.util.layout.PopupHostViewWrapper;
			import com.crispico.flower.util.layout.Workbench;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.List;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.formatters.DateBase;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.utils.ObjectUtil;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.GenericTreeList;
			import org.flowerplatform.communication.tree.remote.PathFragment;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.Utils;
			import org.flowerplatform.web.common.explorer.ExplorerTreeList;
			import org.flowerplatform.web.common.explorer.ExplorerViewProvider;
			import org.flowerplatform.web.svn.SvnPlugin;
			import org.flowerplatform.web.svn.common.SvnCommonPlugin;
			
			import spark.formatters.DateTimeFormatter;
					
			public static const NUMBER_LOG_ENTRIES:Number = 25;
			
			/**
			 * Holds the current selected tree node.
			 */						
			public var selectedObject:TreeNode;			
									
			[Bindable]
			public var comment:String;
			
			[Bindable]
			public var volatileAffectedPathsEntry:ArrayCollection;
			
			[Bindable]
			public var repositoryInfoLabel:String = "";
			
			[Bindable]
			public var dateTimeFormatter:DateTimeFormatter = new DateTimeFormatter();
			
			public function init():void {
				dateTimeFormatter.dateTimePattern = "MM/DD/YYYY HH:NN";	
			}
			
			/**
			 * Sends command to server to get first <code>NUMBER_LOG_ENTRIES</code> history entries.
			 * 
			 * If <code>refreshFromTreeSelection</code> is <code>true</code>, 
			 * updates <code>selectedObjectPath</code> and gets corresponding object info from server.
			 */
			public function refreshBtnHandler(refreshFromTreeSelection:Boolean = false):void {				
				if (refreshFromTreeSelection) {
					var workbench:Workbench = Workbench(FlexUtilGlobals.getInstance().workbench);
					var component:UIComponent = workbench.getComponent(ExplorerViewProvider.ID);
					var selection:IList = ExplorerTreeList(PopupHostViewWrapper(component).activePopupContent).getSelection()
					if (SvnPlugin.getInstance().showHistoryIsPossible(selection)) {
						selectedObject = TreeNode(selection.getItemAt(0));					
					}					
				}
				/* if (selectedObject.getPathForNode(true) == null) {
						return;
					} */
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("svnHistoryService", "getEntries", 
						[selectedObject.getPathForNode(true), -1, NUMBER_LOG_ENTRIES, false], 
						this, refreshHistoryEntriesTableCallback));					
				dataArea.enabled = false;
				buttonArea.enabled = false;
			}
			
			/**
			 * Sends command to server to get the next <code>NUMBER_LOG_ENTRIES</code> 
			 * history entries.
			 */
			private function getNextBtnHandler():void {				
				var data:ArrayCollection = ArrayCollection(historyEntriesTable.dataProvider);
				if (data != null && data.length > 0) {
					var revisionStart:String = data.getItemAt(data.length - 1).revision;					
					if (revisionStart.charAt(0) == '*') {
						revisionStart = revisionStart.substr(1);
					}					
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand("svnHistoryService", "getEntries", 
							[selectedObject.getPathForNode(true), Number(revisionStart), NUMBER_LOG_ENTRIES, false], 
							this, appendToHistoryEntriesTableCallback));					
					dataArea.enabled = false;
					buttonArea.enabled = false;
				} 
			}
			
			/**
			 * Sends command to server to get all remaining history entries.
			 */
			private function getAllBtnHandler():void {
				 var data:ArrayCollection = ArrayCollection(historyEntriesTable.dataProvider);
				if (data != null && data.length > 0) {
					var revisionStart:String = data.getItemAt(data.length - 1).revision;
					if (revisionStart.charAt(0) == '*') {
						revisionStart = revisionStart.substr(1);
					}					
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand(
								"svnHistoryService", 
								"getEntries", 
								[selectedObject.getPathForNode(true), Number(revisionStart), -1, false], 
								this, 
								appendToHistoryEntriesTableCallback));
				
					dataArea.enabled = false;
					buttonArea.enabled = false;
				} 
			}
			
			/**
			 * Based on the button selected property, shows/hides the comment area.
			 */
			private function showCommentsBtnHandler():void {				
				commentArea.includeInLayout = showCommentsBtn.selected;
				commentArea.visible = showCommentsBtn.selected;				
				if (!showCommentsBtn.selected) {
					detailArea.includeInLayout = affectedPathEntriesTable.includeInLayout;
					detailArea.visible = affectedPathEntriesTable.visible;	
				} else {
					detailArea.includeInLayout = true;
					detailArea.visible = true;	
				}		 						
			}
			
			/**
			 * Based on the button selected property, shows/hides the affected paths area.
			 */
			private function showAffectedPathsBtnHandler():void {
				affectedPathEntriesTable.includeInLayout = showAffectedPathsBtn.selected;
				affectedPathEntriesTable.visible = showAffectedPathsBtn.selected;				
				if (!showAffectedPathsBtn.selected) {
					detailArea.includeInLayout = commentArea.includeInLayout;
					detailArea.visible = commentArea.visible;	
				} else {
					detailArea.includeInLayout = true;
					detailArea.visible = true;	
				}	 
			}			
			
			private function appendToHistoryEntriesTableCallback(value:ArrayCollection):void {
				 if (value != null) {
					ArrayCollection(historyEntriesTable.dataProvider).addAll(value);
				}
				dataArea.enabled = true;
				buttonArea.enabled = true; 
			}
			
			public function refreshHistoryEntriesTableCallback(value:ArrayCollection):void {
				historyEntriesTable.dataProvider = value;				
				if (value != null) {
					dataArea.enabled = true;
					buttonArea.enabled = true;
					getRepositoryNameAndWorkingDirectory();
				} else {
					dataArea.enabled = false;
					buttonArea.enabled = false;
					repositoryInfoLabel = "";
				}
			}
			
			private function date_sortCompareFunc(itemA:Object, itemB:Object, thirdUnusedArgument:Object):int {				
				var dateA:Date = new Date(Date.parse(itemA.date));
				var dateB:Date = new Date(Date.parse(itemB.date));
				return ObjectUtil.dateCompare(dateA, dateB);
			}
			
			private function revision_sortCompareFunc(itemA:Object, itemB:Object, thirdUnusedArgument:Object):int {	
				var revA:String;
				if (itemA.revision.charAt(0) == '*') {
					revA = itemA.revision.substr(1);
				}
				var revB:String;
				if (itemB.revision.charAt(0) == '*') {
					revB = itemB.revision.substr(1);
				}
				return ObjectUtil.compare(revA, revB);
			}
			
			private function getAffectedPaths():void {
				var obj:Object = ArrayCollection(historyEntriesTable.dataProvider).getItemAt(commentField.grid.selectedIndex);
				comment = obj.comment
				
				if(historyEntriesTable.selectedItem == null) {
					return;
				}
				var rev:int = historyEntriesTable.selectedItem.revision;
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand(
						"svnHistoryService", 
						"getEntries", 
						[selectedObject.getPathForNode(true), rev, 1, true], 
						this, 
						getAffectedPathsCallback));							
			}	
			
			private function getAffectedPathsCallback(result:ArrayCollection):void {
				volatileAffectedPathsEntry = result.getItemAt(0).affectedPathEntries;				
			}
			
			public function getRepositoryNameAndWorkingDirectory():void {			
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand(
							"svnService", 
							"getRepositoryNameAndWorkingDirectory", 
							[selectedObject.getPathForNode(true)], 
							this, 
							getRepositoryNameAndWorkingDirectoryCallback));
			}							
			
			public function getRepositoryNameAndWorkingDirectoryCallback(result:String):void {
				repositoryInfoLabel = result;				
			}	
			
		]]>
	</mx:Script>
	
	<s:HGroup id="buttonArea" width="100%">
		
		<s:TextInput id="objectInfo" text="{repositoryInfoLabel}" editable="false" width="100%"/>
		
		<common:FlowerLinkButton id="refreshBtn" click="refreshBtnHandler()"
			iconURL="{SvnCommonPlugin.getInstance().getResourceUrl('images/refresh.gif')}"
			toolTip="Refresh" width="25" height="25" />
		
		<common:FlowerLinkButton id="refreshFromSelectionBtn" click="refreshBtnHandler(true)"
			iconURL="{SvnCommonPlugin.getInstance().getResourceUrl('images/switch.gif')}"
			width="25" height="25" toolTip="Refresh from selection"/>
		
		<common:FlowerLinkButton id="showCommentsBtn"
			click="showCommentsBtnHandler()" creationComplete="{showCommentsBtn.selected=true}"
			toolTip="Show Comments" width="25" height="25" 
			iconURL="{SvnCommonPlugin.getInstance().getResourceUrl('images/comments.gif')}"
			skin="com.crispico.flower.util.skin.ToggleLinkButtonSkin" selected="{showCommentsBtn.selected}" toggle="true" />
		
		<common:FlowerLinkButton id="showAffectedPathsBtn" 
			click="showAffectedPathsBtnHandler()" creationComplete="{showAffectedPathsBtn.selected=true}"
			toolTip="Show Affected Paths"  width="25" height="25" 
			iconURL="{SvnCommonPlugin.getInstance().getResourceUrl('images/flatLayout.gif')}"
			skin="com.crispico.flower.util.skin.ToggleLinkButtonSkin" selected="{showAffectedPathsBtn.selected}" toggle="true" />
			
		<common:FlowerLinkButton id="getNextBtn" click="getNextBtnHandler()"
			iconURL="{SvnCommonPlugin.getInstance().getResourceUrl('images/get_next.gif')}"
			toolTip="{'Next ' + NUMBER_LOG_ENTRIES}" width="25" height="25" />
			
		<common:FlowerLinkButton id="getAllBtn" click="getAllBtnHandler()"
			iconURL="{SvnCommonPlugin.getInstance().getResourceUrl('images/get_all.gif')}"
			toolTip="Get All" width="25" height="25" />
			
	</s:HGroup>
	
	<mx:VDividedBox id="dataArea" verticalGap="3" width="100%" height="100%" >	
	
		<s:DataGrid id="historyEntriesTable" width="100%" height="50%" click="{getAffectedPaths()}">		
			<s:columns>
				<s:ArrayList>						
					<s:GridColumn id="revisionList" headerText="Revision" dataField="revision" sortCompareFunction="revision_sortCompareFunc" />
					<s:GridColumn headerText="Date" sortCompareFunction="date_sortCompareFunc" dataTipFormatter="{dateTimeFormatter}" dataField="date"/>     					
					<s:GridColumn headerText="Author" dataField="author"/>
					<s:GridColumn headerText="Comment" dataField="comment" id="commentField"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		<mx:HDividedBox id="detailArea" width="100%" height="50%" horizontalGap="3" >		
			<s:DataGrid id="affectedPathEntriesTable" width="50%" height="100%"
						dataProvider="{volatileAffectedPathsEntry}">				
				 <s:columns>
					<s:ArrayList>
						<s:GridColumn headerText="Action" dataField="action"/>
						<s:GridColumn headerText="Affected paths" dataField="affectedPath" dataTipField="affectedPath" showDataTips="true"/>
						<s:GridColumn headerText="Description" dataField="description" dataTipField="description" showDataTips="true"/>						
					</s:ArrayList>					
				</s:columns>
			</s:DataGrid>			
			<s:TextArea id="commentArea" width="50%" height="100%" editable="false"
						text="{comment}" />
		</mx:HDividedBox>
		
	</mx:VDividedBox>
</mx:VBox>