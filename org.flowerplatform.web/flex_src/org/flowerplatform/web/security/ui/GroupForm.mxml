<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
 Group form.
 
 @author Cristi
 @author Cristina
 @author Mariana

 @flowerModelElementId _XP69cFcPEeGL3vi-zPhopA
-->
<ns:BaseForm 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ns="org.flowerplatform.web.security.ui.*" 
	xmlns:utils="com.crispico.flower.util.*"
	minWidth="400" minHeight="200">

	<mx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.command.CompoundServerCommand;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.WebPlugin;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.entity.dto.NamedDto;
			import org.flowerplatform.web.common.security.dto.GroupAdminUIDto;
			
			override public function set popupHost(value:IPopupHost):void {
				super.popupHost = value;
				popupHost.setIcon(WebPlugin.getInstance().getResourceUrl("images/usr_admin/group.png"));
			}
			
			/**
			 * @flowerModelElementId _RBJ7QF34EeGwLIVyv_iqEg
			 */
			override public function set entityId(_entityId:Number):void {
				super.entityId = _entityId;
				
				var command:CompoundServerCommand = new CompoundServerCommand();	
				// gets all organizations to fill the combobox
				command.append(
					new InvokeServiceMethodServerCommand("organizationService", "findAllAsNamedDto", null, this, organizationReceivedCallback));	
			
				if (entityId != 0) {
					form.enabled = false;
					save.enabled = false;
					popupHost.setLabel(WebPlugin.getInstance().getMessage("form.edit", [WebPlugin.getInstance().getMessage("entity.group")]));
					ModalSpinner.addModalSpinner(this, CommonPlugin.getInstance().getMessage("spinner.processing"));
					command.append(
						new InvokeServiceMethodServerCommand("groupService", "findByIdAsAdminUIDto", [entityId], this, dataReceivedCallback, exceptionCallback));
				} else {
					popupHost.setLabel(WebPlugin.getInstance().getMessage("form.add", [WebPlugin.getInstance().getMessage("entity.group")]));
					dto = new GroupAdminUIDto();
					groupName.setFocus();	
				}
				CommunicationPlugin.getInstance().bridge.sendObject(command);
			}
			
			/**
			 * @flowerModelElementId _RBJ7Q134EeGwLIVyv_iqEg
			 */
			private function dataReceivedCallback(result:GroupAdminUIDto):void {
				ModalSpinner.removeModalSpinner(this);
				dto = result;
				form.enabled = true;
				save.enabled = true;
				
				groupName.setFocus();
				// select corresponding organization from list
				if (group.organization != null) {
					for each (var org:NamedDto in organizations.dataProvider) {
						if (org.id == group.organization.id) {
							organizations.selectedIndex = organizations.dataProvider.getItemIndex(org);
							updateOrganizationPrefix();
							break;
						}
					}			
				}					
			}						
			
			/**
			 * Casted instance of the Dto.
			 * @flowerModelElementId _RBKiUl34EeGwLIVyv_iqEg
			 */ 
			[Bindable(event="dtoChangedEvent")] 
			public function get group():GroupAdminUIDto {
				return GroupAdminUIDto(dto);
			}
			
			/**
			 * The group name displayed in the text input will not contain the
			 * organization prefix.
			 * 
			 * @author Mariana
			 */ 
			[Bindable(event="dtoChangedEvent")]
			public function getGroupName():String {
				var fullName:String = group.name;
				if (group.organization) {
					var organizationPrefix:String = group.organization + ".";
					if (fullName.substr(0, organizationPrefix.length) == organizationPrefix)
						return fullName.substr(organizationPrefix.length);
				}
				return fullName;
			}
			
			/**
			 * Fills the combo box with list of available organizations.
			 * Adds an empty line at index 0 (a group can have no organization selected).
			 * @flowerModelElementId _RBLJYV34EeGwLIVyv_iqEg
			 */ 
			private function organizationReceivedCallback(dtos:ArrayCollection):void {
				// no organization entry if user is global admin
				if (WebCommonPlugin.getInstance().authenticationManager.currentUserLoggedIn.isAdmin) {
					var no_org:NamedDto = new NamedDto();
					no_org.name = "";
					dtos.addItemAt(no_org, 0);
				}
				
				organizations.dataProvider = dtos;	
				organizations.selectedIndex = 0;
				updateOrganizationPrefix();
			}			
											
			/**
			 * @flowerModelElementId _RBLJZV34EeGwLIVyv_iqEg
			 */
			protected override function formOkHandler():void {	
				if (Validator.validateAll(validators).length > 0) {
					return;
				}
				
				if (organizationPrefix.text.length > 0)
					group.name = organizationPrefix.text.substr(1) + groupName.text;
				else
					group.name = groupName.text;
				if (organizations.selectedLabel.length > 0) {
					group.organization = NamedDto(organizations.selectedItem);
				} else {
					group.organization = null;
				}
				ModalSpinner.addModalSpinner(this, CommonPlugin.getInstance().getMessage("spinner.processing"));
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand("groupService", "mergeAdminUIDto", [group], this, saveOkCallback, exceptionCallback));
				
			}
			
			/**
			 * @flowerModelElementId _RBLwcV34EeGwLIVyv_iqEg
			 */
			private function saveOkCallback(errorMessage:String):void {
				if (errorMessage) {
					Alert.show(errorMessage, CommonPlugin.getInstance().getMessage("error"));
					exceptionCallback(null);
				} else {
					GroupsPanel(parentListPanel).refreshBtnHandler();
					super.formOkHandler();
				}
			}
			
			/**
			 * Updates the organization prefix depending on the selected organization.
			 * 
			 * @author Mariana
			 */ 
			private function updateOrganizationPrefix():void {
				this.width = width; // this is needed to prevent the popup from changing its size depending on the prefix length
				if (organizations.selectedLabel.length > 0) {
					organizationPrefix.visible = organizationPrefix.includeInLayout = true;
					organizationPrefix.text = "@" + organizations.selectedLabel + ".";
				} else {
					organizationPrefix.visible = organizationPrefix.includeInLayout = false;
					organizationPrefix.text = "";
				}
			}
			
		]]>
	</mx:Script>
	
	<mx:Array id="validators">
		<mx:StringValidator source="{groupName}" property="text" minLength="1" maxLength="61"/>
		<mx:RegExpValidator source="{groupName}" property="text" expression="^[\w|-]+$"/>
	</mx:Array>

	<mx:Form id="form" height="100%" width="100%" verticalGap="15">	 

		<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.group.organization')}" width="100%">
			<mx:HBox width="100%" verticalAlign="middle" horizontalGap="1">
				<mx:ComboBox id="organizations" labelField="name" width="100%" change="{updateOrganizationPrefix();}"/>
				<utils:HintButton toolTip="{WebPlugin.getInstance().getMessage('entity.groups.organization.hint')}"/>
			</mx:HBox>
		</mx:FormItem>
		
		<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.group.name')}" width="100%" horizontalAlign="right">
			<mx:HBox width="100%" verticalAlign="middle" horizontalGap="1">
				<mx:Label id="organizationPrefix" visible="false" includeInLayout="false"/>
				<mx:TextInput id="groupName" text="{getGroupName()}"  width="100%"/>
				<utils:HintButton toolTip="{WebPlugin.getInstance().getMessage('entity.groups.name.hint')}"/>
			</mx:HBox>
		</mx:FormItem>
		
	</mx:Form>
	
	<mx:ControlBar width="100%" horizontalAlign="center" paddingBottom="15">
		 <mx:Button id="save" label="{WebPlugin.getInstance().getMessage('form.save')}" click="formOkHandler()"/>
         <mx:Button id="cancel" label="{WebPlugin.getInstance().getMessage('form.cancel')}" click="formCancelHandler()"/>
	</mx:ControlBar>  
	
</ns:BaseForm>