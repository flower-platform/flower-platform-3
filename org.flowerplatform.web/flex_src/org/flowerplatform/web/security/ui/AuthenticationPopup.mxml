<?xml version="1.0" encoding="utf-8"?>
<!--
 Component that acts like a singleton authentication popup. Only one can be shown
 using #showPopup() method and it is hidden when pressing one of the authenticate or cancel buttons.
 @flowerModelElementId _75nHAG3gEeGYiLzscjdrpg
-->
<mx:VBox 
	implements="org.flowerplatform.flexutil.popup.IPopupContent"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:popup="com.crispico.flower.util.popup.*" 
	xmlns:common="com.crispico.flower.flexdiagram.util.common.*"
	xmlns:buttonbar="com.crispico.flower.util.buttonbar.*" 
	xmlns:validators="com.crispico.flower.util.validators.*"
	xmlns:communication="org.flowerplatform.communication.*"
	xmlns:tabNavigator="com.crispico.flower.flexdiagram.util.tabNavigator.*"
	horizontalAlign="center" verticalAlign="middle"  
	minWidth="410" minHeight="435"
	defaultButton="{authenticateButton}"  
	creationComplete="onCreationComplete()"
	>
	
	<mx:RemoteObject id="registerUserService" destination="registerUserService">
		<mx:method name="resendActivationCode" result="resendActivationCodeResultHandler(event)"/>
		<mx:method name="register" result="registerResultHandler(event)"/>
		<mx:method name="forgotPassword" result="forgotPasswordResultHandler(event)"/>
		<mx:method name="forgotUsername" result="forgotUsernameResultHandler(event)"/>
		<mx:method name="getOrganizationFilter" result="getOrganizationFilterHandler(event)"/>
	</mx:RemoteObject>
	
	<mx:StringValidator id="loginViewPasswordValidator" source="{loginViewPasswordInput}" property="text" minLength="1"/>
	<mx:StringValidator id="usernameValidator" source="{usernameInput}" property="text" minLength="1"/>
	
	<mx:Array id="registerValidators">
		<mx:StringValidator id="nameValidator" source="{nameInput}" property="text" minLength="1" maxLength="30"/>
		<mx:StringValidator id="loginValidator" source="{loginInput}" property="text" minLength="1" maxLength="30"/>
		<mx:RegExpValidator source="{loginInput}" property="text" expression="^[a-z|A-Z|0-9|_|\.|-]+$" noMatchError="{WebPlugin.getInstance().getMessage('entity.user.login.validation')}"/>
		<mx:StringValidator id="passwordValidator" source="{registerViewPasswordInput}" property="text" minLength="1"/>
		<mx:EmailValidator source="{emailInput}" property="text"/>
		<mx:StringValidator id="emailLengthValidator" source="{emailInput}" property="text" minLength="1" maxLength="50"/>
		<validators:CompareValidator id="comparePasswords" source="{passwordAgainInput}" property="text" valueToCompare="{registerViewPasswordInput.text}" errorMessage="{WebPlugin.getInstance().getMessage('authentication.error.doNotMatch.passwords')}" /> 
		<validators:CompareValidator id="compareEmails" source="{emailAgainInput}" property="text" valueToCompare="{emailInput.text}" errorMessage="{WebPlugin.getInstance().getMessage('authentication.error.doNotMatch.emails')}" />
	</mx:Array>
		
	<mx:VBox width="100%" height="100%" horizontalAlign="center" paddingRight="5" paddingLeft="5" paddingTop="5" paddingBottom="5">	
		
		<!-- Flower Logo is visible on all states -->
		
		<mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle" paddingTop="2" paddingBottom="0">
			<mx:VBox height="100%" horizontalAlign="center" verticalAlign="middle">
				<mx:Image id="organizationLogo" maxWidth="{ORGANIZATION_LOGO_MAX_WIDTH}" maxHeight="{ORGANIZATION_LOGO_MAX_HEIGHT}" horizontalAlign="center" verticalAlign="middle"/>
				<mx:Text id="organizationLabel" maxWidth="{ORGANIZATION_LOGO_MAX_WIDTH}" maxHeight="{ORGANIZATION_LOGO_MAX_HEIGHT}" fontSize="20" fontWeight="bold" color="{0x777777}" textAlign="center"/>
			</mx:VBox>
			<mx:Text id="atLabel" text="@" fontSize="20" fontWeight="bold" color="{0x777777}" includeInLayout="false" visible="false"/>
			<common:BitmapContainer id="iconLogo" initialize="{iconLogo.retrieveImage(WebCommonPlugin.getInstance().getResourceUrl('images/logo_flower_small.png'));}" />
		</mx:HBox>
		
		<mx:ViewStack id="viewStack" width="100%" height="100%" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">

			<!-- Login/Switch View -->
			
			<mx:VBox id="loginView" width="100%" height="100%" verticalAlign="middle">
				
				<!-- Login Form with login and password text fields -->
				
				<mx:Form id="form" width="100%" verticalGap="6" paddingRight="0" paddingLeft="0">			
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.login')}" width="100%">
						<mx:TextInput id="usernameInput" enter="authenticateButtonClickHandler();" width="100%" />
					</mx:FormItem>
					
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.password')}" width="100%">
						<mx:TextInput id="loginViewPasswordInput" displayAsPassword="true" enter="authenticateButtonClickHandler();" width="100%" />
					</mx:FormItem>
				</mx:Form>		
				
				<mx:VBox width="100%" horizontalAlign="center">
					
					<!-- Login/Switch and Cancel buttons -->
					
					<mx:HBox width="100%" horizontalAlign="center" verticalGap="2">		
						<mx:Button id="authenticateButton" click="authenticateButtonClickHandler();"/>										
						<mx:Button id="cancelButton" label="{WebPlugin.getInstance().getMessage('form.cancel')}" click="cancelButtonClickHandler();"/>
					</mx:HBox>
					
					<!-- Anonymous login button and Keep workspace layout button -->
					
					<common:FlowerLinkButton id="anonymousButton" click="anonymousButtonClickHandler();" textDecoration="underline"/>
					<mx:CheckBox id="keepWorkspaceCheckbox" label="{WebPlugin.getInstance().getMessage('authentication.keepLayoutAfterSwitch')}"/>
					
				</mx:VBox>
		
			</mx:VBox>
			
			<!-- Register View -->
			
			<mx:VBox id="registerView" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				
				<!-- Register Form -->
				
				<mx:Form width="100%" verticalGap="6" paddingRight="0" paddingLeft="0" paddingTop="2" paddingBottom="2">
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.login')}" width="100%">
						<mx:TextInput id="loginInput" text="" width="100%"/>
					</mx:FormItem>
					
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.name')}" width="100%">
						<mx:TextInput id="nameInput" text="" width="100%"/>
					</mx:FormItem>
					
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.email')}" width="100%">
						<mx:TextInput id="emailInput" text="" width="100%"/>
					</mx:FormItem>
					
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.form.emailAgain')}" width="100%">
						<mx:TextInput id="emailAgainInput" text="" width="100%"/>
					</mx:FormItem>
					
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.password')}" width="100%">
						<mx:TextInput id="registerViewPasswordInput" displayAsPassword="true" text="" width="100%"/>	
					</mx:FormItem>
					
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('entity.user.form.passwordAgain')}" width="100%">
						<mx:TextInput id="passwordAgainInput" displayAsPassword="true" text="" width="100%"/>
					</mx:FormItem>
				</mx:Form>
				
				<!-- Register button -->
				
				<mx:Button label="{WebPlugin.getInstance().getMessage('authentication.register')}" click="registerButtonClickHandler()"/>
				
			</mx:VBox>
			
			<!-- I Forgot... View -->
			
			<mx:VBox id="iForgotView" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				
				<mx:RadioButtonGroup id="group"/>
				
				<mx:Form width="100%" verticalGap="15" paddingRight="0" paddingLeft="0">

					<!-- Password and Username radio buttons -->
					
					<mx:FormItem label="{WebPlugin.getInstance().getMessage('authentication.iForgot')}">
						<mx:VBox>
							<mx:RadioButton id="forgotPassword" label="{WebPlugin.getInstance().getMessage('authentication.iForgot.myPassword')}" group="{group}" selected="true"/>
							<mx:RadioButton id="forgotUsername" label="{WebPlugin.getInstance().getMessage('authentication.iForgot.myLogin')}" group="{group}" selected="false"/>
						</mx:VBox>
					</mx:FormItem>
					
					<!-- Username/Email text field -->
					
					<mx:FormItem id="forgotFormItem" width="100%"
								 label="{group.selection == forgotPassword ? WebPlugin.getInstance().getMessage('entity.user.login') : WebPlugin.getInstance().getMessage('entity.user.email')}">
						<mx:TextInput id="forgotTextInput" width="100%" enter="sendPasswordOrUsernameHandler()"/>
					</mx:FormItem>
				
				</mx:Form>
				
				<!-- OK button -->
				
				<mx:Button id="okButton" label="{WebPlugin.getInstance().getMessage('authentication.iForgot.button')}" click="sendPasswordOrUsernameHandler()"/>
				
			</mx:VBox>
			
			<!-- Debug View -->
			
			<mx:VBox id="debugView" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				
				<mx:HBox width="100%">
					<mx:Label text="{WebPlugin.getInstance().getMessage('authentication.debug.connectUsing')}"/>
					<mx:ComboBox id="restrictChannelComboBox" width="100%" enabled="{!switchUserMode}" 
								 dataProvider="{CommunicationPlugin.getInstance().bridge.getAvaiableChannels()}" 
								 change="restrictChannelComboBoxChangeHandler();"/>
				</mx:HBox>
				
				<mx:LinkButton label="{WebPlugin.getInstance().getMessage('authentication.debug.log')}" click="CommunicationPlugin.getInstance().bridge.logger.showAllMessages();"/>
				
			</mx:VBox>
			
		</mx:ViewStack>
		
	</mx:VBox>
	
	<mx:ControlBar horizontalAlign="center">
		
		<buttonbar:CustomToggleButtonBar id="buttonBar" labelField="label" itemClick="{switchView(buttonBar.selectedIndex)}" dataProvider="{buttonBarDataProvider}"/>
		
	</mx:ControlBar>
	
	<mx:states>
		<!-- 
			Used if the user tried to login, but he is not activated, or if the url contains the activationCode parameter.
		
			Adds a new field to input the activation code (it is pre-filled if the url contains the activation code), and
			also a button to resend the activation code to the user's mail box.
		
			@author Mariana
		-->
		<mx:State name="requestActivationCode">
			<mx:AddChild relativeTo="form">
				<mx:FormItem label="{WebPlugin.getInstance().getMessage('authentication.activationCode')}" width="100%">
					<mx:TextInput id="activationCodeInput" enter="authenticateButtonClickHandler();" creationComplete="fillInActivationCode(event)" width="100%" />
				</mx:FormItem>
			</mx:AddChild>
			<mx:AddChild relativeTo="{anonymousButton}" position="before">
				<mx:LinkButton label="{WebPlugin.getInstance().getMessage('authentication.resendActivationCode')}" click="resendActivationCodeHandler()" textDecoration="underline"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.flexutil.popup.IAction;
			import org.flowerplatform.flexutil.popup.IPopupHost;
			import org.flowerplatform.web.WebPlugin;
			import org.flowerplatform.web.common.WebCommonPlugin;
			import org.flowerplatform.web.common.security.dto.OrganizationAdminUIDto;
			import org.flowerplatform.web.common.security.dto.UserAdminUIDto;
			
			public static const ORGANIZATION_LOGO_MAX_WIDTH:int = 180;
			
			public static const ORGANIZATION_LOGO_MAX_HEIGHT:int = 90;
			
			private static var popupVisible:Boolean;
			
			private var switchUserMode:Boolean;
			
			public function getActions(selection:IList):Vector.<IAction> {
				return null;
			}
			
			public function getSelection():IList {
				return null;
			}
			
			public function set popupHost(value:IPopupHost):void {
				value.setLabel("User Form");
			}
			
			/**
			 * @author Mariana
			 */ 
			protected function get buttonBarDataProvider():Array {
				var dp:Array = new Array();
				dp.push({ label : switchUserMode ? WebPlugin.getInstance().getMessage('authentication.switch') : WebPlugin.getInstance().getMessage('authentication.login'), iconURL : WebCommonPlugin.getInstance().getResourceUrl("images/login.png") },
						{ label : WebPlugin.getInstance().getMessage('authentication.register'), iconURL : WebCommonPlugin.getInstance().getResourceUrl("images/usr_admin/user.png") },
						{ label : WebPlugin.getInstance().getMessage('authentication.iForgot'), iconURL : WebCommonPlugin.getInstance().getResourceUrl("images/question.png") });
				var showDebugButtonFromUrl:String = CommunicationPlugin.getInstance().applicationParametersProvider.getShowDebugMenu();
				if (showDebugButtonFromUrl == "true") {
					dp.push({ label : WebPlugin.getInstance().getMessage('authentication.debug'), iconURL : WebCommonPlugin.getInstance().getResourceUrl("images/debug.gif") });
				}
				return dp;
			}
			
			/**
			 * This flag is set true after a successful registration, after the user tries to login with no/wrong activation code
			 * or if the URL contains the activationCode parameter when the application starts, and set to false after a successful 
			 * activation. The reason why we need this field is because we don't want to show the activation field every time this
			 * popup is displayed, even if the URL contains the activationCode.
			 * 
			 * @author Mariana
			 */ 
			public static var activationNeeded:Boolean;
			
//			public static function showPopup(switchUserMode:Boolean, providedUsername:String, anonymousFailed:Boolean, showActivationCodeField:Boolean = false):void {
			public function onCreationComplete():void {
//				if (popupVisible) 
//					return; // Only one allowed to be visible.
//				popupVisible =  true;
				
//				var authenticationPopup:AuthenticationPopup = new AuthenticationPopup();
				
//				if (switchUserMode)
//					authenticationPopup.showCloseButton = true;
//				authenticationPopup.showPopup();
				
//				var index:int = providedUsername == null ? -1 : providedUsername.indexOf("|"); 
//				authenticationPopup.usernameInput.text = index == -1 ? providedUsername : providedUsername.substring(0, index);
//				authenticationPopup.title = switchUserMode ? WebPlugin.getInstance().getMessage('authentication.switch') : WebPlugin.getInstance().getMessage('authentication.login');
				
				authenticateButton.label = switchUserMode ? WebPlugin.getInstance().getMessage('authentication.switch') : WebPlugin.getInstance().getMessage('authentication.login');
				anonymousButton.label = (switchUserMode ? WebPlugin.getInstance().getMessage('authentication.switchAs', [WebCommonPlugin.getInstance().authenticationManager.getAnonymousUser()]) 
																			: WebPlugin.getInstance().getMessage('authentication.loginAs', [WebCommonPlugin.getInstance().authenticationManager.getAnonymousUser()]));
				cancelButton.enabled = switchUserMode ? true : false;
					
//				authenticationPopup.anonymousButton.enabled = !anonymousFailed;
				keepWorkspaceCheckbox.enabled = switchUserMode ? true : false;
				keepWorkspaceCheckbox.selected = switchUserMode ? true : false;
				
				if (CommunicationPlugin.getInstance().applicationParametersProvider.getOrganization()) {
					registerUserService.getOrganizationFilter(CommunicationPlugin.getInstance().applicationParametersProvider.getOrganization());
				}
				
				// the user is not activated; switch to the RequestActivationCode state, to add the activation code field
//				if (activationNeeded && (showActivationCodeField || CommunicationPlugin.getInstance().applicationParametersProvider.getActivationCode())) {
//					authenticationPopup.currentState = "requestActivationCode";
//					PopUpManager.centerPopUp(authenticationPopup);
//				}
			}
			
			private function getOrganizationFilterHandler(event:ResultEvent):void {
				if (event.result) {
					var organizationDto:OrganizationAdminUIDto = OrganizationAdminUIDto(event.result);
					atLabel.includeInLayout = true;
					atLabel.visible = true;
					// if there's a logo, use it; otherwise only show the organization label
					if (organizationDto.logoURL != null && organizationDto.logoURL.length > 0) {
						organizationLogo.source = organizationDto.logoURL;
						organizationLabel.includeInLayout = false;
						organizationLabel.visible = false;
					} else {
						// don't show the organization logo
						organizationLogo.includeInLayout = false;
						organizationLogo.visible = false;
						organizationLabel.text = organizationDto.label;
					}
				}
			}
			
//			/**
//			 * @author Mariana
//			 */ 
//			override protected function handleEscPressed():void {
//				// do nothing
//			}
			
			private function cancelButtonClickHandler():void {
				PopUpManager.removePopUp(this);
				popupVisible = false;
			}
			
//			override public function closeForm():void {
//				popupVisible = false;
//				super.closeForm();
//			}
			
			private function switchView(index:int):void {
				viewStack.selectedIndex = index;
//				this.titleIconURL = buttonBar.dataProvider[index].iconURL;
//				this.title = buttonBar.dataProvider[index].label;
			}
			
			/////////////////////////////////////////////
			// Login/Switch and activation logic
			/////////////////////////////////////////////
			
			/**
			 * Depending on the type of authentication popup (login or switch user), this method
			 * either, calls the bridge's actions for connecting with some credentials.
			 * @flowerModelElementId _w4GPcG3iEeGYiLzscjdrpg
			 */
			private function authenticateButtonClickHandler():void {
				// validate form
				if (Validator.validateAll([usernameValidator, loginViewPasswordValidator]).length > 0) {
					return;
				}
				
				var username:String = usernameInput.text;
				if (activationNeeded && activationCodeInput) {
					username += "|" + activationCodeInput.text;
				}
				
//				CommunicationPlugin.getInstance().bridge.keepLayoutStructure = switchUserMode && keepWorkspaceCheckbox.selected;
				if (switchUserMode) {							
					// Possible enhancement : send command to server to detect if the username and password are good
					// in order not to deconnect the user. In this way it may return back to it's perspective after
					// entering some bad credentials.
					CommunicationPlugin.getInstance().bridge.disconnectAndConnect(username, loginViewPasswordInput.text);
				} else {
					CommunicationPlugin.getInstance().bridge.connect(username, loginViewPasswordInput.text);
				}
				
				cancelButtonClickHandler();						
			}
			
			private function anonymousButtonClickHandler():void {
				// Assign into the UI the credentials because they will be automatically be processed as
				// clicking the authentication button.
				usernameInput.text = WebCommonPlugin.getInstance().authenticationManager.getAnonymousUser();
				loginViewPasswordInput.text = WebCommonPlugin.getInstance().authenticationManager.getAnonymousUser(); // The user may alter it before clicking anonymous auth and it may send wrong password (not empty). 
				authenticateButtonClickHandler();
			}
			
			/**
			 * Fill in the activation code from the URL and deactivate the text field.
			 * 
			 * @author Mariana
			 */ 
			private function fillInActivationCode(event:FlexEvent):void {
				var code:String = CommunicationPlugin.getInstance().applicationParametersProvider.getActivationCode();
				if (code != null) {
					TextInput(event.target).text = code;
					TextInput(event.target).enabled = false;
				}
			}
			
			/**
			 * Resend the activation code for the user.
			 * 
			 * @author Mariana
			 */ 
			private function resendActivationCodeHandler():void {
				registerUserService.resendActivationCode(usernameInput.text, CommunicationPlugin.getInstance().applicationParametersProvider.getOrganization());
			}
			
			private function resendActivationCodeResultHandler(event:ResultEvent):void {
				Alert.show(String(event.result), WebPlugin.getInstance().getMessage("form.info"));
			}
			
			/////////////////////////////////////////////
			// Register logic
			/////////////////////////////////////////////
			
			/**
			 * A request is made to the server to create the user with the provided details.
			 * 
			 * @author Mariana
			 */ 
			private function registerButtonClickHandler():void {
				// validate form
				if (Validator.validateAll(registerValidators).length > 0) {
					return;
				}
				
				var dto:UserAdminUIDto = new UserAdminUIDto();
				dto.name = nameInput.text;
				dto.login = loginInput.text;
				dto.email = emailInput.text;
				dto.password = registerViewPasswordInput.text;
				dto.isActivated = false;
				
				ModalSpinner.addModalSpinner(this, CommonPlugin.getInstance().getMessage("spinner.processing"));
				registerUserService.register(dto, CommunicationPlugin.getInstance().applicationParametersProvider.getOrganization());		
			}

			/**
			 * If the account was created successfuly, the user is informed and the login view
			 * is displayed. Otherwise, the account could not be created, an error message is
			 * displayed and the user is asked to retry.
			 * 
			 * @author Mariana
			 */ 
			private function registerResultHandler(event:ResultEvent):void {
				ModalSpinner.removeModalSpinner(this);
				if (event.result == null) {
					buttonBar.selectedIndex = 0;
					switchView(0);
					Alert.show(WebPlugin.getInstance().getMessage('authentication.register.complete.content', [emailInput.text]), 
						WebPlugin.getInstance().getMessage('authentication.register.complete.title'));
				} else {
					Alert.show(event.result.toString(),
						WebPlugin.getInstance().getMessage('authentication.register.error.title'));
				}
			}
			
			/////////////////////////////////////////////
			// I Forgot... logic
			/////////////////////////////////////////////
			
			/**
			 * @author Mariana
			 */ 
			private function sendPasswordOrUsernameHandler():void {
				if (group.selection == forgotPassword) {
					registerUserService.forgotPassword(forgotTextInput.text);
				} else {
					registerUserService.forgotUsername(forgotTextInput.text);
				}
			}
			
			/**
			 * @author Mariana
			 */ 
			private function forgotPasswordResultHandler(event:ResultEvent):void {
				if (event.result) {
					Alert.show(WebPlugin.getInstance().getMessage('authentication.iForgot.passwordRecovery.content'), WebPlugin.getInstance().getMessage('authentication.iForgot.passwordRecovery.title'));
					buttonBar.selectedIndex = 0;
					switchView(0); // show the login view
				} else {
					Alert.show(WebPlugin.getInstance().getMessage('authentication.iForgot.loginDoesNotExist'), WebPlugin.getInstance().getMessage('authentication.iForgot.passwordRecovery.title'));
				}
			}
			
			/**
			 * @author Mariana
			 */ 
			private function forgotUsernameResultHandler(event:ResultEvent):void {
				if (event.result) {
					Alert.show(WebPlugin.getInstance().getMessage('authentication.iForgot.loginRecovery.content'), WebPlugin.getInstance().getMessage('authentication.iForgot.loginRecovery.title'));
					buttonBar.selectedIndex = 0;
					switchView(0); // show the login view
				} else {
					Alert.show(WebPlugin.getInstance().getMessage('authentication.iForgot.emailDoesNotExist'), WebPlugin.getInstance().getMessage('authentication.iForgot.loginRecovery.title'));
				}
			}
			
			/////////////////////////////////////////////
			// Debug logic
			/////////////////////////////////////////////
			
			private function restrictChannelComboBoxChangeHandler():void {
				CommunicationPlugin.getInstance().bridge.restrictToChannel(restrictChannelComboBox.selectedItem);
			}

		]]>
	</mx:Script>
</mx:VBox>