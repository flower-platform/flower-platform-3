<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!---
@author Cristian Spiescu
-->
<s:DataRenderer implements="org.flowerplatform.flexdiagram.renderer.IVisualChildrenRefreshable, org.flowerplatform.flexdiagram.renderer.IDiagramShellAware"
	cacheAsBitmap="true"
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	resize="resizeEventHandler()">
	
	<s:layout>
		<s:VerticalLayout
			horizontalAlign="center" verticalAlign="middle"
			paddingBottom="1" paddingLeft="1"
			paddingRight="1" paddingTop="1"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.events.PropertyChangeEvent;
			
			import org.flowerplatform.communication.transferable_object.ReferenceHolder;
			import org.flowerplatform.editor.model.NotationDiagramShell;
			import org.flowerplatform.editor.model.remote.command.MoveResizeServerCommand;
			import org.flowerplatform.emf_model.notation.Bounds;
			import org.flowerplatform.emf_model.notation.Node;
			import org.flowerplatform.flexdiagram.DiagramShell;
			import org.flowerplatform.flexdiagram.controller.visual_children.IVisualChildrenController;
			
			private var _diagramShell:DiagramShell;
			protected var visualChildrenController:IVisualChildrenController;
			private var _shouldRefreshVisualChildren:Boolean;
			
			public function get diagramShell():DiagramShell {
				return _diagramShell;
			}
			
			public function set diagramShell(value:DiagramShell):void {
				_diagramShell = value;
			}
			
			public function get shouldRefreshVisualChildren():Boolean {
				return _shouldRefreshVisualChildren;
			}
			
			public function set shouldRefreshVisualChildren(value:Boolean):void {
				_shouldRefreshVisualChildren = value;
			}
			
			override public function set data(value:Object):void {
				if (super.data == value) {
					return;
				}
				if (super.data != null) {
					if (Node(data).layoutConstraint_RH != null) {
						var bounds:Bounds = Bounds(ReferenceHolder(Node(data).layoutConstraint_RH).referencedObject);
						bounds.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
					}
				}
				
				super.data = value;
				
				if (data == null) {
					visualChildrenController = null;
				} else {
					visualChildrenController = diagramShell.getControllerProvider(data).getVisualChildrenController(data);
				}
				if (data != null) {
					if (Node(data).layoutConstraint_RH != null) {
						bounds = Bounds(ReferenceHolder(Node(data).layoutConstraint_RH).referencedObject);
						bounds.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
						x = bounds.x;
						y = bounds.y;
//						minWidth = bounds.width;
//						minHeight = bounds.height;
					}
				}
			}
			
			private function modelChangedHandler(event:PropertyChangeEvent):void {
				var bounds:Bounds = Bounds(event.target);
				switch (event.property) {
					case "x":
						x = bounds.x;
						break;
					case "y":
						y = bounds.y;
						break;
//					case "height":
//						minHeight = bounds.height;
//						break;
//					case "width":
//						minWidth = bounds.width;
//						break;
				}
			}

			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (visualChildrenController != null) {
					visualChildrenController.refreshVisualChildren(data);
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				graphics.clear();
				graphics.lineStyle(1);
				graphics.beginFill(0xCCCCCC, 0);
				graphics.drawRect(0, 0, unscaledWidth, unscaledHeight);
			}
			
			/**
			 * @author Mariana Gheorghe
			 */
			protected function resizeEventHandler():void {
				if (super.data != null) {
					if (Node(data).layoutConstraint_RH != null) {
						var bounds:Bounds = Bounds(ReferenceHolder(Node(data).layoutConstraint_RH).referencedObject);
						var command:MoveResizeServerCommand = new MoveResizeServerCommand();
						command.id = Node(data).layoutConstraint_RH.referenceIdAsString;
						command.newWidth = width;
						command.newHeight = height;
						command.newX = bounds.x;
						command.newY = bounds.y;
						NotationDiagramShell(diagramShell).editorStatefulClient.attemptUpdateContent(null, command);
					}
				}
			}
			
		]]>
	</fx:Script>
<!--	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x0000FF" weight="2"/>
		</s:stroke>
	</s:Rect>
--></s:DataRenderer>