<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--- 
@author Cristian Spiescu
@author Cristina Constantinescu
-->
<s:DataRenderer implements="org.flowerplatform.flexdiagram.renderer.IVisualChildrenRefreshable, org.flowerplatform.flexdiagram.renderer.IDiagramShellAware, mx.managers.IFocusManagerComponent"
	cacheAsBitmap="true"  
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	initialize="initializeHandler(event)"
	creationComplete="creationCompleteHandler(event)" xmlns:model="org.flowerplatform.editor.model.*" >
	
		<s:layout>
			<model:BoxRendererLayout gap="1" />
		</s:layout>
		
	<fx:Script>
		<![CDATA[
			import flash.filters.DropShadowFilter;
			
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			import mx.states.OverrideBase;
			
			import org.flowerplatform.communication.transferable_object.ReferenceHolder;
			import org.flowerplatform.editor.model.NotationDiagramShell;
			import org.flowerplatform.editor.model.remote.command.MoveResizeServerCommand;
			import org.flowerplatform.emf_model.notation.Bounds;
			import org.flowerplatform.emf_model.notation.Node;
			import org.flowerplatform.flexdiagram.DiagramShell;
			import org.flowerplatform.flexdiagram.controller.visual_children.IVisualChildrenController;
			import org.osmf.layout.ScaleMode;
			
			import spark.effects.Scale;
			
			private var _diagramShell:DiagramShell;
			protected var visualChildrenController:IVisualChildrenController;
			private var _shouldRefreshVisualChildren:Boolean;
			private var shadow:DropShadowFilter;
			private var effectsController:BoxEffectsController;
			private var shapeDrawer:ShapeDrawer;
			
			public function get diagramShell():DiagramShell {
				return _diagramShell;
			}
			
			public function set diagramShell(value:DiagramShell):void {
				_diagramShell = value;
			}
			
			public function get shouldRefreshVisualChildren():Boolean {
				return _shouldRefreshVisualChildren;
			}
			
			public function set shouldRefreshVisualChildren(value:Boolean):void {
				_shouldRefreshVisualChildren = value;
			}
			
			override public function set data(value:Object):void {
				if (super.data == value) {
					return;
				}
				if (super.data != null) {
					if (Node(data).layoutConstraint_RH != null) {
						var bounds:Bounds = Bounds(ReferenceHolder(Node(data).layoutConstraint_RH).referencedObject);
						bounds.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
					}
				}
				
				super.data = value;
				
				if (data == null) {
					visualChildrenController = null;
				} else {
					visualChildrenController = diagramShell.getControllerProvider(data).getVisualChildrenController(data);
				}
				if (data != null) {
					if (Node(data).layoutConstraint_RH != null) {					
						bounds = Bounds(ReferenceHolder(Node(data).layoutConstraint_RH).referencedObject);
						bounds.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelChangedHandler);
						x = bounds.x;
						y = bounds.y;
						
						height = bounds.height;
						width = bounds.width;
					}
				}
			}
			
			private function modelChangedHandler(event:PropertyChangeEvent):void {
				var bounds:Bounds = Bounds(event.target);
				switch (event.property) {
					case "x":					
						x = bounds.x;
						break;
					case "y":							
						y = bounds.y;
						break;
					case "height":	
						height = bounds.height;		
						break;
					case "width":	
						width = bounds.width;	
						break;
				}
			}

			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (visualChildrenController != null) {
					visualChildrenController.refreshVisualChildren(data);
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				if (shapeDrawer != null) {
					shapeDrawer.drawFigure();
				}
			}
			
			protected function measureHandler(event:Event):void {				
				if (event.target is BoxChildIconItemRenderer && BoxChildIconItemRenderer(event.target).parent == this) {
					event.stopPropagation();
					// recalculate parent's size if a child changes its size or added/removed
					measure();
				}
			}
			
			protected function addShadow():void {
				shadow = new DropShadowFilter();
				shadow.alpha = 0.55;
				shadow.blurX = 5;
				shadow.blurY = 5;
				shadow.distance = 6;
				shadow.color = 0x000000;
				shadow.angle = 35; 
				this.filters = [shadow];
			}
			
			protected function addEffects():void {
				effectsController = new BoxEffectsController(this, true);
				effectsController.glowEffect.blurXTo = effectsController.glowEffect.blurYTo = 20;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				addEffects();
				addShadow();
				
				shapeDrawer = new ShapeDrawer(ShapeDrawer.RECTANGLE, this, true, true);
			}
						
			protected function initializeHandler(event:FlexEvent):void {
				// add event at initialization because the resize handler must be notified also
				// when a child initial size is greater than its parent (the box renderer)
				addEventListener(ResizeEvent.RESIZE, measureHandler, true);
				addEventListener(Event.ADDED_TO_STAGE, measureHandler, true);
				addEventListener(Event.REMOVED_FROM_STAGE, measureHandler, true);
			}
			
		]]>
	</fx:Script>
</s:DataRenderer>
