<?xml version="1.0" encoding="utf-8"?>
<!--
	@author Cristina Constantinescu
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"		 
		 xmlns:tree="org.flowerplatform.communication.tree.*"
		 implements="org.flowerplatform.flexutil.view_content_host.IViewContent, org.flowerplatform.flexutil.dialog.IDialog"		 
		 creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.communication.service.InvokeServiceMethodServerCommand;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.editor.model.EditorModelPlugin;
			import org.flowerplatform.editor.model.location_new_elements.remote.LocationForNewElementsStatefulClient;
			import org.flowerplatform.editor.model.properties.remote.DiagramSelectedItem;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.dialog.IDialogResultHandler;
			import org.flowerplatform.flexutil.view_content_host.IViewHost;
			
			import spark.events.IndexChangeEvent;
			
			private var _viewHost:IViewHost;
			
			private var _selectionOfItems:IList;
			private var _options:Object;
			
			[Bindable]
			private var _currentLocationForNewElements:String;
			
			[Bindable]
			private var _currentShowNewElementsPathDialog:Boolean;
			
			[Bindable]
			private var showNewElementsPathDialogCheckBox:Boolean;
			
			private var _resultHandler:IDialogResultHandler;
			
			public function set viewHost(viewHost:IViewHost):void {
				_viewHost = viewHost; 
				_viewHost.setLabel(EditorModelPlugin.getInstance().getMessage("locationNewElements.title"));
			}
			
			public function set selectionOfItems(value:IList):void {
				_selectionOfItems = value;
			}
			
			public function set currentLocationForNewElements(value:String):void {
				_currentLocationForNewElements = value;
			}		
			
			public function set currentShowNewElementsPathDialog(value:Boolean):void {
				_currentShowNewElementsPathDialog = value;
				showNewElementsPathDialogCheckBox = true;
			}
			
			public function set options(value:Object):void {
				_options = value;
			}			
			
			public function getActions(selection:IList):Vector.<IAction> {
				// doesn't support this
				return null;
			}
			
			public function setResultHandler(resultHandler:IDialogResultHandler):void {
				_resultHandler = resultHandler;
			}			
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_viewHost.addToControlBar(buttonBar);
				
				var statefulClient:LocationForNewElementsStatefulClient = new LocationForNewElementsStatefulClient();
				treeList.statefulClient = statefulClient;
				
				statefulClient.treeList = treeList;
				
				statefulClient.context[LocationForNewElementsStatefulClient.DIAGRAM_EDITABLE_RESOURCE_PATH_KEY] = 
					DiagramSelectedItem(_selectionOfItems.getItemAt(0)).diagramEditableResourcePath;
				statefulClient.context[LocationForNewElementsStatefulClient.NEW_ELEMENTS_PATH_KEY] = 
					_currentLocationForNewElements;
			
				CommunicationPlugin.getInstance().statefulClientRegistry.register(statefulClient, null);
				
				statefulClient.openNode(null);
			}			
						
			private function okHandler():void {				
				// validate form
				if (Validator.validateAll(validators).length > 0) {
					return;
				}
				
				var location:String = locationTxt.text;
				CommunicationPlugin.getInstance().bridge.sendObject(
					new InvokeServiceMethodServerCommand(
						"propertiesService",
						"setProperties",
						[_selectionOfItems, "locationForNewElements", location]
					)
				);
				if (showDialog.visible) {
					CommunicationPlugin.getInstance().bridge.sendObject(
						new InvokeServiceMethodServerCommand(
							"propertiesService",
							"setProperties",
							[_selectionOfItems, "showLocationForNewElementsDialog", showDialog.selected]
						)
					);
				}
				var result:Object = new Object();
				result.location = location;
				result.options = _options;
				_resultHandler.handleDialogResult(result);
				cancelHandler();
			}
			
			private function cancelHandler():void {
				CommunicationPlugin.getInstance().statefulClientRegistry.unregister(treeList.statefulClient, null);
				FlexUtilGlobals.getInstance().popupHandlerFactory.removePopup(this);	
			}
						
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:HGroup id="buttonBar" width="100%" horizontalAlign="right" verticalAlign="middle">
			<s:VGroup height="100%" width="100%">
				<s:CheckBox label="{EditorModelPlugin.getInstance().getMessage('locationNewElements.showDialog')}" 
							id="showDialog" 
							visible="{showNewElementsPathDialogCheckBox}"
							selected="{_currentShowNewElementsPathDialog}" width="100%"/>
				<s:Label color="0x808080" text="{EditorModelPlugin.getInstance().getMessage('locationNewElements.showDialogInfo')}" />
			</s:VGroup>			
			<s:Button id="ok" label="{CommonPlugin.getInstance().getMessage('ok')}" click="okHandler()" width="70"/>
			<s:Button id="cancel" label="{CommonPlugin.getInstance().getMessage('cancel')}" click="cancelHandler()" width="70"/>			
		</s:HGroup>		
		<fx:Array id="validators">
			<mx:StringValidator source="{locationTxt}" property="text" minLength="1"/>			
		</fx:Array>	
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout verticalAlign="middle" horizontalAlign="left"/>
	</s:layout>
	
	<s:HGroup gap="0" width="100%">
		<s:Label text="{EditorModelPlugin.getInstance().getMessage('locationNewElements.location')}" />
		<s:Label text="{EditorModelPlugin.getInstance().getMessage('locationNewElements.locationInfo')}" color="0x808080"/>
	</s:HGroup>
	
	<tree:GenericTreeList id="treeList" width="100%" height="100%" change="{_currentLocationForNewElements=TreeNode(treeList.getSelection().getItemAt(0)).getPath()}"/>
	
	<s:TextInput width="100%" id="locationTxt" text="{_currentLocationForNewElements}" />
	
</s:Group>
