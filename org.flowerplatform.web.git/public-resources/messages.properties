git.repositories = Git Repositories

git.localBranches = Local Branches
git.remoteBranches = Remote Branches
git.tags = Tags
git.remotes = Remotes
git.workingDirectories = Working Directories

##########################################################
# GIT
##########################################################

git.perspective.name = Git Repository Exploring
git.repositories.view.name = Git Repositories

git.action.cannotExecute = The state of the selected element(s) don't allow the execution of the current action.
	
git.login.title = Git Login
git.login.username = Username:
git.login.password = Password:
git.login.repository = Repository:
git.login.message = Git login credentials are not stored on the server.\nYou will be prompted once per session.

git.checkoutBranch.title = Checkout Branch
git.checkoutBranch.branch.label = Name:
git.checkoutBranch.remote.label = Remote:
git.checkoutBranch.upstream.label = Upstream Branch:

git.deleteBranch.message = Are you sure you want to delete selected branches? \nNote: Branches that aren't fully merged in their upstream branch or HEAD will be deleted also.
git.deleteTag.message = Are you sure you want to delete selected tags?

git.deleteRepo.monitor.title = Deleting repositories
git.deleteRepo.monitor.message = Deleting repository {0}
git.deleteRepo.error = Unable to delete repositories!
git.deleteRepo.message = Are you sure you want to delete selected repository?\n\n\
Note:\n\
The projects that belong to the removed repository will be deleted from the workspace. 

git.page.populate.error = Unable to initialize page with data!

git.repo.bare = Repository is bare!
git.different.repo.error = Selected elements are from different repositories!

git.createTag.title = Create New Tag
git.createTag.commit = Choose commit that should be associated with this tag:
git.createTag.name = Tag name:
git.createTag.message = Tag message:
git.createTag.errorWhileGettingRevCommits = An error occurred while getting list of commits.
git.createTag.error = An error occurred while tagging.

git.cloneWizard.validate.spinner = Validate Repository URI ...
git.cloneWizard.cloneRepo.spinner = Cloning repository ...
git.cloneWizard.noBranchSelected.error = At least one branch must be selected.
git.cloneWizard.repoExists.error = A Git Repository with the same name already exists!
git.cloneWizard.importProjects.info = To import projects, select them from the Git Repositories View -> Right Click -> Import Project(s)
git.cloneWizard.branch.title = Branch Selection
git.cloneWizard.branch.description = Select branches to clone from remote repository. Remote tracking branches will be created to track updates for these branches in the remote repository.
git.cloneWizard.branch.branchOf = Branches of {0}:
git.cloneWizard.branch.filter = Type filter text
git.cloneWizard.branch.cannotListBranches = Cannot list the available branches.
git.cloneWizard.branch.cannotCreateTempRepo = Couldn't create temporary repository.
git.cloneWizard.branch.remoteListingCancelled = Operation canceled
git.cloneWizard.error = Unable to clone repository {0}!
git.clone.monitor.title = Cloning from {0}

git.cloneWizard.cloneConfig.title = Clone Configuration
git.cloneWizard.cloneConfig.description = Configure the local storage location.
git.cloneWizard.cloneConfig.initBranch = Initial branch:
git.cloneWizard.cloneConfig.remoteName = Remote name:
git.cloneWizard.cloneConfig.cloneSubmodules = Clone Submodules

git.createRepoWizard.spinner = Creating repository ...
git.createRepoWizard.bareRepo.info = An empty repository has been created. \nYou can fetch data from remote repositories or you can add new local projects, via Project Explorer View -> Right Click on project -> Team -> Share Project: GIT
git.createRepoWizard.title = Create a New Git Repository
git.createRepoWizard.description = Please enter the repository name
git.createRepoWizard.name = Name:
git.createRepoWizard.bareRepo = Create as bare repository
git.createRepoWizard.error = Unable to create repository!

git.createVirtualRepo.title = Create a Virtual Git Repository
git.createVirtualRepo.spinner = Creating Virtual Git Repository ...
git.createVirtualRepo.repoName.label =  Repository:
git.createVirtualRepo.virtualRepoName.label = Name:
git.createVirtualRepo.note = Note:\n\
In order to have several versions of your project(s) imported in the workspace \
(e.g. a trunk branch that you use for collaborative work and several \
tag branches that people use in a read-only mode to view source \
code and diagrams), you need to have multiple GIT working directories.\n\n\
We call them 'virtual working directories', and they are in fact symbolic links \
(i.e. they don't duplicate data) that point towards the original local \
GIT repository.\n\
They also have some GIT metadata (pointers towards the current branch).												
git.createVirtualRepo.repoWithTheSameNameExists = A virtual working directory with the same name already exists! Choose another name!
git.createVirtualRepo.cannotCreateVirtualBareRepo = {0} is a bare repository! Yout must change it to a non-bare repository to create a virtual working directory!
git.createVirtualRepo.error = Unable to create virtual repository %s for %s!

git.checkout.nonDeletedFiles.message = The files below could not be deleted, \nperhaps because of some temporary file locks\nor because a directory represents a submodule
git.checkout.nonDeletedFiles.title = Not deleted Files
git.checkout.checkoutConflicts.message = The files shown below have uncommitted changes which would be lost by checking out {0}.\n\nEither commit the changes, or discard the changes by resetting the current branch.
git.checkout.checkoutConflicts.title = Checkout Conflicts
git.checkout.monitor.title = Switch
git.checkout.monitor.message = Switching to {0}
git.checkout.detachedHead.title = Detached HEAD
git.checkout.detachedHead.message = You are in the 'detached HEAD' state. This means that you don't have a local branch checked out.\n\nYou can look around, but it's not recommended to commit changes. The reason is that these commits would not be on any branch and would not be visible after checking out another branch.\n\nIf you want to make changes, create or checkout a local branch first.
git.checkout = Checkout
git.checkout.title = Checkout a ref

git.resetPage.title = Reset
git.resetPage.description = Select the type of reset to perform.
git.resetPage.current = Current HEAD:
git.resetPage.resettingTo = Resetting to: 
git.resetPage.resetType = Reset type:
git.resetPage.softType = Soft (HEAD updated)
git.resetPage.mixedType = Mixed (HEAD and index updated)
git.resetPage.hardType = Hard (HEAD, index and working directory updated)
git.resetPage.monitor.title = Reset
git.resetPage.monitor.message = Performing {0} reset to {1}
git.resetPage.subTitle = Reset: {0}
git.resetPage.description = Select a branch to reset the current branch to

git.createRemoteWizard.title = Create New Remote
git.configRemoteWizard.title = Configure remote
git.createRemoteWizard.remoteName = Remote name:
git.createRemoteWizard.atLeastOneConfig = You need to configure the new remote for fetch or/and push!
git.createRemoteWizard.remoteExists = Remote {0} already exists!

git.fetchSpecPage.title = Configure Fetch
git.fetchSpecPage.subtitle = Configure fetch for remote {0} 
git.pushSpecPage.title = Configure Push
git.pushSpecPage.subtitle = Configure push for remote {0} 
git.fetchRefSpecPage.refMappings = Fetch ref specs:
git.pushRefSpecPage.refMappings = Push ref specs:
git.refSpecPage.annotatedTagsGroup = Annotated tags fetching strategy
git.refSpecPage.annotatedTagsAutoFollow = Automatically follow tags if we fetch the thing they point at
git.refSpecPage.annotatedTagsFetchTags = Always fetch tags, even if we do not have the thing it points at
git.refSpecPage.annotatedTagsNoTags = Never fetch tags, even if we have the thing it points at
git.refSpecPage.saveSpec = Save specifications in {0} configuration

git.editRefSpecPage.hint = \
<p>The format of a refspec is <br>\
<b>[+]source-branch:destination-branch.</b></p>
git.editRefSpecPage.title = Create/Edit a Refspec
git.editRefSpecPage.ref.label = Refspec:
git.uri.label = URI:

git.importProjects.projectLocation.title = Import Project
git.importProjects.projectLocation.description = Enter the project location for {0}.
git.importProjects.projectLocation.descriptionDetails = {0} of {1}
git.importProjects.save.label = Save
git.importProjects.javaBuild.title = Java Settings
git.importProjects.javaBuild.description = Define the Java build settings.
git.importProjects.error = Unable to import project {0}!
git.importProjects.listProjects.projects = Projects:
git.importProjects.importExistingProjects = Import existing projects
git.importProjects.importAsProjects = Import selected folders as projects
git.importProjects.title = Import Projects
git.importProjects.description = Import projects from a Git repository
git.importProjects.emptySelection = At least one existing project must be selected!
git.importProjects.verifyLocation.spinner = Verifying project location ...
git.importProjects.importProject.spinner = Importing project ...
git.importProjects.next.tooltip = Go to first project import wizard
git.importProjects.projectLocation.next.tooltip = Import Project and go to Java Build Path properties
git.importProjects.save.tooltip = Save Java Build Path properties and go to next project import wizard
git.importProjects.cancel.tooltip = Cancel current import project wizard and go to next project
git.importProjects.cancel.all.tooltip = Cancel all imports

git.repoSelection.title = Source Git Repository
git.repoSelection.description = Enter the location of the source repository.
git.repoSelection.configRemote.label = Remote:
git.repoSelection.customUri.label = URI: 

git.commitPage.title = Commit Changes to Git Repository
git.commitPage.message = Commit message:
git.commitPage.author = Author:
git.commitPage.committer = Committer:
git.commitPage.files = Files:
git.commitPage.amend = Amend Previous Commit
git.precommit.monitor.title = Prepare commit
git.precommit.monitor.message = Calculating changes in selected repositories
git.commit.repositoryState = Repository state: {0}
git.commit.amend.tooltip = Amend Previous Commit
git.commit.untracked.tooltip = Show Untracked Files
git.commit.author.tooltip = \
<p>The author and committer fields must have the following format: \
<b>name &lt;email&gt;</b>. </p>
git.commit.monitor.title = Commit
git.commit.monitor.message = Performing commit
git.commit.couldNotFindRepositoryMapping = Could not find RepositoryMapping for {0}
git.commit.errorParsingPersonIdent = The person ident {0} could not be parsed.
git.commit.errorDifferentRepositories = Choose resources from the same repository!
git.commit.error = Unable to commit resources!

git.cherryPick.monitor.title = Cherry Picking Commit {0}
git.cherryPick.noCherryPickPerformed.message = The change has already been included
git.cherryPick.noCherryPickPerformed.title = No cherry pick performed
git.cherryPick.cherryPickConflicts.message = Cherry pick could not be completed automatically because of conflicts. Please resolve and commit.
git.cherryPick.cherryPickConflicts.title = Cherry Pick Conflicts
git.cherryPick.cherryPickFailed.message = Cherry pick failed

git.revert.monitor.title = Reverting Commit {0}
git.revert.alreadyReverted.message = The change has already been reverted
git.revert.noRevert.title = No revert performed
git.revert.failed = The revert failed

git.targetRefPage.title = Select push destination
git.targetRefPage.description = Select target to push {0} to
git.targetRefPage.force = Force update
git.targetRefPage.target = Target Ref Name:

git.fetch.result = Fetch result 
git.fetch.monitor.title = Fetching ...
git.fetch.error = Unable to fetch!

git.push.result = Push result 
git.push.monitor.title = Pushing ...
git.push.error = Unable to push!

git.deleteRemote.message = Are you sure you want to remove remote configuration {0}?
git.deleteRemote.error = Unable to delete remote!

git.changeCredentials.title = Change Credentials
git.changeCredentials.error = Unable to change credentials!

git.clearCredentials.error = Unable to clear credentials!

git.merge.title = Merge {0}
git.merge.description = Select a branch/tag to merge into the {0} branch
git.merge = Merge
git.merge.options = Merge options
git.merge.commitOption = Commit (commit the result)
git.merge.squashOption = Squash (do not make a commit)
git.merge.selectRef = Select a branch/tag! 

git.merge.mergeOperation.checkoutConflict = Checkout conflict: Your local changes to {0}\nwould be overwritten by merge.  Aborting. Commit your changes before you can merge.
git.merge.mergeOperation.internalError = An internal error occurred
git.merge.mergeOperation.mergeFailedNoHead = Merge failed: Reference to HEAD does not exist
git.merge.mergeOperation.mergeFailedRefUpdate = Merge failed: Another process is accessing the ref
git.merge.result = Merge result 
git.merge.cannotMerge = Cannot merge now
git.merge.headIsNoBranch = HEAD is not pointing to a branch
git.merge.wrongRepositoryState = The current repository state {0} does not allow merging

git.rebase.title = Rebase {0}
git.rebase = Rebase
git.rebase.subTitle = Rebase the currently checked out branch onto another branch
git.rebase.description = Select a branch other than the {0} branch
git.rebase.result = Rebase result 
git.rebase.noLocalBranch = No local branch checked out!

git.renameBranch.title = Rename Branch
git.renameBranch.description = Please enter a new name for branch {0}
git.renameBranch.newName = New Branch name:

git.configBranch.title = Git Branch Configuration
git.configBranch.description = Edit the upstream configuration for branch {0}
git.configBranch.upstream = Upstream Branch:
git.configBranch.remote = Remote:
git.configBranch.rebase = Rebase

git.validRef.invalidRefNameMessage = {0} is not a valid name for a ref
git.validRef.refAlreadyExistsMessage = Ref {0} already exists
git.validRef.refNameConflictsWithExistingMessage = Name conflicts with existing refs: {0}
git.validRef.canNotResolveRefMessage = Can not resolve {0}

git.clean.monitor = Cleaning selected items...
git.clean.title = Clean Repository
git.clean.subTitle = Select items to clean
git.clean.includeIgnored = Include ignored resources

git.garbage.monitor.title = Collecting garbage...

git.share.subTitle = Share Project
git.share.description = Configure GIT Repository
git.share.repo = Repository: 
git.share.pathWithinRepo = Path within repository: 
git.share.monitor = Sharing project...
git.share.projectDeleted = Project has been deleted!

git.disconnect.monitor.message = Disconnecting...

git.addToIndex.failed = Failed to add resource to index
git.addToIndex.monitor.message = Adding Resources to Git Index

git.removeFromIndex.monitor.message = Removing Resources from Git index

git.untrack.monitor.message = Untracking (removing) resources
git.untrack.writeIndex = Writing index for {0}
git.untrack.failed = Failed to untrack resource.

git.configPage.subTitle = Configuration

git.editConfigEntryPage.title = Edit configuration entry
git.configPage.key.label = Key
git.configPage.value.label = Value

git.pull.detachedHead = No local branch is currently checked out
git.pull.notConfigured = The current branch is not configured for pull
git.pull.monitor.message = Pulling {0} repository
git.pull.result = Pull result

git.branch.selection.title = Branch Selection

##########################################################
# REPOSITORY
##########################################################

git.action.repo.menu = Git Repositories

git.action.new.label = New
git.action.new.sortIndex = 10

git.action.createRepo.label = Create Repository
git.action.createRepo.sortIndex = 10

git.action.cloneRepo.label = Clone Repository 
git.action.cloneRepo.sortIndex = 20

git.action.createVirtualRepo.label = Create Virtual Repository
git.action.createVirtualRepo.sortIndex = 30

git.action.clean.label = Clean...
git.action.clean.sortIndex = 40

git.action.garbage.label = Collect Garbage
git.action.garbage.sortIndex = 41

git.action.deleteRepo.label = Delete Repository
git.action.deleteRepo.sortIndex = 50

git.action.createBranch.label = Create Branch...
git.action.createBranch.sortIndex = 20

git.action.renameBranch.label = Rename Branch...
git.action.renameBranch.sortIndex = 21

git.action.configBranch.label = Configure Branch...
git.action.configBranch.sortIndex = 22

git.action.deleteBranch.label = Delete Branch
git.action.deleteBranch.sortIndex = 23

git.action.createTag.label = Create Tag...
git.action.createTag.sortIndex = 40

git.action.deleteTag.label = Delete Tag
git.action.deleteTag.sortIndex = 50

git.action.simpleCheckout.label = Checkout
git.action.simpleCheckout.sortIndex = 11

git.action.pushBranch.label = Push Branch...
git.action.pushBranch.sortIndex = 12

git.action.pushTag.label = Push Tag...
git.action.pushTag.sortIndex = 13

git.action.importProjects.label = Import Project(s)...
git.action.importProjects.sortIndex = 60

git.action.createRemote.label = Create Remote...
git.action.createRemote.sortIndex = 200

git.action.configRemote.label = Configure Remote...
git.action.configRemote.sortIndex = 210

git.action.deleteRemote.label = Delete Remote
git.action.deleteRemote.sortIndex = 220

git.action.refresh.label = Refresh
git.action.refresh.sortIndex = 1000

git.action.fetch.label = Fetch...
git.action.fetch.sortIndex = 15

git.action.push.label = Push...
git.action.push.sortIndex = 16

git.action.pull.sortIndex = 17

git.action.checkout.label = Checkout...
git.action.checkout.sortIndex = 150

git.action.merge.sortIndex = 151

git.action.rebase.sortIndex = 152

git.action.reset.label = Reset...
git.action.reset.sortIndex = 153

git.action.fetchFromRemote.label = Fetch
git.action.fetchFromRemote.sortIndex = 26

git.action.configFetch.label = Configure Fetch...
git.action.configFetch.sortIndex = 27

git.action.pushFromRemote.label = Push
git.action.pushFromRemote.sortIndex = 26

git.action.configPush.label = Configure Push...
git.action.configPush.sortIndex = 27

git.action.changeCredentials.label = Change Credentials...
git.action.changeCredentials.sortIndex = 28

git.action.clearCredentials.label = Clear Credentials
git.action.clearCredentials.sortIndex = 29

git.action.deleteFetch.label = Delete Fetch
git.action.deleteFetch.sortIndex = 30

git.action.deletePush.label = Delete Push
git.action.deletePush.sortIndex = 30

git.action.showHistory.label = Show History
git.action.showHistory.sortIndex = 300

git.action.copyPath.label = Copy Path to Clipboard
git.action.copyPath.sortIndex = 310

git.action.properties.label = Properties
git.action.properties.sortIndex = 320

##########################################################
# TEAM
##########################################################

git.action.commit.label = Commit...
git.action.commit.team.sortIndex = 10

git.action.showHistory.team.sortIndex = 500

git.action.pull.label = Pull
git.action.pull.team.sortIndex = 20

git.action.checkout.team.sortIndex = 50

git.action.merge.label = Merge...
git.action.merge.team.sortIndex = 51

git.action.rebase.label = Rebase...
git.action.rebase.team.sortIndex = 52

git.action.reset.team.sortIndex = 53

git.action.addToIndex.label = Add to Index
git.action.addToIndex.team.sortIndex = 60

git.action.removeFromIndex.label = Remove from Index
git.action.removeFromIndex.team.sortIndex = 61

git.action.ignore.label = Ignore
git.action.ignore.team.sortIndex = 62

git.action.untrack.label = Untrack
git.action.untrack.team.sortIndex = 63

git.action.share.label = Share GIT Project...
git.action.share.team.sortIndex = 1000

git.action.disconnect.label = Disconnect
git.action.disconnect.team.sortIndex = 999

##########################################################
# GIT HISTORY
##########################################################

git.history.view = Git History

git.history.projectType = Project
git.history.folderType = Folder
git.history.fileType = File
git.history.file.pattern = {0}: {1} [{2}]
git.history.repo.pattern = Repository: {0}

git.history.commitMessage.author = Author
git.history.commitMessage.child = Child
git.history.commitMessage.branches = Branches
git.history.commitMessage.moreBranches = \ and {0} more branches
git.history.commitMessage.tags = Tags
git.history.commitMessage.commit = commit
git.history.commitMessage.committer = Committer
git.history.commitMessage.parent = Parent

git.history.filterfolder.tooltip = Show all changes in parent folder of the selected resource
git.history.filterproject.tooltip = Show all changes in project containing the selected resource
git.history.filterrepo.tooltip = Show all changes in repository containing the selected resource
git.history.filterresource.tooltip = Show all changes of selected resource and its children

git.history.action.checkout.label = Checkout
git.history.action.checkout.sortIndex = 10

git.history.action.push.label = Push Commit...
git.history.action.push.sortIndex = 20

git.history.action.createBranch.label = Create Branch...
git.history.action.createBranch.sortIndex = 30

git.history.action.createTag.label = Create Tag...
git.history.action.createTag.sortIndex = 40

git.history.action.cherryPick.label = Cherry Pick
git.history.action.cherryPick.sortIndex = 50

git.history.action.revert.label = Revert Commit
git.history.action.revert.sortIndex = 60

git.history.action.merge.label = Merge
git.history.action.merge.sortIndex = 70

git.history.action.rebase.label = Rebase on Top of 
git.history.action.rebase.sortIndex = 80

git.history.menu.reset.label = Reset
git.history.menu.reset.sortIndex = 90

git.history.action.resetSoft.sortIndex = 1
git.history.action.resetMixted.sortIndex = 2
git.history.action.resetHard.sortIndex = 3

git.history.action.copy.label = Copy
git.history.action.copy.sortIndex = 100

##########################################################
# GIT REFLOG
##########################################################

git.reflog.view = Git Reflog

git.reflog.action.checkout.label = Checkout
git.reflog.action.checkout.sortIndex = 10

git.reflog.action.copy.label = Copy

##########################################################
# GIT STAGING
##########################################################

git.staging.view = Git Staging

git.staging.unstagedChanges = Unstaged Changes:
git.staging.stagedChanges = Staged Changes:
git.staging.commit = Commit
git.staging.noRepositorySelected = No Repository Selected

git.staging.action.addToIndex = Add to Git Index
git.staging.action.removeFromIndex = Remove from Git Index
git.staging.action.delete = Delete