<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
 @author Cristina Constantinescu
-->
<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 
			 sortableColumns="false" 
			 labelFunction="getLabelForItem"
			
			 initialize="initializeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.flexutil.action.ComposedAction;
			import org.flowerplatform.flexutil.action.IAction;
			import org.flowerplatform.flexutil.context_menu.FillContextMenuEvent;
			import org.flowerplatform.web.git.GitPlugin;
			import org.flowerplatform.web.git.common.GitCommonPlugin;
			import org.flowerplatform.web.git.history.action.CheckoutAction;
			import org.flowerplatform.web.git.history.action.CherryPickAction;
			import org.flowerplatform.web.git.history.action.CopyIdToClipboardAction;
			import org.flowerplatform.web.git.history.action.MergeAction;
			import org.flowerplatform.web.git.history.action.RebaseAction;
			import org.flowerplatform.web.git.history.action.ResetAction;
			import org.flowerplatform.web.git.history.action.RevertAction;
			import org.flowerplatform.web.git.history.remote.dto.HistoryEntryDto;
			
			private var historyView:GitHistoryView = GitPlugin.getInstance().getHistoryView();
			
			private function getLabelForItem(item:Object, column:DataGridColumn):String {
				var label:String;
				if (column.dataField == "shortId") {
					label = HistoryEntryDto(item).shortId;
				} else if (column.dataField == "author") {
					label = HistoryEntryDto(item).author;
					if (historyView.btnShowEmail.selected) {
						label += ' <' + HistoryEntryDto(item).authorEmail + '>';
					}
				} else if (column.dataField == "committer") {
					label = HistoryEntryDto(item).committer;
					if (historyView.btnShowEmail.selected) {
						label += ' <' + HistoryEntryDto(item).committerEmail + '>';
					}
				} else if (column.dataField == "authoredDate") {
					label = formatDateTime.format(HistoryEntryDto(item).authoredDate);
				} else if (column.dataField == "committeredDate") {
					label = formatDateTime.format(HistoryEntryDto(item).committeredDate);
				}
				return label;
			}
				
			private function fillContextMenuHandler(event:FillContextMenuEvent):void {
				if (selectedItem == null) {
					return;
				}
				var actions:Vector.<IAction> = new Vector.<IAction>();
				
				actions.push(new CheckoutAction());				
				actions.push(new CherryPickAction());
				actions.push(new RevertAction());
				actions.push(new MergeAction());
				actions.push(new RebaseAction());
				
				var resetMenu:ComposedAction = new ComposedAction();
				resetMenu.label = GitPlugin.getInstance().getMessage("git.history.menu.reset.label");
				resetMenu.orderIndex = int(GitPlugin.getInstance().getMessage("git.history.menu.reset.sortIndex"));
				resetMenu.icon = GitCommonPlugin.getInstance().getResourceUrl("images/full/obj16/reset.gif");
				resetMenu.id = "reset";
				actions.push(resetMenu);
				
				actions.push(new ResetAction(0));
				actions.push(new ResetAction(1));
				actions.push(new ResetAction(2));
				
				actions.push(new CopyIdToClipboardAction());
						
				event.allActions = actions;
				event.selection = new ArrayCollection([selectedItem]);	
				if (event.context == null) {
					event.context = new Object();
				}				
				event.context.repository = historyView.info.repositoryLocation;
			}

			protected function initializeHandler(event:FlexEvent):void {
				addEventListener(FillContextMenuEvent.FILL_CONTEXT_MENU, fillContextMenuHandler);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:DateFormatter id="formatDateTime" formatString="MM/DD/YYYY HH:NN" />
		
	</fx:Declarations>
		
	<mx:columns>
		<mx:DataGridColumn headerText="" width=".10" dataField="drawings" 
						   itemRenderer="org.flowerplatform.web.git.history.HistoryDrawingBox" />			
		
		<mx:DataGridColumn headerText="Id" width=".06" dataField="shortId" />
		<mx:DataGridColumn headerText="Message" width=".30" dataField="message" >
			<mx:itemRenderer>
				<fx:Component>
					<mx:VBox horizontalScrollPolicy="off">
						<fx:Script>
							<![CDATA[								
								import org.flowerplatform.web.git.history.remote.dto.HistoryEntryDto;
								
							]]>
						</fx:Script>								
						<mx:Label htmlText="{'&lt;p&gt;&lt;b&gt;' + HistoryEntryDto(data).specialMessage + '&lt;/b&gt; ' + HistoryEntryDto(data).message + '&lt;/p&gt;'}"/>
					</mx:VBox>												
				</fx:Component>
			</mx:itemRenderer>
		</mx:DataGridColumn>
		<mx:DataGridColumn headerText="Author" width=".15" dataField="author" />				
		<mx:DataGridColumn headerText="Authored Date" width=".12" dataField="authoredDate" />
		<mx:DataGridColumn headerText="Committer" width=".15" dataField="committer" />			
		<mx:DataGridColumn headerText="Committered Date" width=".12" dataField="committeredDate" />				
	</mx:columns>
	
</mx:DataGrid>