<?xml version="1.0" encoding="utf-8"?>
<!-- 
	license-start
 
	Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3.
	 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
	
	Contributors:
	  Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.
 
	license-end
-->
<!--
 @author Cristina
 @flowerModelElementId _vcQHUDV2EeKsnMbt6YrXWQ
-->
<ns:Wizard xmlns:ns="com.crispico.flower.util.popup.*"
		   xmlns:mx="http://www.adobe.com/2006/mxml"
		   titleIconURL="{GitPlugin.getInstance().getResourceUrl('images/full/obj16/import_prj.gif')}"
		   title="{GitPlugin.getInstance().getMessage('git.action.importProjects.label')}"
		   width="500" height="450" minWidth="500" minHeight="450"
		   showCloseButton="true"		   
		   xmlns:panel="com.crispico.flower.util.panel.*" 
		   xmlns:common="com.crispico.flower.flexdiagram.util.common.*" >
	<mx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.web.git.GitPlugin;
			import org.flowerplatform.web.git.dto.ImportProjectPageDto;
			import org.flowerplatform.web.git.dto.ProjectDto;

			public var selectedNodes:ArrayList;
			
			[Bindable]
			private var dto:ImportProjectPageDto;
						
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				
				wizardImage.source = GitPlugin.getInstance().getResourceUrl("images/newconnect_wizban.png");
				
				ModalSpinner.addModalSpinner(this, CommonPlugin.getInstance().getMessage('spinner.gettingData'));
				// get data from server to populate current page
				GitPlugin.getInstance().service.getProjects(selectedNodes, this, getProjectsCallbackHandler);
			}
				
			private function getProjectsCallbackHandler(result:ImportProjectPageDto):void {
				ModalSpinner.removeModalSpinner(this);
				if (result != null) {
					dto = result;
				} else {
					super.closeForm();
				}
			}
					
			private function changeSelection():void {
				projectsArea.enabled = importExistingProjects.selected;			
			}
			
			/**
			 * @flowerModelElementId _gORZ4DV5EeKsnMbt6YrXWQ
			 */
			protected override function finishClickHandler():void {	
				ModalSpinner.addModalSpinner(this);
				if (group.selection == importExistingProjects) {
					var selectedProjects:ArrayCollection = new ArrayCollection();
					if (selectedProjects.length == 0) {								
						for each (var project:ProjectDto in dto.existingProjects) {
							if (project.getSelected()) {
								selectedProjects.addItem(project);
							}
						}
					}
					GitPlugin.getInstance().service.importExistingProjects(selectedProjects, this, finishResponseHandler);	
				} else {
					GitPlugin.getInstance().service.importAsProjects(dto.selectedFolders, this, finishResponseHandler);	
				}
			}
			
			private function finishResponseHandler(value:ArrayCollection):void {
				ModalSpinner.removeModalSpinner(this);
				super.finishClickHandler();
			}
							
		]]>
	</mx:Script>
		
	<ns:states>				
		<mx:State name="0">			
			<mx:SetProperty target="{wizardTitle}" name="text" value="{GitPlugin.getInstance().getMessage('git.importProjects.title')}"/>
			<mx:SetProperty target="{wizardDescription}" name="text" value="{GitPlugin.getInstance().getMessage('git.importProjects.description')}"/>	
			<mx:SetProperty target="{next}" name="visible" value="false"/>
			<mx:SetProperty target="{back}" name="visible" value="false"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<panel:CustomTitlePanel headerHeight="0" borderStyle="none"
										width="100%" height="100%">							
					<mx:VBox width="100%" height="100%" verticalGap="3">	
						<mx:RadioButtonGroup id="group" change="changeSelection()" />
						
						<mx:RadioButton id="importAsProjects" group="{group}" 
										label="{GitPlugin.getInstance().getMessage('git.importProjects.importAsProjects')}"	/>		
						
						<mx:RadioButton id="importExistingProjects"  group="{group}" selected="true"
										label="{GitPlugin.getInstance().getMessage('git.importProjects.importExistingProjects')}" />
						
						<mx:VBox id="projectsArea" width="100%" height="100%">	
							<mx:Label text="{GitPlugin.getInstance().getMessage('git.importProjects.listProjects.projects')}" />
							<mx:List width="100%" height="80%" id="list" dataProvider="{dto.existingProjects}">			
								<mx:itemRenderer>
									<mx:Component>
										<mx:HBox horizontalScrollPolicy="off" horizontalGap="2">
											<mx:Script>
												<![CDATA[												
													import org.flowerplatform.web.git.dto.ProjectDto;
												]]>
											</mx:Script>
											<mx:CheckBox id="cbSelected" click="{ProjectDto(data).setSelected(!ProjectDto(data).getSelected())}" selected="{ProjectDto(data).getSelected()}" />
											<common:BitmapContainer id="image" creationComplete="{if (data != null) image.retrieveImage(data.image);}" width="20"/>			                    
											<mx:Label id="nameTxt" text="{data.name}"/>									
										</mx:HBox>
									</mx:Component>
								</mx:itemRenderer>
							</mx:List>					
						</mx:VBox>
						
					</mx:VBox>					 
				</panel:CustomTitlePanel>	
			</mx:AddChild>			
		</mx:State>		
	</ns:states>
	
</ns:Wizard>