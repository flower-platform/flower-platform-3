<?xml version="1.0" encoding="utf-8"?>
<!--
 @author Cristina
 @flowerModelElementId _jj2sgHH8EeK0WoOyJtfqdw
-->
<ns:Wizard xmlns:ns="com.crispico.flower.util.popup.*" xmlns:mx="http://www.adobe.com/2006/mxml"
		   titleIconURL="{GitPlugin.getInstance().getResourceUrl('images/full/obj16/commit.gif')}"
		   title="{GitPlugin.getInstance().getMessage('git.action.commit.label')}"
		   width="500" height="450" minWidth="500" minHeight="450"
		   showCloseButton="true" 
		   
		   xmlns:ui="com.crispico.flower.mp.web.git.repository.ui.*" 
		   xmlns:common="com.crispico.flower.flexdiagram.util.common.*"
		   xmlns:panel="com.crispico.flower.util.panel.*" 
		   xmlns:components="com.crispico.flower.mp.web.git.repository.ui.components.*" 
		   xmlns:utils="com.crispico.flower.mp.web.utils.*" 
		   xmlns:util="com.crispico.flower.util.*">

	<mx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.validators.Validator;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.web.git.GitPlugin;
			import org.flowerplatform.web.git.dto.CommitPageDto;
			import org.flowerplatform.web.git.dto.CommitResourceDto;
			
			public var selectedNodes:ArrayList;
			
			/**
			 * @flowerModelElementId _n-NGAHH-EeK0WoOyJtfqdw
			 */
			public var dto:CommitPageDto;
			
			/**
			 * @flowerModelElementId _Di9JkHIBEeK0WoOyJtfqdw
			 */
			[Bindable]
			public var commitResources:ArrayCollection;
			
			/**
			 * @flowerModelElementId _QCWJ0HH-EeK0WoOyJtfqdw
			 */
			protected override function creationCompleteHandler():void {
				super.creationCompleteHandler();
				
				wizardImage.source = GitPlugin.getInstance().getResourceUrl("images/newconnect_wizban.png");
				
				ModalSpinner.addModalSpinner(this, CommonPlugin.getInstance().getMessage('spinner.gettingData'));
				// get data from server to populate current page
				GitPlugin.getInstance().service.getCommitData(selectedNodes, this, getCommitDataCallbackHandler);				
			}
						
			private function getCommitDataCallbackHandler(result:CommitPageDto):void {
				ModalSpinner.removeModalSpinner(this);
				if (result != null) {
					dto = result;
					commitResources = dto.commitResources;
					commitResources.filterFunction = filterCommitResources;
					
					authorName.text = dto.author;
					committerName.text = dto.committer;
					commitMessage.text = dto.message;
				} else {
					super.closeForm();
				}				
			}
			
			protected function showUntackedClickHandler(event:MouseEvent):void {
				commitResources.refresh();
			}
			
			private function filterCommitResources(item:CommitResourceDto):Boolean {
				if (!btnShowUntracked.selected && (item.state == CommitResourceDto.UNTRACKED)) {
					return false;
				}
				return true;
			}
			
			protected function selectAllClickHandler(event:MouseEvent):void {
				for each (var res:CommitResourceDto in commitResources) {
					res.setSelected(true);
				}
				commitResources.refresh();
			}
			
			protected function unselectAllClickHandler(event:MouseEvent):void {
				for each (var res:CommitResourceDto in commitResources) {
					res.setSelected(false);
				}
				commitResources.refresh();
			}	
				
			private function getFiles():ArrayCollection {
				var files:ArrayCollection = new ArrayCollection();
				for each (var res:CommitResourceDto in commitResources) {
					if (res.getSelected()) {
						if ((res.state == CommitResourceDto.UNTRACKED) && !btnShowUntracked.selected) {
							continue;
						}
						files.addItem(res);
					}
				}
				return files;
			}

			/**
			 * @flowerModelElementId _r2db4HH8EeK0WoOyJtfqdw
			 */
			protected override function finishClickHandler():void {	
				// validate form
				if (Validator.validateAll(validators).length > 0) {
					return;
				}
				ModalSpinner.addModalSpinner(this, CommonPlugin.getInstance().getMessage("spinner.processing"));
				GitPlugin.getInstance().service.commit(
					dto.repository, getFiles(), authorName.text, committerName.text, commitMessage.text, amendCommit.selected, 
					this, commitCallbackHandler);	
			}	
			
			private function commitCallbackHandler(value:Boolean):void {
				ModalSpinner.removeModalSpinner(this);
				if (value) {
					super.finishClickHandler();
				}
			}
		]]>
	</mx:Script>
	
	<mx:Array id="validators">
		<mx:StringValidator source="{commitMessage}" property="text" minLength="1"/>
		<mx:StringValidator source="{authorName}" property="text" minLength="1"/>
		<mx:StringValidator source="{committerName}" property="text" minLength="1"/>		
		<mx:RegExpValidator source="{authorName}" property="text" expression="^(.+) [&lt;](.+)[&gt;]$" />		
		<mx:RegExpValidator source="{committerName}" property="text" expression="^(.+) [&lt;](.+)[&gt;]$" />
	</mx:Array>
	
	<ns:states>				
		<mx:State name="0">			
			<mx:SetProperty target="{wizardTitle}" name="text" value="{GitPlugin.getInstance().getMessage('git.commitPage.title')}"/>
			<mx:SetProperty target="{finish}" name="enabled" value="{commitMessage.text != ''}"/>
			<mx:SetProperty target="{next}" name="visible" value="false"/>
			<mx:SetProperty target="{back}" name="visible" value="false"/>
			
			<mx:AddChild relativeTo="{contentArea}">
				<panel:CustomTitlePanel headerHeight="0" borderStyle="none"
										width="100%" height="100%">							
					<mx:VBox width="100%" height="100%" verticalGap="3">
						<mx:HBox width="100%">
							<mx:Label text="{GitPlugin.getInstance().getMessage('git.commitPage.message')}" />
							<mx:Spacer width="100%" />
							<util:ButtonWithIconComponent id="amendCommit" width="22" height="22" toggle="true" 
														  toolTip="{GitPlugin.getInstance().getMessage('git.commit.amend.tooltip')}"
														  creationComplete="{amendCommitImage.retrieveImage(GitPlugin.getInstance().getResourceUrl('images/full/obj16/commit_amend.gif'))}" >
								<util:iconComponent>
									<common:BitmapContainer id="amendCommitImage" />	
								</util:iconComponent>
							</util:ButtonWithIconComponent>
						</mx:HBox>						
						<mx:TextArea id="commitMessage" width="100%" height="20%"/>
								
						<mx:Spacer height="10" />
						<mx:HBox width="100%" verticalAlign="middle">
							<mx:VBox width="100%">
								<mx:FormItem label="{GitPlugin.getInstance().getMessage('git.commitPage.author')}" width="100%" labelWidth="70">
									<mx:TextInput id="authorName" width="100%" />	
								</mx:FormItem>
								<mx:FormItem label="{GitPlugin.getInstance().getMessage('git.commitPage.committer')}" width="100%" labelWidth="70">
									<mx:TextInput id="committerName" width="100%"/>	
								</mx:FormItem>								
							</mx:VBox>							
							<util:HintButton id="hintButton" toolTip="{GitPlugin.getInstance().getMessage('git.commit.author.tooltip')}"/>
						</mx:HBox>					
						
						<mx:Spacer height="15" />
						<mx:HBox width="100%" horizontalGap="2">
							<mx:Label text="{GitPlugin.getInstance().getMessage('git.commitPage.files')}" />
							<mx:Spacer width="100%" />
							<util:ButtonWithIconComponent id="btnShowUntracked" selected="true"
														  width="22" height="22" toggle="true" click="showUntackedClickHandler(event)"
														  toolTip="{GitPlugin.getInstance().getMessage('git.commit.untracked.tooltip')}"
														  creationComplete="{untrackedImage.retrieveImage(GitPlugin.getInstance().getResourceUrl('images/full/obj16/untracked_file.gif'))}" >
								<util:iconComponent>
									<common:BitmapContainer id="untrackedImage" />	
								</util:iconComponent>
							</util:ButtonWithIconComponent>
							<util:ButtonWithIconComponent width="22" height="22" click="selectAllClickHandler(event)"
														  toolTip="{CommonPlugin.getInstance().getMessage('select.all')}"
														  creationComplete="{checkAllImage.retrieveImage(GitPlugin.getInstance().getResourceUrl('images/full/obj16/check_all.gif'))}" >
								<util:iconComponent>
									<common:BitmapContainer id="checkAllImage" />	
								</util:iconComponent>
							</util:ButtonWithIconComponent>
							<util:ButtonWithIconComponent width="22" height="22" click="unselectAllClickHandler(event)"
														  toolTip="{CommonPlugin.getInstance().getMessage('deselect.all')}"
														  creationComplete="{uncheckAllImage.retrieveImage(GitPlugin.getInstance().getResourceUrl('images/full/obj16/uncheck_all.gif'))}" >
								<util:iconComponent>
									<common:BitmapContainer id="uncheckAllImage" />	
								</util:iconComponent>
							</util:ButtonWithIconComponent>							
						</mx:HBox>		
						
						<mx:List width="100%" height="80%" dataProvider="{commitResources}" id="list">			
							<mx:itemRenderer>
								<mx:Component>
									<mx:HBox horizontalScrollPolicy="off" horizontalGap="2">
										<mx:Script>
											<![CDATA[
												import org.flowerplatform.web.git.dto.CommitResourceDto;
												
											]]>
										</mx:Script>
										<mx:CheckBox id="cbSelected" click="{CommitResourceDto(data).setSelected(!CommitResourceDto(data).getSelected())}" selected="{CommitResourceDto(data).getSelected()}" />
										<common:BitmapContainer id="image" creationComplete="{if (data != null) image.retrieveImage(data.image);}" width="20"/>			                    
										<mx:Label id="nameTxt" text="{data.label}"/>									
									</mx:HBox>
								</mx:Component>
							</mx:itemRenderer>
						</mx:List>
					</mx:VBox>					 
				</panel:CustomTitlePanel>				
			</mx:AddChild>
		</mx:State>		
	</ns:states>
</ns:Wizard>