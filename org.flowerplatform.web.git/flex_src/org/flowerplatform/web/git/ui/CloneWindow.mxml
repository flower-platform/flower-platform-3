<?xml version="1.0" encoding="utf-8"?>
<!--
@author Cristina Constantinescu
-->
<ns:Wizard xmlns:ns="com.crispico.flower.util.popup.*" 
		   xmlns:mx="http://www.adobe.com/2006/mxml"
		   
		   titleIconURL="{GitPlugin.getInstance().getResourceUrl('images/full/obj16/cloneGit.gif')}"
		   title="{GitPlugin.getInstance().getMessage('git.action.cloneRepo.label')}"
		   width="500" height="450" minWidth="500" minHeight="450"
		   showCloseButton="true" 
		   
		   xmlns:component="org.flowerplatform.web.git.ui.component.*" 
		   xmlns:common="com.crispico.flower.flexdiagram.util.common.*" 
		   xmlns:panel="com.crispico.flower.util.panel.*" >
	
	<mx:Script>
		<![CDATA[
			import com.crispico.flower.util.spinner.ModalSpinner;
			
			import org.flowerplatform.flexutil.text.TextUtils;
			
			import mx.collections.ArrayCollection;
			
			import org.flowerplatform.common.CommonPlugin;
			import org.flowerplatform.communication.tree.remote.TreeNode;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			import org.flowerplatform.web.git.GitPlugin;
			import org.flowerplatform.web.git.dto.GitRef;
			
			public var selectedNode:TreeNode;
			
			private var allBranches:ArrayCollection;
			
			[Bindable]
			private var branches:ArrayCollection = new ArrayCollection(); /* of GitRef */
			
			private var head:GitRef;
			
			[Bindable]
			private var defaultRemoteName:String = "origin";
			
			override protected function creationCompleteHandler():void {
				super.creationCompleteHandler();		
				wizardImage.source = GitPlugin.getInstance().getResourceUrl("images/import_wiz.png");
				titleArea.height = 75;
				allBranches = new ArrayCollection();
				//it doesn't work by simply apply focus
				callLater(repositorySelectionPage.uri.setFocus);
			}	
			
			/**
			 * @flowerModelElementId _gvgoEDVgEeKsnMbt6YrXWQ
			 */
			protected override function nextClickHandler():void {
				if (currentState == "0") {
					ModalSpinner.addModalSpinner(this, GitPlugin.getInstance().getMessage("git.cloneWizard.validate.spinner"));
					GitPlugin.getInstance().service.
						validateRepositoryURL(selectedNode, repositorySelectionPage.getURI(), this, validateRepositoryCallbackHandler);					
				} else if (currentState == "1") {
					var selectedBranches:ArrayCollection = getSelectedBranches();
					// at least one branch must be selected in order to move further
					if (allBranches.length > 0 && selectedBranches.length == 0) {
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
							.setTitle(CommonPlugin.getInstance().getMessage("error"))
							.setText(GitPlugin.getInstance().getMessage("git.cloneWizard.noBranchSelected.error"))
							.showMessageBox();
					} else {
						super.nextClickHandler();						
					}
				}
			}
			
			/**
			 * @flowerModelElementId _mCRiMDVgEeKsnMbt6YrXWQ
			 */
			private function validateRepositoryCallbackHandler(value:int):void {
				ModalSpinner.removeModalSpinner(this);
				switch (value) {
					case 1:
						FlexUtilGlobals.getInstance().messageBoxFactory.createMessageBox()
							.setTitle(CommonPlugin.getInstance().getMessage("error"))
							.setText(GitPlugin.getInstance().getMessage("git.cloneWizard.repoExists.error"))
							.showMessageBox();
						break;
					case 0:
						ModalSpinner.addModalSpinner(this, CommonPlugin.getInstance().getMessage("spinner.gettingData"));
						GitPlugin.getInstance().service.
						getBranches(repositorySelectionPage.getURI(), this, getBranchesCallbackHandler);
				}				
			}
			
			private function getBranchesCallbackHandler(data:ArrayCollection):void {
				super.nextClickHandler();
				
				if (data != null) {
					allBranches = ArrayCollection(data[0]);					
					head = GitRef(data[1]);					
				} else {
					allBranches.removeAll();
					head = null;					
				}
				allBranches.refresh();
				
				applyFilterHandler();
				
				ModalSpinner.removeModalSpinner(this);
			}
					
			private function getSelectedBranches(onlyName:Boolean = false):ArrayCollection {
				var list:ArrayCollection = new ArrayCollection();
				for each (var branch:GitRef in branches) {
					if (branch.getSelected()) {
						list.addItem(onlyName ? branch.name : branch);
					}
				}
				return list;
			}
			
			protected function applyFilterHandler():void {
				branches.removeAll();
				for each (var branch:GitRef in allBranches) {
					if (filter.text == GitPlugin.getInstance().getMessage('git.cloneWizard.branch.filter')) {
						branches.addItem(branch);
					} else if (branch.shortName.toLowerCase().match(filter.text.toLowerCase())) {
						branches.addItem(branch);
					}
				}
				branches.refresh();
			}
			
			/**
			 * @flowerModelElementId _0LbYwDVhEeKsnMbt6YrXWQ
			 */
			protected override function finishClickHandler():void {
				ModalSpinner.addModalSpinner(this, GitPlugin.getInstance().getMessage("git.cloneWizard.cloneRepo.spinner"));
				var selectedBranches:ArrayCollection = getSelectedBranches(true);				
				GitPlugin.getInstance().service.
					cloneRepository(selectedNode,
						repositorySelectionPage.getURI(),
						selectedBranches,
						remoteName != null ? remoteName.text : defaultRemoteName,
						allBranches.length == 0 || selectedBranches.length == allBranches.length,
						this, serverResponseHandler);
			}
			
			private function serverResponseHandler(value:Boolean):void {
				ModalSpinner.removeModalSpinner(this);
				if (value) {
					super.finishClickHandler();
				}
			}
			
		]]>
	</mx:Script>
	
	<ns:states>				
		<mx:State name="0">			
			<mx:SetProperty target="{wizardTitle}" name="text" value="{GitPlugin.getInstance().getMessage('git.repoSelection.title')}"/>					
			<mx:SetProperty target="{wizardDescription}" name="text" value="{GitPlugin.getInstance().getMessage('git.repoSelection.description')}"/>
						
			<mx:AddChild relativeTo="{contentArea}">
				<component:RepositorySelectionPage id="repositorySelectionPage" width="100%" height="100%" />	
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="1" >			
			<mx:SetProperty target="{wizardTitle}" name="text" value="{GitPlugin.getInstance().getMessage('git.cloneWizard.cloneConfig.title')}"/>					
			<mx:SetProperty target="{wizardDescription}" name="text" value="{GitPlugin.getInstance().getMessage('git.cloneWizard.branch.description')}"/>			
						
			<mx:AddChild relativeTo="{contentArea}">
				<mx:VBox width="100%" height="100%" paddingTop="10">
					<mx:Label text="{GitPlugin.getInstance().getMessage('git.cloneWizard.branch.branchOf', [repositorySelectionPage.getURI()])}"/>
					<mx:TextInput id="filter" width="100%" 
								  change="applyFilterHandler()"
								  creationComplete="{TextUtils.setTextComponentHint(filter, GitPlugin.getInstance().getMessage('git.cloneWizard.branch.filter'));}"/>
					<mx:List id="listBranches" width="100%" height="100%" dataProvider="{branches}"  >
						<mx:itemRenderer>
							<mx:Component>
								<mx:HBox>
									<mx:Script>
										<![CDATA[								
											import org.flowerplatform.web.git.GitPlugin;
											import org.flowerplatform.web.git.dto.GitRef;
												
										]]>
									</mx:Script>
									
									<mx:CheckBox click="{GitRef(data).setSelected(!GitRef(data).getSelected())}" selected="{GitRef(data).getSelected()}" />									
									<common:BitmapContainer id="image" creationComplete="{image.retrieveImage(GitPlugin.getInstance().getResourceUrl('images/full/obj16/branch_obj.gif'))}"/>	
									<mx:Label text="{data.shortName}" />
								</mx:HBox>					
							</mx:Component>
						</mx:itemRenderer>
					</mx:List>
					<mx:HBox paddingTop="10" width="100%">
						<mx:Label text="{GitPlugin.getInstance().getMessage('git.cloneWizard.cloneConfig.remoteName')}"/>
						<mx:TextInput id="remoteName" width="100%" text="{defaultRemoteName}" />
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>		
	</ns:states>
	
</ns:Wizard>