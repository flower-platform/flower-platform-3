<?xml version="1.0" encoding="utf-8"?>
<!-- 
license-start

Copyright (C) 2008 - 2013 Crispico, <http://www.crispico.com/>.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, at <http://www.gnu.org/licenses/>.

Contributors:
Crispico - Initial API and implementation  The product is licensed under GPL. This is the new version of the license.

license-end
-->
<!--
	@author Cristina Constantinescu
-->
<editorsupport:EditorFrontend
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:texteditor="com.crispico.flower.texteditor.*"
	xmlns:editor="com.crispico.flower.mp.web.texteditor.*"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:editorsupport="org.flowerplatform.editor.*"
	xmlns:iframe="org.flowerplatform.flexutil.iframe.*" xmlns:ns="org.flowerplatform.editor.text.javascript_view.*"
	initialize="initializeHandler(event)">
	
	<mx:Script>	
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.flowerplatform.communication.CommunicationPlugin;
			import org.flowerplatform.editor.remote.EditorStatefulClient;
			import org.flowerplatform.editor.text.codemirror_editor.ICodeMirrorEditor;
			import org.flowerplatform.editor.text.codemirror_editor.MobileCodeMirrorEditor;
			import org.flowerplatform.editor.text.codemirror_editor.WebCodeMirrorEditor;
			import org.flowerplatform.editor.text.remote.TextEditorUpdate;
			import org.flowerplatform.flexutil.FlexUtilGlobals;
			
			private var content:String;
			private var readOnly:Boolean;	
			private var creationComplete:Boolean;
			
			private static const EDITOR_PAGE:String = "codemirror/codeMirrorEditor.html";
			
			protected function initializeHandler(event:FlexEvent):void {
				if (FlexUtilGlobals.getInstance().isMobile) {					
					editor = new MobileCodeMirrorEditor();						
				} else {
					editor = UIComponent(new WebCodeMirrorEditor("editor"));					
				}					
			}
			
			override protected function creationCompleteHandler(event:FlexEvent):void {		
				super.creationCompleteHandler(event);
												
				ICodeMirrorEditor(editor).load(FlexUtilGlobals.getInstance().createAbsoluteUrl(EditorTextPlugin.getInstance().getResourceUrl(getURL())));
				ICodeMirrorEditor(editor).addViewCompleteHandler(orionEditor_frameLoadHandler);
				
				creationComplete = true;
			}
			
			protected function getURL():String {
				var lastDotIndex:int = editorStatefulClient.editableResourcePath.lastIndexOf('.');
				if (lastDotIndex >= 0) {
					// has an extension
					var extension:String = editorStatefulClient.editableResourcePath.substring(lastDotIndex + 1);
					return EDITOR_PAGE + "?extension=" + extension + "&isMobile=" + FlexUtilGlobals.getInstance().isMobile;
				}
				return EDITOR_PAGE;
			}
			
			protected function orionEditor_frameLoadHandler(event:Event):void {
				if (content != null) {	
					// initialize code mirror editor
					ICodeMirrorEditor(editor).callJavaScriptMethod("initialize", null, escape(content), editorStatefulClient.getStatefulClientId(), readOnly);
					// listen for text changes
					ICodeMirrorEditor(editor).addCallbackHandler("codeMirrorEditorChangedHandler", textEditorChangedHandler);
				}
			}
			
			public function setContent(content:String):void {
				ICodeMirrorEditor(editor).callJavaScriptMethod("setContent", null, escape(content));
			}
			
			public function getContent(callback:Function):void {
				ICodeMirrorEditor(editor).callJavaScriptMethod("getContent", callback, null);
			}
			
			override public function disableEditing():void {
				if (creationComplete) {
					ICodeMirrorEditor(editor).callJavaScriptMethod("disableEditing");
				} else {
					readOnly = true;
				}				
			}
			
			override public function enableEditing():void {
				if (creationComplete) {
					ICodeMirrorEditor(editor).callJavaScriptMethod("enableEditing");
				} else {
					readOnly = false;
				}				
			}
			
			protected function updateText(offset:int, oldTextLength:int, newText:String):void {
				ICodeMirrorEditor(editor).callJavaScriptMethod("updateText", null, offset, oldTextLength, escape(newText));
			}
			
			override public function executeContentUpdateLogic(content:Object, isFullContent:Boolean):void {				
				var updates:ArrayCollection = ArrayCollection(content);
				if (isFullContent) {
					// Taking the first because probably only one exists with fullText.
					var update:TextEditorUpdate = TextEditorUpdate(updates[0]); 
					this.content = update.newText;
				} else { 
					// apply the updates
					for each (var update:TextEditorUpdate in updates) {						
						updateText(update.offset, update.oldTextLength, update.newText);
					}
				}
			}	
				
			protected function textEditorChangedHandler(statefulClientId:String, offset:String, oldText:String, newText:String):void {
				var updates:ArrayCollection = new ArrayCollection();
				
				var update:TextEditorUpdate = new TextEditorUpdate();
				update.offset = int(offset);
				update.oldTextLength = oldText.length;
				update.newText = newText;
				updates.addItem(update);
		
				// here we must know where to send those updates
				// ind the statefulClient based on the id sent at code mirror initialisation
				var editorStatefulClient:EditorStatefulClient = 
					EditorStatefulClient(CommunicationPlugin.getInstance().statefulClientRegistry.getStatefulClientById(statefulClientId));
				
				// for the moment the last editorFontend is used -> problems when using multiple editorFrontends
				// TO DISCUSS: how can we know the exact editorFrontend
				editorStatefulClient.attemptUpdateContent(
					editorStatefulClient.editorFrontends[editorStatefulClient.editorFrontends.length - 1], updates);
			}
						
		]]>
	</mx:Script>	
	
</editorsupport:EditorFrontend>